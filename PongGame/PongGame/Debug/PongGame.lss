
PongGame.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000410  00800100  000004a8  0000053c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000004a8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800510  00800510  0000094c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000094c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000097c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c8  00000000  00000000  000009bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000014f0  00000000  00000000  00000a84  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000090a  00000000  00000000  00001f74  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000007c6  00000000  00000000  0000287e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000238  00000000  00000000  00003044  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004be  00000000  00000000  0000327c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000c91  00000000  00000000  0000373a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d8  00000000  00000000  000043cb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	15 e0       	ldi	r17, 0x05	; 5
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e8 ea       	ldi	r30, 0xA8	; 168
  7c:	f4 e0       	ldi	r31, 0x04	; 4
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 31       	cpi	r26, 0x10	; 16
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	25 e0       	ldi	r18, 0x05	; 5
  8c:	a0 e1       	ldi	r26, 0x10	; 16
  8e:	b5 e0       	ldi	r27, 0x05	; 5
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a1 31       	cpi	r26, 0x11	; 17
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 03 02 	call	0x406	; 0x406 <main>
  9e:	0c 94 52 02 	jmp	0x4a4	; 0x4a4 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <lcd_command>:
	buff[x + (page*128)] &= ~(1 << shift);	// clear pixel in buffer
	
}

// function to write a string on the lcd
void drawstring(uint8_t *buff, uint8_t x, uint8_t line, uint8_t *c) {
  a6:	5c 98       	cbi	0x0b, 4	; 11
  a8:	27 e0       	ldi	r18, 0x07	; 7
  aa:	30 e0       	ldi	r19, 0x00	; 0
  ac:	90 e0       	ldi	r25, 0x00	; 0
  ae:	5d 98       	cbi	0x0b, 5	; 11
  b0:	ac 01       	movw	r20, r24
  b2:	02 2e       	mov	r0, r18
  b4:	02 c0       	rjmp	.+4      	; 0xba <lcd_command+0x14>
  b6:	55 95       	asr	r21
  b8:	47 95       	ror	r20
  ba:	0a 94       	dec	r0
  bc:	e2 f7       	brpl	.-8      	; 0xb6 <lcd_command+0x10>
  be:	40 ff       	sbrs	r20, 0
  c0:	02 c0       	rjmp	.+4      	; 0xc6 <lcd_command+0x20>
  c2:	5e 9a       	sbi	0x0b, 6	; 11
  c4:	01 c0       	rjmp	.+2      	; 0xc8 <lcd_command+0x22>
  c6:	5e 98       	cbi	0x0b, 6	; 11
  c8:	5d 9a       	sbi	0x0b, 5	; 11
  ca:	21 50       	subi	r18, 0x01	; 1
  cc:	31 09       	sbc	r19, r1
  ce:	78 f7       	brcc	.-34     	; 0xae <lcd_command+0x8>
  d0:	08 95       	ret

000000d2 <lcd_init>:
  d2:	56 9a       	sbi	0x0a, 6	; 10
  d4:	55 9a       	sbi	0x0a, 5	; 10
  d6:	54 9a       	sbi	0x0a, 4	; 10
  d8:	53 9a       	sbi	0x0a, 3	; 10
  da:	52 9a       	sbi	0x0a, 2	; 10
  dc:	5a 98       	cbi	0x0b, 2	; 11
  de:	5b 98       	cbi	0x0b, 3	; 11
  e0:	2f e9       	ldi	r18, 0x9F	; 159
  e2:	86 e8       	ldi	r24, 0x86	; 134
  e4:	91 e0       	ldi	r25, 0x01	; 1
  e6:	21 50       	subi	r18, 0x01	; 1
  e8:	80 40       	sbci	r24, 0x00	; 0
  ea:	90 40       	sbci	r25, 0x00	; 0
  ec:	e1 f7       	brne	.-8      	; 0xe6 <lcd_init+0x14>
  ee:	00 c0       	rjmp	.+0      	; 0xf0 <lcd_init+0x1e>
  f0:	00 00       	nop
  f2:	5b 9a       	sbi	0x0b, 3	; 11
  f4:	83 ea       	ldi	r24, 0xA3	; 163
  f6:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_command>
  fa:	80 ea       	ldi	r24, 0xA0	; 160
  fc:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_command>
 100:	80 ec       	ldi	r24, 0xC0	; 192
 102:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_command>
 106:	80 e4       	ldi	r24, 0x40	; 64
 108:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_command>
 10c:	8c e2       	ldi	r24, 0x2C	; 44
 10e:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_command>
 112:	83 ed       	ldi	r24, 0xD3	; 211
 114:	90 e3       	ldi	r25, 0x30	; 48
 116:	01 97       	sbiw	r24, 0x01	; 1
 118:	f1 f7       	brne	.-4      	; 0x116 <lcd_init+0x44>
 11a:	00 c0       	rjmp	.+0      	; 0x11c <lcd_init+0x4a>
 11c:	00 00       	nop
 11e:	8e e2       	ldi	r24, 0x2E	; 46
 120:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_command>
 124:	83 ed       	ldi	r24, 0xD3	; 211
 126:	90 e3       	ldi	r25, 0x30	; 48
 128:	01 97       	sbiw	r24, 0x01	; 1
 12a:	f1 f7       	brne	.-4      	; 0x128 <lcd_init+0x56>
 12c:	00 c0       	rjmp	.+0      	; 0x12e <lcd_init+0x5c>
 12e:	00 00       	nop
 130:	8f e2       	ldi	r24, 0x2F	; 47
 132:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_command>
 136:	83 ec       	ldi	r24, 0xC3	; 195
 138:	99 e0       	ldi	r25, 0x09	; 9
 13a:	01 97       	sbiw	r24, 0x01	; 1
 13c:	f1 f7       	brne	.-4      	; 0x13a <lcd_init+0x68>
 13e:	00 c0       	rjmp	.+0      	; 0x140 <lcd_init+0x6e>
 140:	00 00       	nop
 142:	86 e2       	ldi	r24, 0x26	; 38
 144:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_command>
 148:	08 95       	ret

0000014a <lcd_data>:
 14a:	5c 9a       	sbi	0x0b, 4	; 11
 14c:	27 e0       	ldi	r18, 0x07	; 7
 14e:	30 e0       	ldi	r19, 0x00	; 0
 150:	90 e0       	ldi	r25, 0x00	; 0
 152:	5d 98       	cbi	0x0b, 5	; 11
 154:	ac 01       	movw	r20, r24
 156:	02 2e       	mov	r0, r18
 158:	02 c0       	rjmp	.+4      	; 0x15e <lcd_data+0x14>
 15a:	55 95       	asr	r21
 15c:	47 95       	ror	r20
 15e:	0a 94       	dec	r0
 160:	e2 f7       	brpl	.-8      	; 0x15a <lcd_data+0x10>
 162:	40 ff       	sbrs	r20, 0
 164:	02 c0       	rjmp	.+4      	; 0x16a <lcd_data+0x20>
 166:	5e 9a       	sbi	0x0b, 6	; 11
 168:	01 c0       	rjmp	.+2      	; 0x16c <lcd_data+0x22>
 16a:	5e 98       	cbi	0x0b, 6	; 11
 16c:	5d 9a       	sbi	0x0b, 5	; 11
 16e:	21 50       	subi	r18, 0x01	; 1
 170:	31 09       	sbc	r19, r1
 172:	78 f7       	brcc	.-34     	; 0x152 <lcd_data+0x8>
 174:	08 95       	ret

00000176 <lcd_set_brightness>:
 176:	cf 93       	push	r28
 178:	c8 2f       	mov	r28, r24
 17a:	81 e8       	ldi	r24, 0x81	; 129
 17c:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_command>
 180:	8c 2f       	mov	r24, r28
 182:	8f 73       	andi	r24, 0x3F	; 63
 184:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_command>
 188:	cf 91       	pop	r28
 18a:	08 95       	ret

0000018c <write_buffer>:
 18c:	cf 92       	push	r12
 18e:	df 92       	push	r13
 190:	ef 92       	push	r14
 192:	ff 92       	push	r15
 194:	0f 93       	push	r16
 196:	1f 93       	push	r17
 198:	cf 93       	push	r28
 19a:	df 93       	push	r29
 19c:	0f 2e       	mov	r0, r31
 19e:	f0 e0       	ldi	r31, 0x00	; 0
 1a0:	ef 2e       	mov	r14, r31
 1a2:	f5 e0       	ldi	r31, 0x05	; 5
 1a4:	ff 2e       	mov	r15, r31
 1a6:	f0 2d       	mov	r31, r0
 1a8:	ec 01       	movw	r28, r24
 1aa:	0f 2e       	mov	r0, r31
 1ac:	f0 e1       	ldi	r31, 0x10	; 16
 1ae:	cf 2e       	mov	r12, r31
 1b0:	f5 e0       	ldi	r31, 0x05	; 5
 1b2:	df 2e       	mov	r13, r31
 1b4:	f0 2d       	mov	r31, r0
 1b6:	f7 01       	movw	r30, r14
 1b8:	80 81       	ld	r24, Z
 1ba:	f2 e0       	ldi	r31, 0x02	; 2
 1bc:	ef 0e       	add	r14, r31
 1be:	f1 1c       	adc	r15, r1
 1c0:	80 6b       	ori	r24, 0xB0	; 176
 1c2:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_command>
 1c6:	80 e0       	ldi	r24, 0x00	; 0
 1c8:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_command>
 1cc:	80 e1       	ldi	r24, 0x10	; 16
 1ce:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_command>
 1d2:	80 ee       	ldi	r24, 0xE0	; 224
 1d4:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_command>
 1d8:	8f ef       	ldi	r24, 0xFF	; 255
 1da:	0e 94 a5 00 	call	0x14a	; 0x14a <lcd_data>
 1de:	8e 01       	movw	r16, r28
 1e0:	00 58       	subi	r16, 0x80	; 128
 1e2:	1f 4f       	sbci	r17, 0xFF	; 255
 1e4:	89 91       	ld	r24, Y+
 1e6:	0e 94 a5 00 	call	0x14a	; 0x14a <lcd_data>
 1ea:	c0 17       	cp	r28, r16
 1ec:	d1 07       	cpc	r29, r17
 1ee:	d1 f7       	brne	.-12     	; 0x1e4 <write_buffer+0x58>
 1f0:	e8 01       	movw	r28, r16
 1f2:	ce 14       	cp	r12, r14
 1f4:	df 04       	cpc	r13, r15
 1f6:	f9 f6       	brne	.-66     	; 0x1b6 <write_buffer+0x2a>
 1f8:	df 91       	pop	r29
 1fa:	cf 91       	pop	r28
 1fc:	1f 91       	pop	r17
 1fe:	0f 91       	pop	r16
 200:	ff 90       	pop	r15
 202:	ef 90       	pop	r14
 204:	df 90       	pop	r13
 206:	cf 90       	pop	r12
 208:	08 95       	ret

0000020a <clear_buffer>:
 20a:	20 e0       	ldi	r18, 0x00	; 0
 20c:	34 e0       	ldi	r19, 0x04	; 4
 20e:	fc 01       	movw	r30, r24
 210:	a9 01       	movw	r20, r18
 212:	11 92       	st	Z+, r1
 214:	41 50       	subi	r20, 0x01	; 1
 216:	50 40       	sbci	r21, 0x00	; 0
 218:	e1 f7       	brne	.-8      	; 0x212 <clear_buffer+0x8>
 21a:	08 95       	ret

0000021c <setpixel>:
 21c:	24 2f       	mov	r18, r20
 21e:	26 95       	lsr	r18
 220:	26 95       	lsr	r18
 222:	26 95       	lsr	r18
 224:	e6 2f       	mov	r30, r22
 226:	f0 e0       	ldi	r31, 0x00	; 0
 228:	30 e8       	ldi	r19, 0x80	; 128
 22a:	23 9f       	mul	r18, r19
 22c:	e0 0d       	add	r30, r0
 22e:	f1 1d       	adc	r31, r1
 230:	11 24       	eor	r1, r1
 232:	e8 0f       	add	r30, r24
 234:	f9 1f       	adc	r31, r25
 236:	40 95       	com	r20
 238:	47 70       	andi	r20, 0x07	; 7
 23a:	81 e0       	ldi	r24, 0x01	; 1
 23c:	90 e0       	ldi	r25, 0x00	; 0
 23e:	02 c0       	rjmp	.+4      	; 0x244 <setpixel+0x28>
 240:	88 0f       	add	r24, r24
 242:	99 1f       	adc	r25, r25
 244:	4a 95       	dec	r20
 246:	e2 f7       	brpl	.-8      	; 0x240 <setpixel+0x24>
 248:	90 81       	ld	r25, Z
 24a:	89 2b       	or	r24, r25
 24c:	80 83       	st	Z, r24
 24e:	08 95       	ret

00000250 <drawline>:
	//}

}

// use bresenham's algorithm to write this function to draw a line
void drawline(uint8_t *buff,uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1,uint8_t color) {
 250:	8f 92       	push	r8
 252:	9f 92       	push	r9
 254:	af 92       	push	r10
 256:	bf 92       	push	r11
 258:	cf 92       	push	r12
 25a:	df 92       	push	r13
 25c:	ef 92       	push	r14
 25e:	0f 93       	push	r16
 260:	1f 93       	push	r17
 262:	cf 93       	push	r28
 264:	df 93       	push	r29
 266:	5c 01       	movw	r10, r24
 268:	c2 2f       	mov	r28, r18
	
	// vertical line 
	if (x1 == x0) {
 26a:	26 13       	cpse	r18, r22
 26c:	2e c0       	rjmp	.+92     	; 0x2ca <drawline+0x7a>
		// descending
		if (y1 > y0) {
 26e:	40 17       	cp	r20, r16
 270:	30 f0       	brcs	.+12     	; 0x27e <drawline+0x2e>
			for (int i = 0; i <= y1 - y0; i++) {
				setpixel(buff,x0,y0 + i,color);
			}
		// ascending	
		} else {
			for (int i = 0; i <= y0 - y1; i++) {
 272:	c4 2e       	mov	r12, r20
 274:	d1 2c       	mov	r13, r1
 276:	c0 1a       	sub	r12, r16
 278:	d1 08       	sbc	r13, r1
 27a:	ba f4       	brpl	.+46     	; 0x2aa <drawline+0x5a>
 27c:	55 c0       	rjmp	.+170    	; 0x328 <drawline+0xd8>
	
	// vertical line 
	if (x1 == x0) {
		// descending
		if (y1 > y0) {
			for (int i = 0; i <= y1 - y0; i++) {
 27e:	10 e0       	ldi	r17, 0x00	; 0
 280:	04 1b       	sub	r16, r20
 282:	11 09       	sbc	r17, r1
 284:	0a f4       	brpl	.+2      	; 0x288 <drawline+0x38>
 286:	50 c0       	rjmp	.+160    	; 0x328 <drawline+0xd8>
 288:	c4 2e       	mov	r12, r20
 28a:	81 2c       	mov	r8, r1
 28c:	91 2c       	mov	r9, r1
				setpixel(buff,x0,y0 + i,color);
 28e:	2e 2d       	mov	r18, r14
 290:	4c 2d       	mov	r20, r12
 292:	6c 2f       	mov	r22, r28
 294:	c5 01       	movw	r24, r10
 296:	0e 94 0e 01 	call	0x21c	; 0x21c <setpixel>
	
	// vertical line 
	if (x1 == x0) {
		// descending
		if (y1 > y0) {
			for (int i = 0; i <= y1 - y0; i++) {
 29a:	8f ef       	ldi	r24, 0xFF	; 255
 29c:	88 1a       	sub	r8, r24
 29e:	98 0a       	sbc	r9, r24
 2a0:	c3 94       	inc	r12
 2a2:	08 15       	cp	r16, r8
 2a4:	19 05       	cpc	r17, r9
 2a6:	9c f7       	brge	.-26     	; 0x28e <drawline+0x3e>
 2a8:	3f c0       	rjmp	.+126    	; 0x328 <drawline+0xd8>
				setpixel(buff,x0,y0 + i,color);
			}
		// ascending	
		} else {
			for (int i = 0; i <= y0 - y1; i++) {
 2aa:	81 2c       	mov	r8, r1
 2ac:	91 2c       	mov	r9, r1
				setpixel(buff,x0,y1 + i,color);
 2ae:	2e 2d       	mov	r18, r14
 2b0:	40 2f       	mov	r20, r16
 2b2:	6c 2f       	mov	r22, r28
 2b4:	c5 01       	movw	r24, r10
 2b6:	0e 94 0e 01 	call	0x21c	; 0x21c <setpixel>
			for (int i = 0; i <= y1 - y0; i++) {
				setpixel(buff,x0,y0 + i,color);
			}
		// ascending	
		} else {
			for (int i = 0; i <= y0 - y1; i++) {
 2ba:	8f ef       	ldi	r24, 0xFF	; 255
 2bc:	88 1a       	sub	r8, r24
 2be:	98 0a       	sbc	r9, r24
 2c0:	0f 5f       	subi	r16, 0xFF	; 255
 2c2:	c8 14       	cp	r12, r8
 2c4:	d9 04       	cpc	r13, r9
 2c6:	9c f7       	brge	.-26     	; 0x2ae <drawline+0x5e>
 2c8:	2f c0       	rjmp	.+94     	; 0x328 <drawline+0xd8>
			}
		}			
	}
	
	// horizontal line
	else if (y1 == y0) {
 2ca:	04 13       	cpse	r16, r20
 2cc:	2d c0       	rjmp	.+90     	; 0x328 <drawline+0xd8>
		// left to right
		if (x1 > x0) {
 2ce:	62 17       	cp	r22, r18
 2d0:	30 f0       	brcs	.+12     	; 0x2de <drawline+0x8e>
			for (int i = 0; i <= x1 - x0; i++) {
				setpixel(buff,x0 + i,y0,color);
			}
		// right to left
		} else {
			for (int i = 0; i <= x0 - x1; i++) {
 2d2:	c6 2e       	mov	r12, r22
 2d4:	d1 2c       	mov	r13, r1
 2d6:	c2 1a       	sub	r12, r18
 2d8:	d1 08       	sbc	r13, r1
 2da:	ba f4       	brpl	.+46     	; 0x30a <drawline+0xba>
 2dc:	25 c0       	rjmp	.+74     	; 0x328 <drawline+0xd8>
	
	// horizontal line
	else if (y1 == y0) {
		// left to right
		if (x1 > x0) {
			for (int i = 0; i <= x1 - x0; i++) {
 2de:	c2 2f       	mov	r28, r18
 2e0:	d0 e0       	ldi	r29, 0x00	; 0
 2e2:	c6 1b       	sub	r28, r22
 2e4:	d1 09       	sbc	r29, r1
 2e6:	02 f1       	brmi	.+64     	; 0x328 <drawline+0xd8>
 2e8:	c6 2e       	mov	r12, r22
 2ea:	81 2c       	mov	r8, r1
 2ec:	91 2c       	mov	r9, r1
				setpixel(buff,x0 + i,y0,color);
 2ee:	2e 2d       	mov	r18, r14
 2f0:	40 2f       	mov	r20, r16
 2f2:	6c 2d       	mov	r22, r12
 2f4:	c5 01       	movw	r24, r10
 2f6:	0e 94 0e 01 	call	0x21c	; 0x21c <setpixel>
	
	// horizontal line
	else if (y1 == y0) {
		// left to right
		if (x1 > x0) {
			for (int i = 0; i <= x1 - x0; i++) {
 2fa:	8f ef       	ldi	r24, 0xFF	; 255
 2fc:	88 1a       	sub	r8, r24
 2fe:	98 0a       	sbc	r9, r24
 300:	c3 94       	inc	r12
 302:	c8 15       	cp	r28, r8
 304:	d9 05       	cpc	r29, r9
 306:	9c f7       	brge	.-26     	; 0x2ee <drawline+0x9e>
 308:	0f c0       	rjmp	.+30     	; 0x328 <drawline+0xd8>
				setpixel(buff,x0 + i,y0,color);
			}
		// right to left
		} else {
			for (int i = 0; i <= x0 - x1; i++) {
 30a:	81 2c       	mov	r8, r1
 30c:	91 2c       	mov	r9, r1
				setpixel(buff,x1 + i,y0,color);
 30e:	2e 2d       	mov	r18, r14
 310:	40 2f       	mov	r20, r16
 312:	6c 2f       	mov	r22, r28
 314:	c5 01       	movw	r24, r10
 316:	0e 94 0e 01 	call	0x21c	; 0x21c <setpixel>
			for (int i = 0; i <= x1 - x0; i++) {
				setpixel(buff,x0 + i,y0,color);
			}
		// right to left
		} else {
			for (int i = 0; i <= x0 - x1; i++) {
 31a:	8f ef       	ldi	r24, 0xFF	; 255
 31c:	88 1a       	sub	r8, r24
 31e:	98 0a       	sbc	r9, r24
 320:	cf 5f       	subi	r28, 0xFF	; 255
 322:	c8 14       	cp	r12, r8
 324:	d9 04       	cpc	r13, r9
 326:	9c f7       	brge	.-26     	; 0x30e <drawline+0xbe>
				setpixel(buff,x1 + i,y0,color);
			}
		}
	}

}
 328:	df 91       	pop	r29
 32a:	cf 91       	pop	r28
 32c:	1f 91       	pop	r17
 32e:	0f 91       	pop	r16
 330:	ef 90       	pop	r14
 332:	df 90       	pop	r13
 334:	cf 90       	pop	r12
 336:	bf 90       	pop	r11
 338:	af 90       	pop	r10
 33a:	9f 90       	pop	r9
 33c:	8f 90       	pop	r8
 33e:	08 95       	ret

00000340 <fillrect>:

// function to draw a filled rectangle
void fillrect(uint8_t *buff,uint8_t x, uint8_t y, uint8_t w, uint8_t h,uint8_t color) {
 340:	8f 92       	push	r8
 342:	9f 92       	push	r9
 344:	af 92       	push	r10
 346:	bf 92       	push	r11
 348:	cf 92       	push	r12
 34a:	df 92       	push	r13
 34c:	ef 92       	push	r14
 34e:	ff 92       	push	r15
 350:	0f 93       	push	r16
 352:	1f 93       	push	r17
 354:	cf 93       	push	r28
 356:	df 93       	push	r29
 358:	4c 01       	movw	r8, r24
 35a:	14 2f       	mov	r17, r20
 35c:	fe 2c       	mov	r15, r14
	// h number of drawlines, from (x,y) to (x+w,y), iterate
	// (x,y) to (x+w,y) -> (x,y+1) to (x+w,y+1) -> (x,y+i) to (x+w,y+i)
	
	for (int i = 0; i <= w; i++) {
 35e:	a2 2e       	mov	r10, r18
 360:	b1 2c       	mov	r11, r1
 362:	c6 2f       	mov	r28, r22
 364:	c1 2c       	mov	r12, r1
 366:	d1 2c       	mov	r13, r1
		drawline(buff,x+i,y,x+i,y+h,color);
 368:	d4 2f       	mov	r29, r20
 36a:	d0 0f       	add	r29, r16
 36c:	ef 2c       	mov	r14, r15
 36e:	0d 2f       	mov	r16, r29
 370:	2c 2f       	mov	r18, r28
 372:	41 2f       	mov	r20, r17
 374:	6c 2f       	mov	r22, r28
 376:	c4 01       	movw	r24, r8
 378:	0e 94 28 01 	call	0x250	; 0x250 <drawline>
// function to draw a filled rectangle
void fillrect(uint8_t *buff,uint8_t x, uint8_t y, uint8_t w, uint8_t h,uint8_t color) {
	// h number of drawlines, from (x,y) to (x+w,y), iterate
	// (x,y) to (x+w,y) -> (x,y+1) to (x+w,y+1) -> (x,y+i) to (x+w,y+i)
	
	for (int i = 0; i <= w; i++) {
 37c:	8f ef       	ldi	r24, 0xFF	; 255
 37e:	c8 1a       	sub	r12, r24
 380:	d8 0a       	sbc	r13, r24
 382:	cf 5f       	subi	r28, 0xFF	; 255
 384:	ac 14       	cp	r10, r12
 386:	bd 04       	cpc	r11, r13
 388:	8c f7       	brge	.-30     	; 0x36c <fillrect+0x2c>
		drawline(buff,x+i,y,x+i,y+h,color);
	}
}
 38a:	df 91       	pop	r29
 38c:	cf 91       	pop	r28
 38e:	1f 91       	pop	r17
 390:	0f 91       	pop	r16
 392:	ff 90       	pop	r15
 394:	ef 90       	pop	r14
 396:	df 90       	pop	r13
 398:	cf 90       	pop	r12
 39a:	bf 90       	pop	r11
 39c:	af 90       	pop	r10
 39e:	9f 90       	pop	r9
 3a0:	8f 90       	pop	r8
 3a2:	08 95       	ret

000003a4 <drawrect>:


// function to draw a rectangle
void drawrect(uint8_t *buff,uint8_t x, uint8_t y, uint8_t w, uint8_t h,uint8_t color) {
 3a4:	bf 92       	push	r11
 3a6:	cf 92       	push	r12
 3a8:	df 92       	push	r13
 3aa:	ef 92       	push	r14
 3ac:	ff 92       	push	r15
 3ae:	0f 93       	push	r16
 3b0:	1f 93       	push	r17
 3b2:	cf 93       	push	r28
 3b4:	df 93       	push	r29
 3b6:	6c 01       	movw	r12, r24
 3b8:	f6 2e       	mov	r15, r22
 3ba:	14 2f       	mov	r17, r20
 3bc:	d0 2f       	mov	r29, r16
	
	// top
	drawline(buff,x,y,x+w,y,color);
 3be:	c6 2f       	mov	r28, r22
 3c0:	c2 0f       	add	r28, r18
 3c2:	04 2f       	mov	r16, r20
 3c4:	2c 2f       	mov	r18, r28
 3c6:	0e 94 28 01 	call	0x250	; 0x250 <drawline>
	
	// left
	drawline(buff,x,y,x,y+h,color);
 3ca:	d1 0f       	add	r29, r17
 3cc:	0d 2f       	mov	r16, r29
 3ce:	2f 2d       	mov	r18, r15
 3d0:	41 2f       	mov	r20, r17
 3d2:	6f 2d       	mov	r22, r15
 3d4:	c6 01       	movw	r24, r12
 3d6:	0e 94 28 01 	call	0x250	; 0x250 <drawline>
	
	// bottom
	drawline(buff,x,y+h,x+w,y+h,color);
 3da:	2c 2f       	mov	r18, r28
 3dc:	4d 2f       	mov	r20, r29
 3de:	6f 2d       	mov	r22, r15
 3e0:	c6 01       	movw	r24, r12
 3e2:	0e 94 28 01 	call	0x250	; 0x250 <drawline>
	
	// right
	drawline(buff,x+w,y,x+w,y+h,color);
 3e6:	2c 2f       	mov	r18, r28
 3e8:	41 2f       	mov	r20, r17
 3ea:	6c 2f       	mov	r22, r28
 3ec:	c6 01       	movw	r24, r12
 3ee:	0e 94 28 01 	call	0x250	; 0x250 <drawline>

}
 3f2:	df 91       	pop	r29
 3f4:	cf 91       	pop	r28
 3f6:	1f 91       	pop	r17
 3f8:	0f 91       	pop	r16
 3fa:	ff 90       	pop	r15
 3fc:	ef 90       	pop	r14
 3fe:	df 90       	pop	r13
 400:	cf 90       	pop	r12
 402:	bf 90       	pop	r11
 404:	08 95       	ret

00000406 <main>:
char displayChar = 0;

int main(void)
{
	//setting up the gpio for backlight
	DDRD |= 0x1C;
 406:	8a b1       	in	r24, 0x0a	; 10
 408:	8c 61       	ori	r24, 0x1C	; 28
 40a:	8a b9       	out	0x0a, r24	; 10
	PORTD &= ~0x1C;
 40c:	8b b1       	in	r24, 0x0b	; 11
 40e:	83 7e       	andi	r24, 0xE3	; 227
 410:	8b b9       	out	0x0b, r24	; 11
	PORTD |= 0x00;
 412:	8b b1       	in	r24, 0x0b	; 11
 414:	8b b9       	out	0x0b, r24	; 11
	
	//lcd initialisation
	lcd_init();
 416:	0e 94 69 00 	call	0xd2	; 0xd2 <lcd_init>
	lcd_command(CMD_DISPLAY_ON);
 41a:	8f ea       	ldi	r24, 0xAF	; 175
 41c:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_command>
	lcd_set_brightness(0x18);
 420:	88 e1       	ldi	r24, 0x18	; 24
 422:	0e 94 bb 00 	call	0x176	; 0x176 <lcd_set_brightness>
	write_buffer(buff);
 426:	80 e0       	ldi	r24, 0x00	; 0
 428:	91 e0       	ldi	r25, 0x01	; 1
 42a:	0e 94 c6 00 	call	0x18c	; 0x18c <write_buffer>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 42e:	2f e7       	ldi	r18, 0x7F	; 127
 430:	86 e9       	ldi	r24, 0x96	; 150
 432:	98 e9       	ldi	r25, 0x98	; 152
 434:	21 50       	subi	r18, 0x01	; 1
 436:	80 40       	sbci	r24, 0x00	; 0
 438:	90 40       	sbci	r25, 0x00	; 0
 43a:	e1 f7       	brne	.-8      	; 0x434 <main+0x2e>
 43c:	00 c0       	rjmp	.+0      	; 0x43e <main+0x38>
 43e:	00 00       	nop
	_delay_ms(50000);
	clear_buffer(buff);
 440:	80 e0       	ldi	r24, 0x00	; 0
 442:	91 e0       	ldi	r25, 0x01	; 1
 444:	0e 94 05 01 	call	0x20a	; 0x20a <clear_buffer>
	
	fillrect(buff,0,0,20,20,displayChar);
 448:	e0 90 10 05 	lds	r14, 0x0510	; 0x800510 <__data_end>
 44c:	04 e1       	ldi	r16, 0x14	; 20
 44e:	24 e1       	ldi	r18, 0x14	; 20
 450:	40 e0       	ldi	r20, 0x00	; 0
 452:	60 e0       	ldi	r22, 0x00	; 0
 454:	80 e0       	ldi	r24, 0x00	; 0
 456:	91 e0       	ldi	r25, 0x01	; 1
 458:	0e 94 a0 01 	call	0x340	; 0x340 <fillrect>
	write_buffer(buff);
 45c:	80 e0       	ldi	r24, 0x00	; 0
 45e:	91 e0       	ldi	r25, 0x01	; 1
 460:	0e 94 c6 00 	call	0x18c	; 0x18c <write_buffer>
 464:	2f e7       	ldi	r18, 0x7F	; 127
 466:	8d e8       	ldi	r24, 0x8D	; 141
 468:	9b e5       	ldi	r25, 0x5B	; 91
 46a:	21 50       	subi	r18, 0x01	; 1
 46c:	80 40       	sbci	r24, 0x00	; 0
 46e:	90 40       	sbci	r25, 0x00	; 0
 470:	e1 f7       	brne	.-8      	; 0x46a <main+0x64>
 472:	00 c0       	rjmp	.+0      	; 0x474 <main+0x6e>
 474:	00 00       	nop
	_delay_ms(30000);
	drawrect(buff,30,30,20,20,displayChar);
 476:	e0 90 10 05 	lds	r14, 0x0510	; 0x800510 <__data_end>
 47a:	24 e1       	ldi	r18, 0x14	; 20
 47c:	4e e1       	ldi	r20, 0x1E	; 30
 47e:	6e e1       	ldi	r22, 0x1E	; 30
 480:	80 e0       	ldi	r24, 0x00	; 0
 482:	91 e0       	ldi	r25, 0x01	; 1
 484:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <drawrect>
	write_buffer(buff);
 488:	80 e0       	ldi	r24, 0x00	; 0
 48a:	91 e0       	ldi	r25, 0x01	; 1
 48c:	0e 94 c6 00 	call	0x18c	; 0x18c <write_buffer>
 490:	2f e7       	ldi	r18, 0x7F	; 127
 492:	8d e8       	ldi	r24, 0x8D	; 141
 494:	9b e5       	ldi	r25, 0x5B	; 91
 496:	21 50       	subi	r18, 0x01	; 1
 498:	80 40       	sbci	r24, 0x00	; 0
 49a:	90 40       	sbci	r25, 0x00	; 0
 49c:	e1 f7       	brne	.-8      	; 0x496 <main+0x90>
 49e:	00 c0       	rjmp	.+0      	; 0x4a0 <main+0x9a>
 4a0:	00 00       	nop
 4a2:	ff cf       	rjmp	.-2      	; 0x4a2 <main+0x9c>

000004a4 <_exit>:
 4a4:	f8 94       	cli

000004a6 <__stop_program>:
 4a6:	ff cf       	rjmp	.-2      	; 0x4a6 <__stop_program>
