
PongGame.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000043a  00800100  000012da  0000136e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000012da  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000000e  0080053a  0080053a  000017a8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000017a8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000017d8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000108  00000000  00000000  00001818  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001d39  00000000  00000000  00001920  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000adb  00000000  00000000  00003659  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000b7a  00000000  00000000  00004134  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003d0  00000000  00000000  00004cb0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005a8  00000000  00000000  00005080  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000015a5  00000000  00000000  00005628  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000118  00000000  00000000  00006bcd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 b2 02 	jmp	0x564	; 0x564 <__ctors_end>
       4:	0c 94 cf 02 	jmp	0x59e	; 0x59e <__bad_interrupt>
       8:	0c 94 cf 02 	jmp	0x59e	; 0x59e <__bad_interrupt>
       c:	0c 94 cf 02 	jmp	0x59e	; 0x59e <__bad_interrupt>
      10:	0c 94 cf 02 	jmp	0x59e	; 0x59e <__bad_interrupt>
      14:	0c 94 cf 02 	jmp	0x59e	; 0x59e <__bad_interrupt>
      18:	0c 94 cf 02 	jmp	0x59e	; 0x59e <__bad_interrupt>
      1c:	0c 94 cf 02 	jmp	0x59e	; 0x59e <__bad_interrupt>
      20:	0c 94 cf 02 	jmp	0x59e	; 0x59e <__bad_interrupt>
      24:	0c 94 cf 02 	jmp	0x59e	; 0x59e <__bad_interrupt>
      28:	0c 94 cf 02 	jmp	0x59e	; 0x59e <__bad_interrupt>
      2c:	0c 94 cf 02 	jmp	0x59e	; 0x59e <__bad_interrupt>
      30:	0c 94 cf 02 	jmp	0x59e	; 0x59e <__bad_interrupt>
      34:	0c 94 cf 02 	jmp	0x59e	; 0x59e <__bad_interrupt>
      38:	0c 94 cf 02 	jmp	0x59e	; 0x59e <__bad_interrupt>
      3c:	0c 94 cf 02 	jmp	0x59e	; 0x59e <__bad_interrupt>
      40:	0c 94 cf 02 	jmp	0x59e	; 0x59e <__bad_interrupt>
      44:	0c 94 cf 02 	jmp	0x59e	; 0x59e <__bad_interrupt>
      48:	0c 94 cf 02 	jmp	0x59e	; 0x59e <__bad_interrupt>
      4c:	0c 94 cf 02 	jmp	0x59e	; 0x59e <__bad_interrupt>
      50:	0c 94 cf 02 	jmp	0x59e	; 0x59e <__bad_interrupt>
      54:	0c 94 cf 02 	jmp	0x59e	; 0x59e <__bad_interrupt>
      58:	0c 94 cf 02 	jmp	0x59e	; 0x59e <__bad_interrupt>
      5c:	0c 94 cf 02 	jmp	0x59e	; 0x59e <__bad_interrupt>
      60:	0c 94 cf 02 	jmp	0x59e	; 0x59e <__bad_interrupt>
      64:	0c 94 cf 02 	jmp	0x59e	; 0x59e <__bad_interrupt>

00000068 <__trampolines_end>:
      68:	00 00       	nop
      6a:	00 00       	nop
      6c:	00 7c       	andi	r16, 0xC0	; 192
      6e:	da f2       	brmi	.-74     	; 0x26 <__FUSE_REGION_LENGTH__+0x23>
      70:	da 7c       	andi	r29, 0xCA	; 202
      72:	7c d6       	rcall	.+3320   	; 0xd6c <update+0x68>
      74:	f2 d6       	rcall	.+3556   	; 0xe5a <update+0x156>
      76:	7c 38       	cpi	r23, 0x8C	; 140
      78:	7c 3e       	cpi	r23, 0xEC	; 236
      7a:	7c 38       	cpi	r23, 0x8C	; 140
      7c:	18 3c       	cpi	r17, 0xC8	; 200
      7e:	7e 3c       	cpi	r23, 0xCE	; 206
      80:	18 38       	cpi	r17, 0x88	; 136
      82:	ea be       	out	0x3a, r14	; 58
      84:	ea 38       	cpi	r30, 0x8A	; 138
      86:	38 7a       	andi	r19, 0xA8	; 168
      88:	fe 7a       	andi	r31, 0xAE	; 174
      8a:	38 00       	.word	0x0038	; ????
      8c:	18 3c       	cpi	r17, 0xC8	; 200
      8e:	18 00       	.word	0x0018	; ????
      90:	ff e7       	ldi	r31, 0x7F	; 127
      92:	c3 e7       	ldi	r28, 0x73	; 115
      94:	ff 00       	.word	0x00ff	; ????
      96:	18 24       	eor	r1, r8
      98:	18 00       	.word	0x0018	; ????
      9a:	ff e7       	ldi	r31, 0x7F	; 127
      9c:	db e7       	ldi	r29, 0x7B	; 123
      9e:	ff 0c       	add	r15, r15
      a0:	12 5c       	subi	r17, 0xC2	; 194
      a2:	60 70       	andi	r22, 0x00	; 0
      a4:	64 94       	.word	0x9464	; ????
      a6:	9e 94 64 02 	call	0x2404c8	; 0x2404c8 <__TEXT_REGION_LENGTH__+0x2204c8>
      aa:	fe a0       	ldd	r15, Y+38	; 0x26
      ac:	a0 e0       	ldi	r26, 0x00	; 0
      ae:	02 fe       	sbrs	r0, 2
      b0:	a0 a4       	ldd	r10, Z+40	; 0x28
      b2:	fc 5a       	subi	r31, 0xAC	; 172
      b4:	3c e7       	ldi	r19, 0x7C	; 124
      b6:	3c 5a       	subi	r19, 0xAC	; 172
      b8:	fe 7c       	andi	r31, 0xCE	; 206
      ba:	38 38       	cpi	r19, 0x88	; 136
      bc:	10 10       	cpse	r1, r0
      be:	38 38       	cpi	r19, 0x88	; 136
      c0:	7c fe       	.word	0xfe7c	; ????
      c2:	28 44       	sbci	r18, 0x48	; 72
      c4:	fe 44       	sbci	r31, 0x4E	; 78
      c6:	28 fa       	.word	0xfa28	; ????
      c8:	fa 00       	.word	0x00fa	; ????
      ca:	fa fa       	.word	0xfafa	; ????
      cc:	60 90 fe 80 	lds	r6, 0x80FE	; 0x8080fe <__bss_end+0x7bb6>
      d0:	fe 00       	.word	0x00fe	; ????
      d2:	66 91       	elpm	r22, Z
      d4:	a9 56       	subi	r26, 0x69	; 105
      d6:	06 06       	cpc	r0, r22
      d8:	06 06       	cpc	r0, r22
      da:	06 29       	or	r16, r6
      dc:	45 ff       	sbrs	r20, 5
      de:	45 29       	or	r20, r5
      e0:	10 20       	and	r1, r0
      e2:	7e 20       	and	r7, r14
      e4:	10 08       	sbc	r1, r0
      e6:	04 7e       	andi	r16, 0xE4	; 228
      e8:	04 08       	sbc	r0, r4
      ea:	10 10       	cpse	r1, r0
      ec:	54 38       	cpi	r21, 0x84	; 132
      ee:	10 10       	cpse	r1, r0
      f0:	38 54       	subi	r19, 0x48	; 72
      f2:	10 10       	cpse	r1, r0
      f4:	78 08       	sbc	r7, r8
      f6:	08 08       	sbc	r0, r8
      f8:	08 30       	cpi	r16, 0x08	; 8
      fa:	78 30       	cpi	r23, 0x08	; 8
      fc:	78 30       	cpi	r23, 0x08	; 8
      fe:	0c 1c       	adc	r0, r12
     100:	7c 1c       	adc	r7, r12
     102:	0c 60       	ori	r16, 0x0C	; 12
     104:	70 7c       	andi	r23, 0xC0	; 192
     106:	70 60       	ori	r23, 0x00	; 0
     108:	00 00       	nop
     10a:	00 00       	nop
     10c:	00 00       	nop
     10e:	00 fa       	bst	r0, 0
     110:	00 00       	nop
     112:	00 e0       	ldi	r16, 0x00	; 0
     114:	00 e0       	ldi	r16, 0x00	; 0
     116:	00 28       	or	r0, r0
     118:	fe 28       	or	r15, r14
     11a:	fe 28       	or	r15, r14
     11c:	24 54       	subi	r18, 0x44	; 68
     11e:	fe 54       	subi	r31, 0x4E	; 78
     120:	48 c4       	rjmp	.+2192   	; 0x9b2 <fillcircle+0x2c>
     122:	c8 10       	cpse	r12, r8
     124:	26 46       	sbci	r18, 0x66	; 102
     126:	6c 92       	st	X, r6
     128:	6a 04       	cpc	r6, r10
     12a:	0a 00       	.word	0x000a	; ????
     12c:	10 e0       	ldi	r17, 0x00	; 0
     12e:	c0 00       	.word	0x00c0	; ????
     130:	00 38       	cpi	r16, 0x80	; 128
     132:	44 82       	std	Z+4, r4	; 0x04
     134:	00 00       	nop
     136:	82 44       	sbci	r24, 0x42	; 66
     138:	38 00       	.word	0x0038	; ????
     13a:	54 38       	cpi	r21, 0x84	; 132
     13c:	fe 38       	cpi	r31, 0x8E	; 142
     13e:	54 10       	cpse	r5, r4
     140:	10 7c       	andi	r17, 0xC0	; 192
     142:	10 10       	cpse	r1, r0
     144:	00 01       	movw	r0, r0
     146:	0e 0c       	add	r0, r14
     148:	00 10       	cpse	r0, r0
     14a:	10 10       	cpse	r1, r0
     14c:	10 10       	cpse	r1, r0
     14e:	00 00       	nop
     150:	06 06       	cpc	r0, r22
     152:	00 04       	cpc	r0, r0
     154:	08 10       	cpse	r0, r8
     156:	20 40       	sbci	r18, 0x00	; 0
     158:	7c 8a       	std	Y+20, r7	; 0x14
     15a:	92 a2       	std	Z+34, r9	; 0x22
     15c:	7c 00       	.word	0x007c	; ????
     15e:	42 fe       	sbrs	r4, 2
     160:	02 00       	.word	0x0002	; ????
     162:	4e 92       	st	-X, r4
     164:	92 92       	st	-Z, r9
     166:	62 84       	ldd	r6, Z+10	; 0x0a
     168:	82 92       	st	-Z, r8
     16a:	b2 cc       	rjmp	.-1692   	; 0xfffffad0 <__eeprom_end+0xff7efad0>
     16c:	18 28       	or	r1, r8
     16e:	48 fe       	.word	0xfe48	; ????
     170:	08 e4       	ldi	r16, 0x48	; 72
     172:	a2 a2       	std	Z+34, r10	; 0x22
     174:	a2 9c       	mul	r10, r2
     176:	3c 52       	subi	r19, 0x2C	; 44
     178:	92 92       	st	-Z, r9
     17a:	8c 82       	std	Y+4, r8	; 0x04
     17c:	84 88       	ldd	r8, Z+20	; 0x14
     17e:	90 e0       	ldi	r25, 0x00	; 0
     180:	6c 92       	st	X, r6
     182:	92 92       	st	-Z, r9
     184:	6c 62       	ori	r22, 0x2C	; 44
     186:	92 92       	st	-Z, r9
     188:	94 78       	andi	r25, 0x84	; 132
     18a:	00 00       	nop
     18c:	28 00       	.word	0x0028	; ????
     18e:	00 00       	nop
     190:	02 2c       	mov	r0, r2
     192:	00 00       	nop
     194:	00 10       	cpse	r0, r0
     196:	28 44       	sbci	r18, 0x48	; 72
     198:	82 28       	or	r8, r2
     19a:	28 28       	or	r2, r8
     19c:	28 28       	or	r2, r8
     19e:	00 82       	st	Z, r0
     1a0:	44 28       	or	r4, r4
     1a2:	10 40       	sbci	r17, 0x00	; 0
     1a4:	80 9a       	sbi	0x10, 0	; 16
     1a6:	90 60       	ori	r25, 0x00	; 0
     1a8:	7c 82       	std	Y+4, r7	; 0x04
     1aa:	ba 9a       	sbi	0x17, 2	; 23
     1ac:	72 3e       	cpi	r23, 0xE2	; 226
     1ae:	48 88       	ldd	r4, Y+16	; 0x10
     1b0:	48 3e       	cpi	r20, 0xE8	; 232
     1b2:	fe 92       	st	-X, r15
     1b4:	92 92       	st	-Z, r9
     1b6:	6c 7c       	andi	r22, 0xCC	; 204
     1b8:	82 82       	std	Z+2, r8	; 0x02
     1ba:	82 44       	sbci	r24, 0x42	; 66
     1bc:	fe 82       	std	Y+6, r15	; 0x06
     1be:	82 82       	std	Z+2, r8	; 0x02
     1c0:	7c fe       	.word	0xfe7c	; ????
     1c2:	92 92       	st	-Z, r9
     1c4:	92 82       	std	Z+2, r9	; 0x02
     1c6:	fe 90       	ld	r15, -X
     1c8:	90 90 80 7c 	lds	r9, 0x7C80	; 0x807c80 <__bss_end+0x7738>
     1cc:	82 82       	std	Z+2, r8	; 0x02
     1ce:	8a ce       	rjmp	.-748    	; 0xfffffee4 <__eeprom_end+0xff7efee4>
     1d0:	fe 10       	cpse	r15, r14
     1d2:	10 10       	cpse	r1, r0
     1d4:	fe 00       	.word	0x00fe	; ????
     1d6:	82 fe       	sbrs	r8, 2
     1d8:	82 00       	.word	0x0082	; ????
     1da:	04 02       	muls	r16, r20
     1dc:	82 fc       	sbrc	r8, 2
     1de:	80 fe       	sbrs	r8, 0
     1e0:	10 28       	or	r1, r0
     1e2:	44 82       	std	Z+4, r4	; 0x04
     1e4:	fe 02       	muls	r31, r30
     1e6:	02 02       	muls	r16, r18
     1e8:	02 fe       	sbrs	r0, 2
     1ea:	40 38       	cpi	r20, 0x80	; 128
     1ec:	40 fe       	sbrs	r4, 0
     1ee:	fe 20       	and	r15, r14
     1f0:	10 08       	sbc	r1, r0
     1f2:	fe 7c       	andi	r31, 0xCE	; 206
     1f4:	82 82       	std	Z+2, r8	; 0x02
     1f6:	82 7c       	andi	r24, 0xC2	; 194
     1f8:	fe 90       	ld	r15, -X
     1fa:	90 90 60 7c 	lds	r9, 0x7C60	; 0x807c60 <__bss_end+0x7718>
     1fe:	82 8a       	std	Z+18, r8	; 0x12
     200:	84 7a       	andi	r24, 0xA4	; 164
     202:	fe 90       	ld	r15, -X
     204:	98 94       	clz
     206:	62 64       	ori	r22, 0x42	; 66
     208:	92 92       	st	-Z, r9
     20a:	92 4c       	sbci	r25, 0xC2	; 194
     20c:	c0 80       	ld	r12, Z
     20e:	fe 80       	ldd	r15, Y+6	; 0x06
     210:	c0 fc       	sbrc	r12, 0
     212:	02 02       	muls	r16, r18
     214:	02 fc       	sbrc	r0, 2
     216:	f8 04       	cpc	r15, r8
     218:	02 04       	cpc	r0, r2
     21a:	f8 fc       	.word	0xfcf8	; ????
     21c:	02 1c       	adc	r0, r2
     21e:	02 fc       	sbrc	r0, 2
     220:	c6 28       	or	r12, r6
     222:	10 28       	or	r1, r0
     224:	c6 c0       	rjmp	.+396    	; 0x3b2 <__trampolines_end+0x34a>
     226:	20 1e       	adc	r2, r16
     228:	20 c0       	rjmp	.+64     	; 0x26a <__trampolines_end+0x202>
     22a:	86 9a       	sbi	0x10, 6	; 16
     22c:	92 b2       	in	r9, 0x12	; 18
     22e:	c2 00       	.word	0x00c2	; ????
     230:	fe 82       	std	Y+6, r15	; 0x06
     232:	82 82       	std	Z+2, r8	; 0x02
     234:	40 20       	and	r4, r0
     236:	10 08       	sbc	r1, r0
     238:	04 00       	.word	0x0004	; ????
     23a:	82 82       	std	Z+2, r8	; 0x02
     23c:	82 fe       	sbrs	r8, 2
     23e:	20 40       	sbci	r18, 0x00	; 0
     240:	80 40       	sbci	r24, 0x00	; 0
     242:	20 02       	muls	r18, r16
     244:	02 02       	muls	r16, r18
     246:	02 02       	muls	r16, r18
     248:	00 c0       	rjmp	.+0      	; 0x24a <__trampolines_end+0x1e2>
     24a:	e0 10       	cpse	r14, r0
     24c:	00 04       	cpc	r0, r0
     24e:	2a 2a       	or	r2, r26
     250:	1e 02       	muls	r17, r30
     252:	fe 14       	cp	r15, r14
     254:	22 22       	and	r2, r18
     256:	1c 1c       	adc	r1, r12
     258:	22 22       	and	r2, r18
     25a:	22 14       	cp	r2, r2
     25c:	1c 22       	and	r1, r28
     25e:	22 14       	cp	r2, r2
     260:	fe 1c       	adc	r15, r14
     262:	2a 2a       	or	r2, r26
     264:	2a 18       	sub	r2, r10
     266:	00 10       	cpse	r0, r0
     268:	7e 90       	ld	r7, -X
     26a:	40 18       	sub	r4, r0
     26c:	25 25       	eor	r18, r5
     26e:	39 1e       	adc	r3, r25
     270:	fe 10       	cpse	r15, r14
     272:	20 20       	and	r2, r0
     274:	1e 00       	.word	0x001e	; ????
     276:	22 be       	out	0x32, r2	; 50
     278:	02 00       	.word	0x0002	; ????
     27a:	04 02       	muls	r16, r20
     27c:	02 bc       	out	0x22, r0	; 34
     27e:	00 fe       	sbrs	r0, 0
     280:	08 14       	cp	r0, r8
     282:	22 00       	.word	0x0022	; ????
     284:	00 82       	st	Z, r0
     286:	fe 02       	muls	r31, r30
     288:	00 3e       	cpi	r16, 0xE0	; 224
     28a:	20 1e       	adc	r2, r16
     28c:	20 1e       	adc	r2, r16
     28e:	3e 10       	cpse	r3, r14
     290:	20 20       	and	r2, r0
     292:	1e 1c       	adc	r1, r14
     294:	22 22       	and	r2, r18
     296:	22 1c       	adc	r2, r2
     298:	3f 18       	sub	r3, r15
     29a:	24 24       	eor	r2, r4
     29c:	18 18       	sub	r1, r8
     29e:	24 24       	eor	r2, r4
     2a0:	18 3f       	cpi	r17, 0xF8	; 248
     2a2:	3e 10       	cpse	r3, r14
     2a4:	20 20       	and	r2, r0
     2a6:	10 12       	cpse	r1, r16
     2a8:	2a 2a       	or	r2, r26
     2aa:	2a 24       	eor	r2, r10
     2ac:	20 20       	and	r2, r0
     2ae:	fc 22       	and	r15, r28
     2b0:	24 3c       	cpi	r18, 0xC4	; 196
     2b2:	02 02       	muls	r16, r18
     2b4:	04 3e       	cpi	r16, 0xE4	; 228
     2b6:	38 04       	cpc	r3, r8
     2b8:	02 04       	cpc	r0, r2
     2ba:	38 3c       	cpi	r19, 0xC8	; 200
     2bc:	02 0c       	add	r0, r2
     2be:	02 3c       	cpi	r16, 0xC2	; 194
     2c0:	22 14       	cp	r2, r2
     2c2:	08 14       	cp	r0, r8
     2c4:	22 32       	cpi	r18, 0x22	; 34
     2c6:	09 09       	sbc	r16, r9
     2c8:	09 3e       	cpi	r16, 0xE9	; 233
     2ca:	22 26       	eor	r2, r18
     2cc:	2a 32       	cpi	r18, 0x2A	; 42
     2ce:	22 00       	.word	0x0022	; ????
     2d0:	10 6c       	ori	r17, 0xC0	; 192
     2d2:	82 00       	.word	0x0082	; ????
     2d4:	00 00       	nop
     2d6:	ee 00       	.word	0x00ee	; ????
     2d8:	00 00       	nop
     2da:	82 6c       	ori	r24, 0xC2	; 194
     2dc:	10 00       	.word	0x0010	; ????
     2de:	40 80       	ld	r4, Z
     2e0:	40 20       	and	r4, r0
     2e2:	40 3c       	cpi	r20, 0xC0	; 192
     2e4:	64 c4       	rjmp	.+2248   	; 0xbae <draw+0x40>
     2e6:	64 3c       	cpi	r22, 0xC4	; 196
     2e8:	78 85       	ldd	r23, Y+8	; 0x08
     2ea:	85 86       	std	Z+13, r8	; 0x0d
     2ec:	48 5c       	subi	r20, 0xC8	; 200
     2ee:	02 02       	muls	r16, r18
     2f0:	04 5e       	subi	r16, 0xE4	; 228
     2f2:	1c 2a       	or	r1, r28
     2f4:	2a aa       	std	Y+50, r2	; 0x32
     2f6:	9a 84       	ldd	r9, Y+10	; 0x0a
     2f8:	aa aa       	std	Y+50, r10	; 0x32
     2fa:	9e 82       	std	Y+6, r9	; 0x06
     2fc:	84 2a       	or	r8, r20
     2fe:	2a 1e       	adc	r2, r26
     300:	82 84       	ldd	r8, Z+10	; 0x0a
     302:	aa 2a       	or	r10, r26
     304:	1e 02       	muls	r17, r30
     306:	04 2a       	or	r0, r20
     308:	aa 9e       	mul	r10, r26
     30a:	02 30       	cpi	r16, 0x02	; 2
     30c:	78 4a       	sbci	r23, 0xA8	; 168
     30e:	4e 48       	sbci	r20, 0x8E	; 142
     310:	9c aa       	std	Y+52, r9	; 0x34
     312:	aa aa       	std	Y+50, r10	; 0x32
     314:	9a 9c       	mul	r9, r10
     316:	2a 2a       	or	r2, r26
     318:	2a 9a       	sbi	0x05, 2	; 5
     31a:	9c aa       	std	Y+52, r9	; 0x34
     31c:	2a 2a       	or	r2, r26
     31e:	1a 00       	.word	0x001a	; ????
     320:	00 a2       	std	Z+32, r0	; 0x20
     322:	3e 82       	std	Y+6, r3	; 0x06
     324:	00 40       	sbci	r16, 0x00	; 0
     326:	a2 be       	out	0x32, r10	; 50
     328:	42 00       	.word	0x0042	; ????
     32a:	80 a2       	std	Z+32, r8	; 0x20
     32c:	3e 02       	muls	r19, r30
     32e:	0f 94 24 94 	call	0x32848	; 0x32848 <__TEXT_REGION_LENGTH__+0x12848>
     332:	0f 0f       	add	r16, r31
     334:	14 a4       	ldd	r1, Z+44	; 0x2c
     336:	14 0f       	add	r17, r20
     338:	3e 2a       	or	r3, r30
     33a:	aa a2       	std	Y+34, r10	; 0x22
     33c:	00 04       	cpc	r0, r0
     33e:	2a 2a       	or	r2, r26
     340:	3e 2a       	or	r3, r30
     342:	3e 50       	subi	r19, 0x0E	; 14
     344:	90 fe       	sbrs	r9, 0
     346:	92 4c       	sbci	r25, 0xC2	; 194
     348:	92 92       	st	-Z, r9
     34a:	92 4c       	sbci	r25, 0xC2	; 194
     34c:	4c 12       	cpse	r4, r28
     34e:	12 12       	cpse	r1, r18
     350:	4c 4c       	sbci	r20, 0xCC	; 204
     352:	52 12       	cpse	r5, r18
     354:	12 0c       	add	r1, r2
     356:	5c 82       	std	Y+4, r5	; 0x04
     358:	82 84       	ldd	r8, Z+10	; 0x0a
     35a:	5e 5c       	subi	r21, 0xCE	; 206
     35c:	42 02       	muls	r20, r18
     35e:	04 1e       	adc	r0, r20
     360:	00 b9       	out	0x00, r16	; 0
     362:	05 05       	cpc	r16, r5
     364:	be 9c       	mul	r11, r14
     366:	22 22       	and	r2, r18
     368:	22 9c       	mul	r2, r2
     36a:	bc 02       	muls	r27, r28
     36c:	02 02       	muls	r16, r18
     36e:	bc 3c       	cpi	r27, 0xCC	; 204
     370:	24 ff       	sbrs	r18, 4
     372:	24 24       	eor	r2, r4
     374:	12 7e       	andi	r17, 0xE2	; 226
     376:	92 c2       	rjmp	.+1316   	; 0x89c <drawline+0xd8>
     378:	66 d4       	rcall	.+2252   	; 0xc46 <checkCollisions+0x1a>
     37a:	f4 3f       	cpi	r31, 0xF4	; 244
     37c:	f4 d4       	rcall	.+2536   	; 0xd66 <update+0x62>
     37e:	ff 90       	pop	r15
     380:	94 6f       	ori	r25, 0xF4	; 244
     382:	04 03       	mulsu	r16, r20
     384:	11 7e       	andi	r17, 0xE1	; 225
     386:	90 c0       	rjmp	.+288    	; 0x4a8 <__LOCK_REGION_LENGTH__+0xa8>
     388:	04 2a       	or	r0, r20
     38a:	2a 9e       	mul	r2, r26
     38c:	82 00       	.word	0x0082	; ????
     38e:	00 22       	and	r0, r16
     390:	be 82       	std	Y+6, r11	; 0x06
     392:	0c 12       	cpse	r0, r28
     394:	12 52       	subi	r17, 0x22	; 34
     396:	4c 1c       	adc	r4, r12
     398:	02 02       	muls	r16, r18
     39a:	44 5e       	subi	r20, 0xE4	; 228
     39c:	00 5e       	subi	r16, 0xE0	; 224
     39e:	50 50       	subi	r21, 0x00	; 0
     3a0:	4e be       	out	0x3e, r4	; 62
     3a2:	b0 98       	cbi	0x16, 0	; 22
     3a4:	8c be       	out	0x3c, r8	; 60
     3a6:	64 94       	.word	0x9464	; ????
     3a8:	94 f4       	brge	.+36     	; 0x3ce <__trampolines_end+0x366>
     3aa:	14 64       	ori	r17, 0x44	; 68
     3ac:	94 94       	.word	0x9494	; ????
     3ae:	94 64       	ori	r25, 0x44	; 68
     3b0:	0c 12       	cpse	r0, r28
     3b2:	b2 02       	muls	r27, r18
     3b4:	04 1c       	adc	r0, r4
     3b6:	10 10       	cpse	r1, r0
     3b8:	10 10       	cpse	r1, r0
     3ba:	10 10       	cpse	r1, r0
     3bc:	10 10       	cpse	r1, r0
     3be:	1c f4       	brge	.+6      	; 0x3c6 <__trampolines_end+0x35e>
     3c0:	08 13       	cpse	r16, r24
     3c2:	35 5d       	subi	r19, 0xD5	; 213
     3c4:	f4 08       	sbc	r15, r4
     3c6:	14 2c       	mov	r1, r4
     3c8:	5f 00       	.word	0x005f	; ????
     3ca:	00 de       	rcall	.-1024   	; 0xffffffcc <__eeprom_end+0xff7effcc>
     3cc:	00 00       	nop
     3ce:	10 28       	or	r1, r0
     3d0:	54 28       	or	r5, r4
     3d2:	44 44       	sbci	r20, 0x44	; 68
     3d4:	28 54       	subi	r18, 0x48	; 72
     3d6:	28 10       	cpse	r2, r8
     3d8:	55 00       	.word	0x0055	; ????
     3da:	aa 00       	.word	0x00aa	; ????
     3dc:	55 55       	subi	r21, 0x55	; 85
     3de:	aa 55       	subi	r26, 0x5A	; 90
     3e0:	aa 55       	subi	r26, 0x5A	; 90
     3e2:	aa 55       	subi	r26, 0x5A	; 90
     3e4:	aa 55       	subi	r26, 0x5A	; 90
     3e6:	aa 00       	.word	0x00aa	; ????
     3e8:	00 00       	nop
     3ea:	ff 00       	.word	0x00ff	; ????
     3ec:	08 08       	sbc	r0, r8
     3ee:	08 ff       	.word	0xff08	; ????
     3f0:	00 28       	or	r0, r0
     3f2:	28 28       	or	r2, r8
     3f4:	ff 00       	.word	0x00ff	; ????
     3f6:	08 08       	sbc	r0, r8
     3f8:	ff 00       	.word	0x00ff	; ????
     3fa:	ff 08       	sbc	r15, r15
     3fc:	08 0f       	add	r16, r24
     3fe:	08 0f       	add	r16, r24
     400:	28 28       	or	r2, r8
     402:	28 3f       	cpi	r18, 0xF8	; 248
     404:	00 28       	or	r0, r0
     406:	28 ef       	ldi	r18, 0xF8	; 248
     408:	00 ff       	sbrs	r16, 0
     40a:	00 00       	nop
     40c:	ff 00       	.word	0x00ff	; ????
     40e:	ff 28       	or	r15, r15
     410:	28 2f       	mov	r18, r24
     412:	20 3f       	cpi	r18, 0xF0	; 240
     414:	28 28       	or	r2, r8
     416:	e8 08       	sbc	r14, r8
     418:	f8 08       	sbc	r15, r8
     41a:	08 f8       	.word	0xf808	; ????
     41c:	08 f8       	.word	0xf808	; ????
     41e:	28 28       	or	r2, r8
     420:	28 f8       	.word	0xf828	; ????
     422:	00 08       	sbc	r0, r0
     424:	08 08       	sbc	r0, r8
     426:	0f 00       	.word	0x000f	; ????
     428:	00 00       	nop
     42a:	00 f8       	bld	r0, 0
     42c:	08 08       	sbc	r0, r8
     42e:	08 08       	sbc	r0, r8
     430:	f8 08       	sbc	r15, r8
     432:	08 08       	sbc	r0, r8
     434:	08 0f       	add	r16, r24
     436:	08 00       	.word	0x0008	; ????
     438:	00 00       	nop
     43a:	ff 08       	sbc	r15, r15
     43c:	08 08       	sbc	r0, r8
     43e:	08 08       	sbc	r0, r8
     440:	08 08       	sbc	r0, r8
     442:	08 08       	sbc	r0, r8
     444:	ff 08       	sbc	r15, r15
     446:	00 00       	nop
     448:	00 ff       	sbrs	r16, 0
     44a:	28 00       	.word	0x0028	; ????
     44c:	00 ff       	sbrs	r16, 0
     44e:	00 ff       	sbrs	r16, 0
     450:	00 00       	nop
     452:	f8 08       	sbc	r15, r8
     454:	e8 00       	.word	0x00e8	; ????
     456:	00 3f       	cpi	r16, 0xF0	; 240
     458:	20 2f       	mov	r18, r16
     45a:	28 28       	or	r2, r8
     45c:	e8 08       	sbc	r14, r8
     45e:	e8 28       	or	r14, r8
     460:	28 2f       	mov	r18, r24
     462:	20 2f       	mov	r18, r16
     464:	00 00       	nop
     466:	ff 00       	.word	0x00ff	; ????
     468:	ef 28       	or	r14, r15
     46a:	28 28       	or	r2, r8
     46c:	28 28       	or	r2, r8
     46e:	28 28       	or	r2, r8
     470:	ef 00       	.word	0x00ef	; ????
     472:	ef 28       	or	r14, r15
     474:	28 28       	or	r2, r8
     476:	e8 28       	or	r14, r8
     478:	08 08       	sbc	r0, r8
     47a:	f8 08       	sbc	r15, r8
     47c:	f8 28       	or	r15, r8
     47e:	28 28       	or	r2, r8
     480:	2f 28       	or	r2, r15
     482:	08 08       	sbc	r0, r8
     484:	0f 08       	sbc	r0, r15
     486:	0f 00       	.word	0x000f	; ????
     488:	00 f8       	bld	r0, 0
     48a:	08 f8       	.word	0xf808	; ????
     48c:	00 00       	nop
     48e:	00 f8       	bld	r0, 0
     490:	28 00       	.word	0x0028	; ????
     492:	00 00       	nop
     494:	3f 28       	or	r3, r15
     496:	00 00       	nop
     498:	0f 08       	sbc	r0, r15
     49a:	0f 08       	sbc	r0, r15
     49c:	08 ff       	.word	0xff08	; ????
     49e:	08 ff       	.word	0xff08	; ????
     4a0:	28 28       	or	r2, r8
     4a2:	28 ff       	.word	0xff28	; ????
     4a4:	28 08       	sbc	r2, r8
     4a6:	08 08       	sbc	r0, r8
     4a8:	f8 00       	.word	0x00f8	; ????
     4aa:	00 00       	nop
     4ac:	00 0f       	add	r16, r16
     4ae:	08 ff       	.word	0xff08	; ????
     4b0:	ff ff       	.word	0xffff	; ????
     4b2:	ff ff       	.word	0xffff	; ????
     4b4:	0f 0f       	add	r16, r31
     4b6:	0f 0f       	add	r16, r31
     4b8:	0f ff       	.word	0xff0f	; ????
     4ba:	ff ff       	.word	0xffff	; ????
     4bc:	00 00       	nop
     4be:	00 00       	nop
     4c0:	00 ff       	sbrs	r16, 0
     4c2:	ff f0       	brie	.+62     	; 0x502 <__LOCK_REGION_LENGTH__+0x102>
     4c4:	f0 f0       	brcs	.+60     	; 0x502 <__LOCK_REGION_LENGTH__+0x102>
     4c6:	f0 f0       	brcs	.+60     	; 0x504 <__LOCK_REGION_LENGTH__+0x104>
     4c8:	1c 22       	and	r1, r28
     4ca:	22 1c       	adc	r2, r2
     4cc:	22 3e       	cpi	r18, 0xE2	; 226
     4ce:	54 54       	subi	r21, 0x44	; 68
     4d0:	7c 28       	or	r7, r12
     4d2:	7e 40       	sbci	r23, 0x0E	; 14
     4d4:	40 60       	ori	r20, 0x00	; 0
     4d6:	60 40       	sbci	r22, 0x00	; 0
     4d8:	7e 40       	sbci	r23, 0x0E	; 14
     4da:	7e 40       	sbci	r23, 0x0E	; 14
     4dc:	c6 aa       	std	Z+54, r12	; 0x36
     4de:	92 82       	std	Z+2, r9	; 0x02
     4e0:	c6 1c       	adc	r12, r6
     4e2:	22 22       	and	r2, r18
     4e4:	3c 20       	and	r3, r12
     4e6:	02 7e       	andi	r16, 0xE2	; 226
     4e8:	04 78       	andi	r16, 0x84	; 132
     4ea:	04 60       	ori	r16, 0x04	; 4
     4ec:	40 7e       	andi	r20, 0xE0	; 224
     4ee:	40 40       	sbci	r20, 0x00	; 0
     4f0:	99 a5       	ldd	r25, Y+41	; 0x29
     4f2:	e7 a5       	ldd	r30, Z+47	; 0x2f
     4f4:	99 38       	cpi	r25, 0x89	; 137
     4f6:	54 92       	xch	Z, r5
     4f8:	54 38       	cpi	r21, 0x84	; 132
     4fa:	32 4e       	sbci	r19, 0xE2	; 226
     4fc:	80 4e       	sbci	r24, 0xE0	; 224
     4fe:	32 0c       	add	r3, r2
     500:	52 b2       	in	r5, 0x12	; 18
     502:	b2 0c       	add	r11, r2
     504:	0c 12       	cpse	r0, r28
     506:	1e 12       	cpse	r1, r30
     508:	0c 3d       	cpi	r16, 0xDC	; 220
     50a:	46 5a       	subi	r20, 0xA6	; 166
     50c:	62 bc       	out	0x22, r6	; 34
     50e:	7c 92       	st	X, r7
     510:	92 92       	st	-Z, r9
     512:	00 7e       	andi	r16, 0xE0	; 224
     514:	80 80       	ld	r8, Z
     516:	80 7e       	andi	r24, 0xE0	; 224
     518:	54 54       	subi	r21, 0x44	; 68
     51a:	54 54       	subi	r21, 0x44	; 68
     51c:	54 22       	and	r5, r20
     51e:	22 fa       	bst	r2, 2
     520:	22 22       	and	r2, r18
     522:	02 8a       	std	Z+18, r0	; 0x12
     524:	52 22       	and	r5, r18
     526:	02 02       	muls	r16, r18
     528:	22 52       	subi	r18, 0x22	; 34
     52a:	8a 02       	muls	r24, r26
     52c:	00 00       	nop
     52e:	ff 80       	ldd	r15, Y+7	; 0x07
     530:	c0 07       	cpc	r28, r16
     532:	01 ff       	sbrs	r16, 1
     534:	00 00       	nop
     536:	10 10       	cpse	r1, r0
     538:	d6 d6       	rcall	.+3500   	; 0x12e6 <_etext+0xc>
     53a:	10 6c       	ori	r17, 0xC0	; 192
     53c:	48 6c       	ori	r20, 0xC8	; 200
     53e:	24 6c       	ori	r18, 0xC4	; 196
     540:	60 f0       	brcs	.+24     	; 0x55a <__LOCK_REGION_LENGTH__+0x15a>
     542:	90 f0       	brcs	.+36     	; 0x568 <__ctors_end+0x4>
     544:	60 00       	.word	0x0060	; ????
     546:	00 18       	sub	r0, r0
     548:	18 00       	.word	0x0018	; ????
     54a:	00 00       	nop
     54c:	08 08       	sbc	r0, r8
     54e:	00 0c       	add	r0, r0
     550:	02 ff       	sbrs	r16, 2
     552:	80 80       	ld	r8, Z
     554:	00 f8       	bld	r0, 0
     556:	80 80       	ld	r8, Z
     558:	78 00       	.word	0x0078	; ????
     55a:	98 b8       	out	0x08, r9	; 8
     55c:	e8 48       	sbci	r30, 0x88	; 136
     55e:	00 3c       	cpi	r16, 0xC0	; 192
     560:	3c 3c       	cpi	r19, 0xCC	; 204
     562:	3c 00       	.word	0x003c	; ????

00000564 <__ctors_end>:
     564:	11 24       	eor	r1, r1
     566:	1f be       	out	0x3f, r1	; 63
     568:	cf ef       	ldi	r28, 0xFF	; 255
     56a:	d8 e0       	ldi	r29, 0x08	; 8
     56c:	de bf       	out	0x3e, r29	; 62
     56e:	cd bf       	out	0x3d, r28	; 61

00000570 <__do_copy_data>:
     570:	15 e0       	ldi	r17, 0x05	; 5
     572:	a0 e0       	ldi	r26, 0x00	; 0
     574:	b1 e0       	ldi	r27, 0x01	; 1
     576:	ea ed       	ldi	r30, 0xDA	; 218
     578:	f2 e1       	ldi	r31, 0x12	; 18
     57a:	02 c0       	rjmp	.+4      	; 0x580 <__do_copy_data+0x10>
     57c:	05 90       	lpm	r0, Z+
     57e:	0d 92       	st	X+, r0
     580:	aa 33       	cpi	r26, 0x3A	; 58
     582:	b1 07       	cpc	r27, r17
     584:	d9 f7       	brne	.-10     	; 0x57c <__do_copy_data+0xc>

00000586 <__do_clear_bss>:
     586:	25 e0       	ldi	r18, 0x05	; 5
     588:	aa e3       	ldi	r26, 0x3A	; 58
     58a:	b5 e0       	ldi	r27, 0x05	; 5
     58c:	01 c0       	rjmp	.+2      	; 0x590 <.do_clear_bss_start>

0000058e <.do_clear_bss_loop>:
     58e:	1d 92       	st	X+, r1

00000590 <.do_clear_bss_start>:
     590:	a8 34       	cpi	r26, 0x48	; 72
     592:	b2 07       	cpc	r27, r18
     594:	e1 f7       	brne	.-8      	; 0x58e <.do_clear_bss_loop>
     596:	0e 94 4f 07 	call	0xe9e	; 0xe9e <main>
     59a:	0c 94 6b 09 	jmp	0x12d6	; 0x12d6 <_exit>

0000059e <__bad_interrupt>:
     59e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000005a2 <lcd_command>:
		    x--;
		    dx += 2;
		    err += (-r << 1) + dx;
	    }
    }
}
     5a2:	5c 98       	cbi	0x0b, 4	; 11
     5a4:	27 e0       	ldi	r18, 0x07	; 7
     5a6:	30 e0       	ldi	r19, 0x00	; 0
     5a8:	90 e0       	ldi	r25, 0x00	; 0
     5aa:	5d 98       	cbi	0x0b, 5	; 11
     5ac:	ac 01       	movw	r20, r24
     5ae:	02 2e       	mov	r0, r18
     5b0:	02 c0       	rjmp	.+4      	; 0x5b6 <lcd_command+0x14>
     5b2:	55 95       	asr	r21
     5b4:	47 95       	ror	r20
     5b6:	0a 94       	dec	r0
     5b8:	e2 f7       	brpl	.-8      	; 0x5b2 <lcd_command+0x10>
     5ba:	40 ff       	sbrs	r20, 0
     5bc:	02 c0       	rjmp	.+4      	; 0x5c2 <lcd_command+0x20>
     5be:	5e 9a       	sbi	0x0b, 6	; 11
     5c0:	01 c0       	rjmp	.+2      	; 0x5c4 <lcd_command+0x22>
     5c2:	5e 98       	cbi	0x0b, 6	; 11
     5c4:	5d 9a       	sbi	0x0b, 5	; 11
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	31 09       	sbc	r19, r1
     5ca:	78 f7       	brcc	.-34     	; 0x5aa <lcd_command+0x8>
     5cc:	08 95       	ret

000005ce <lcd_init>:
     5ce:	56 9a       	sbi	0x0a, 6	; 10
     5d0:	55 9a       	sbi	0x0a, 5	; 10
     5d2:	54 9a       	sbi	0x0a, 4	; 10
     5d4:	53 9a       	sbi	0x0a, 3	; 10
     5d6:	52 9a       	sbi	0x0a, 2	; 10
     5d8:	5a 98       	cbi	0x0b, 2	; 11
     5da:	5b 98       	cbi	0x0b, 3	; 11
     5dc:	2f e9       	ldi	r18, 0x9F	; 159
     5de:	86 e8       	ldi	r24, 0x86	; 134
     5e0:	91 e0       	ldi	r25, 0x01	; 1
     5e2:	21 50       	subi	r18, 0x01	; 1
     5e4:	80 40       	sbci	r24, 0x00	; 0
     5e6:	90 40       	sbci	r25, 0x00	; 0
     5e8:	e1 f7       	brne	.-8      	; 0x5e2 <lcd_init+0x14>
     5ea:	00 c0       	rjmp	.+0      	; 0x5ec <lcd_init+0x1e>
     5ec:	00 00       	nop
     5ee:	5b 9a       	sbi	0x0b, 3	; 11
     5f0:	83 ea       	ldi	r24, 0xA3	; 163
     5f2:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <lcd_command>
     5f6:	80 ea       	ldi	r24, 0xA0	; 160
     5f8:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <lcd_command>
     5fc:	80 ec       	ldi	r24, 0xC0	; 192
     5fe:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <lcd_command>
     602:	80 e4       	ldi	r24, 0x40	; 64
     604:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <lcd_command>
     608:	8c e2       	ldi	r24, 0x2C	; 44
     60a:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <lcd_command>
     60e:	83 ed       	ldi	r24, 0xD3	; 211
     610:	90 e3       	ldi	r25, 0x30	; 48
     612:	01 97       	sbiw	r24, 0x01	; 1
     614:	f1 f7       	brne	.-4      	; 0x612 <lcd_init+0x44>
     616:	00 c0       	rjmp	.+0      	; 0x618 <lcd_init+0x4a>
     618:	00 00       	nop
     61a:	8e e2       	ldi	r24, 0x2E	; 46
     61c:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <lcd_command>
     620:	83 ed       	ldi	r24, 0xD3	; 211
     622:	90 e3       	ldi	r25, 0x30	; 48
     624:	01 97       	sbiw	r24, 0x01	; 1
     626:	f1 f7       	brne	.-4      	; 0x624 <lcd_init+0x56>
     628:	00 c0       	rjmp	.+0      	; 0x62a <lcd_init+0x5c>
     62a:	00 00       	nop
     62c:	8f e2       	ldi	r24, 0x2F	; 47
     62e:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <lcd_command>
     632:	83 ec       	ldi	r24, 0xC3	; 195
     634:	99 e0       	ldi	r25, 0x09	; 9
     636:	01 97       	sbiw	r24, 0x01	; 1
     638:	f1 f7       	brne	.-4      	; 0x636 <lcd_init+0x68>
     63a:	00 c0       	rjmp	.+0      	; 0x63c <lcd_init+0x6e>
     63c:	00 00       	nop
     63e:	86 e2       	ldi	r24, 0x26	; 38
     640:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <lcd_command>
     644:	08 95       	ret

00000646 <lcd_data>:
     646:	5c 9a       	sbi	0x0b, 4	; 11
     648:	27 e0       	ldi	r18, 0x07	; 7
     64a:	30 e0       	ldi	r19, 0x00	; 0
     64c:	90 e0       	ldi	r25, 0x00	; 0
     64e:	5d 98       	cbi	0x0b, 5	; 11
     650:	ac 01       	movw	r20, r24
     652:	02 2e       	mov	r0, r18
     654:	02 c0       	rjmp	.+4      	; 0x65a <lcd_data+0x14>
     656:	55 95       	asr	r21
     658:	47 95       	ror	r20
     65a:	0a 94       	dec	r0
     65c:	e2 f7       	brpl	.-8      	; 0x656 <lcd_data+0x10>
     65e:	40 ff       	sbrs	r20, 0
     660:	02 c0       	rjmp	.+4      	; 0x666 <lcd_data+0x20>
     662:	5e 9a       	sbi	0x0b, 6	; 11
     664:	01 c0       	rjmp	.+2      	; 0x668 <lcd_data+0x22>
     666:	5e 98       	cbi	0x0b, 6	; 11
     668:	5d 9a       	sbi	0x0b, 5	; 11
     66a:	21 50       	subi	r18, 0x01	; 1
     66c:	31 09       	sbc	r19, r1
     66e:	78 f7       	brcc	.-34     	; 0x64e <lcd_data+0x8>
     670:	08 95       	ret

00000672 <lcd_set_brightness>:
     672:	cf 93       	push	r28
     674:	c8 2f       	mov	r28, r24
     676:	81 e8       	ldi	r24, 0x81	; 129
     678:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <lcd_command>
     67c:	8c 2f       	mov	r24, r28
     67e:	8f 73       	andi	r24, 0x3F	; 63
     680:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <lcd_command>
     684:	cf 91       	pop	r28
     686:	08 95       	ret

00000688 <write_buffer>:
     688:	cf 92       	push	r12
     68a:	df 92       	push	r13
     68c:	ef 92       	push	r14
     68e:	ff 92       	push	r15
     690:	0f 93       	push	r16
     692:	1f 93       	push	r17
     694:	cf 93       	push	r28
     696:	df 93       	push	r29
     698:	0f 2e       	mov	r0, r31
     69a:	f4 e0       	ldi	r31, 0x04	; 4
     69c:	ef 2e       	mov	r14, r31
     69e:	f5 e0       	ldi	r31, 0x05	; 5
     6a0:	ff 2e       	mov	r15, r31
     6a2:	f0 2d       	mov	r31, r0
     6a4:	ec 01       	movw	r28, r24
     6a6:	0f 2e       	mov	r0, r31
     6a8:	f4 e1       	ldi	r31, 0x14	; 20
     6aa:	cf 2e       	mov	r12, r31
     6ac:	f5 e0       	ldi	r31, 0x05	; 5
     6ae:	df 2e       	mov	r13, r31
     6b0:	f0 2d       	mov	r31, r0
     6b2:	f7 01       	movw	r30, r14
     6b4:	80 81       	ld	r24, Z
     6b6:	f2 e0       	ldi	r31, 0x02	; 2
     6b8:	ef 0e       	add	r14, r31
     6ba:	f1 1c       	adc	r15, r1
     6bc:	80 6b       	ori	r24, 0xB0	; 176
     6be:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <lcd_command>
     6c2:	80 e0       	ldi	r24, 0x00	; 0
     6c4:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <lcd_command>
     6c8:	80 e1       	ldi	r24, 0x10	; 16
     6ca:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <lcd_command>
     6ce:	80 ee       	ldi	r24, 0xE0	; 224
     6d0:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <lcd_command>
     6d4:	8f ef       	ldi	r24, 0xFF	; 255
     6d6:	0e 94 23 03 	call	0x646	; 0x646 <lcd_data>
     6da:	8e 01       	movw	r16, r28
     6dc:	00 58       	subi	r16, 0x80	; 128
     6de:	1f 4f       	sbci	r17, 0xFF	; 255
     6e0:	89 91       	ld	r24, Y+
     6e2:	0e 94 23 03 	call	0x646	; 0x646 <lcd_data>
     6e6:	c0 17       	cp	r28, r16
     6e8:	d1 07       	cpc	r29, r17
     6ea:	d1 f7       	brne	.-12     	; 0x6e0 <write_buffer+0x58>
     6ec:	e8 01       	movw	r28, r16
     6ee:	ce 14       	cp	r12, r14
     6f0:	df 04       	cpc	r13, r15
     6f2:	f9 f6       	brne	.-66     	; 0x6b2 <write_buffer+0x2a>
     6f4:	df 91       	pop	r29
     6f6:	cf 91       	pop	r28
     6f8:	1f 91       	pop	r17
     6fa:	0f 91       	pop	r16
     6fc:	ff 90       	pop	r15
     6fe:	ef 90       	pop	r14
     700:	df 90       	pop	r13
     702:	cf 90       	pop	r12
     704:	08 95       	ret

00000706 <clear_buffer>:
     706:	20 e0       	ldi	r18, 0x00	; 0
     708:	34 e0       	ldi	r19, 0x04	; 4
     70a:	fc 01       	movw	r30, r24
     70c:	a9 01       	movw	r20, r18
     70e:	11 92       	st	Z+, r1
     710:	41 50       	subi	r20, 0x01	; 1
     712:	50 40       	sbci	r21, 0x00	; 0
     714:	e1 f7       	brne	.-8      	; 0x70e <clear_buffer+0x8>
     716:	08 95       	ret

00000718 <drawchar>:
     718:	30 e0       	ldi	r19, 0x00	; 0
     71a:	f9 01       	movw	r30, r18
     71c:	ee 0f       	add	r30, r30
     71e:	ff 1f       	adc	r31, r31
     720:	ee 0f       	add	r30, r30
     722:	ff 1f       	adc	r31, r31
     724:	e2 0f       	add	r30, r18
     726:	f3 1f       	adc	r31, r19
     728:	e8 59       	subi	r30, 0x98	; 152
     72a:	ff 4f       	sbci	r31, 0xFF	; 255
     72c:	55 e0       	ldi	r21, 0x05	; 5
     72e:	56 0f       	add	r21, r22
     730:	9c 01       	movw	r18, r24
     732:	70 e8       	ldi	r23, 0x80	; 128
     734:	47 9f       	mul	r20, r23
     736:	20 0d       	add	r18, r0
     738:	31 1d       	adc	r19, r1
     73a:	11 24       	eor	r1, r1
     73c:	94 91       	lpm	r25, Z
     73e:	d9 01       	movw	r26, r18
     740:	a6 0f       	add	r26, r22
     742:	b1 1d       	adc	r27, r1
     744:	11 97       	sbiw	r26, 0x01	; 1
     746:	9c 93       	st	X, r25
     748:	6f 5f       	subi	r22, 0xFF	; 255
     74a:	31 96       	adiw	r30, 0x01	; 1
     74c:	65 13       	cpse	r22, r21
     74e:	f6 cf       	rjmp	.-20     	; 0x73c <drawchar+0x24>
     750:	08 95       	ret

00000752 <setpixel>:
     752:	41 50       	subi	r20, 0x01	; 1
     754:	24 2f       	mov	r18, r20
     756:	26 95       	lsr	r18
     758:	26 95       	lsr	r18
     75a:	26 95       	lsr	r18
     75c:	61 50       	subi	r22, 0x01	; 1
     75e:	e6 2f       	mov	r30, r22
     760:	f0 e0       	ldi	r31, 0x00	; 0
     762:	30 e8       	ldi	r19, 0x80	; 128
     764:	23 9f       	mul	r18, r19
     766:	e0 0d       	add	r30, r0
     768:	f1 1d       	adc	r31, r1
     76a:	11 24       	eor	r1, r1
     76c:	e8 0f       	add	r30, r24
     76e:	f9 1f       	adc	r31, r25
     770:	40 95       	com	r20
     772:	47 70       	andi	r20, 0x07	; 7
     774:	81 e0       	ldi	r24, 0x01	; 1
     776:	90 e0       	ldi	r25, 0x00	; 0
     778:	02 c0       	rjmp	.+4      	; 0x77e <setpixel+0x2c>
     77a:	88 0f       	add	r24, r24
     77c:	99 1f       	adc	r25, r25
     77e:	4a 95       	dec	r20
     780:	e2 f7       	brpl	.-8      	; 0x77a <setpixel+0x28>
     782:	90 81       	ld	r25, Z
     784:	89 2b       	or	r24, r25
     786:	80 83       	st	Z, r24
     788:	08 95       	ret

0000078a <clearpixel>:
     78a:	41 50       	subi	r20, 0x01	; 1
     78c:	24 2f       	mov	r18, r20
     78e:	26 95       	lsr	r18
     790:	26 95       	lsr	r18
     792:	26 95       	lsr	r18
     794:	61 50       	subi	r22, 0x01	; 1
     796:	e6 2f       	mov	r30, r22
     798:	f0 e0       	ldi	r31, 0x00	; 0
     79a:	30 e8       	ldi	r19, 0x80	; 128
     79c:	23 9f       	mul	r18, r19
     79e:	e0 0d       	add	r30, r0
     7a0:	f1 1d       	adc	r31, r1
     7a2:	11 24       	eor	r1, r1
     7a4:	e8 0f       	add	r30, r24
     7a6:	f9 1f       	adc	r31, r25
     7a8:	40 95       	com	r20
     7aa:	47 70       	andi	r20, 0x07	; 7
     7ac:	81 e0       	ldi	r24, 0x01	; 1
     7ae:	90 e0       	ldi	r25, 0x00	; 0
     7b0:	02 c0       	rjmp	.+4      	; 0x7b6 <clearpixel+0x2c>
     7b2:	88 0f       	add	r24, r24
     7b4:	99 1f       	adc	r25, r25
     7b6:	4a 95       	dec	r20
     7b8:	e2 f7       	brpl	.-8      	; 0x7b2 <clearpixel+0x28>
     7ba:	80 95       	com	r24
     7bc:	90 81       	ld	r25, Z
     7be:	89 23       	and	r24, r25
     7c0:	80 83       	st	Z, r24
     7c2:	08 95       	ret

000007c4 <drawline>:
     7c4:	8f 92       	push	r8
     7c6:	9f 92       	push	r9
     7c8:	af 92       	push	r10
     7ca:	bf 92       	push	r11
     7cc:	cf 92       	push	r12
     7ce:	df 92       	push	r13
     7d0:	ef 92       	push	r14
     7d2:	0f 93       	push	r16
     7d4:	1f 93       	push	r17
     7d6:	cf 93       	push	r28
     7d8:	df 93       	push	r29
     7da:	5c 01       	movw	r10, r24
     7dc:	c2 2f       	mov	r28, r18
     7de:	26 13       	cpse	r18, r22
     7e0:	2e c0       	rjmp	.+92     	; 0x83e <drawline+0x7a>
     7e2:	40 17       	cp	r20, r16
     7e4:	30 f0       	brcs	.+12     	; 0x7f2 <drawline+0x2e>
     7e6:	c4 2e       	mov	r12, r20
     7e8:	d1 2c       	mov	r13, r1
     7ea:	c0 1a       	sub	r12, r16
     7ec:	d1 08       	sbc	r13, r1
     7ee:	ba f4       	brpl	.+46     	; 0x81e <drawline+0x5a>
     7f0:	55 c0       	rjmp	.+170    	; 0x89c <drawline+0xd8>
     7f2:	10 e0       	ldi	r17, 0x00	; 0
     7f4:	04 1b       	sub	r16, r20
     7f6:	11 09       	sbc	r17, r1
     7f8:	0a f4       	brpl	.+2      	; 0x7fc <drawline+0x38>
     7fa:	50 c0       	rjmp	.+160    	; 0x89c <drawline+0xd8>
     7fc:	c4 2e       	mov	r12, r20
     7fe:	81 2c       	mov	r8, r1
     800:	91 2c       	mov	r9, r1
     802:	2e 2d       	mov	r18, r14
     804:	4c 2d       	mov	r20, r12
     806:	6c 2f       	mov	r22, r28
     808:	c5 01       	movw	r24, r10
     80a:	0e 94 a9 03 	call	0x752	; 0x752 <setpixel>
     80e:	8f ef       	ldi	r24, 0xFF	; 255
     810:	88 1a       	sub	r8, r24
     812:	98 0a       	sbc	r9, r24
     814:	c3 94       	inc	r12
     816:	08 15       	cp	r16, r8
     818:	19 05       	cpc	r17, r9
     81a:	9c f7       	brge	.-26     	; 0x802 <drawline+0x3e>
     81c:	3f c0       	rjmp	.+126    	; 0x89c <drawline+0xd8>
     81e:	81 2c       	mov	r8, r1
     820:	91 2c       	mov	r9, r1
     822:	2e 2d       	mov	r18, r14
     824:	40 2f       	mov	r20, r16
     826:	6c 2f       	mov	r22, r28
     828:	c5 01       	movw	r24, r10
     82a:	0e 94 a9 03 	call	0x752	; 0x752 <setpixel>
     82e:	8f ef       	ldi	r24, 0xFF	; 255
     830:	88 1a       	sub	r8, r24
     832:	98 0a       	sbc	r9, r24
     834:	0f 5f       	subi	r16, 0xFF	; 255
     836:	c8 14       	cp	r12, r8
     838:	d9 04       	cpc	r13, r9
     83a:	9c f7       	brge	.-26     	; 0x822 <drawline+0x5e>
     83c:	2f c0       	rjmp	.+94     	; 0x89c <drawline+0xd8>
     83e:	04 13       	cpse	r16, r20
     840:	2d c0       	rjmp	.+90     	; 0x89c <drawline+0xd8>
     842:	62 17       	cp	r22, r18
     844:	30 f0       	brcs	.+12     	; 0x852 <drawline+0x8e>
     846:	c6 2e       	mov	r12, r22
     848:	d1 2c       	mov	r13, r1
     84a:	c2 1a       	sub	r12, r18
     84c:	d1 08       	sbc	r13, r1
     84e:	ba f4       	brpl	.+46     	; 0x87e <drawline+0xba>
     850:	25 c0       	rjmp	.+74     	; 0x89c <drawline+0xd8>
     852:	c2 2f       	mov	r28, r18
     854:	d0 e0       	ldi	r29, 0x00	; 0
     856:	c6 1b       	sub	r28, r22
     858:	d1 09       	sbc	r29, r1
     85a:	02 f1       	brmi	.+64     	; 0x89c <drawline+0xd8>
     85c:	c6 2e       	mov	r12, r22
     85e:	81 2c       	mov	r8, r1
     860:	91 2c       	mov	r9, r1
     862:	2e 2d       	mov	r18, r14
     864:	40 2f       	mov	r20, r16
     866:	6c 2d       	mov	r22, r12
     868:	c5 01       	movw	r24, r10
     86a:	0e 94 a9 03 	call	0x752	; 0x752 <setpixel>
     86e:	8f ef       	ldi	r24, 0xFF	; 255
     870:	88 1a       	sub	r8, r24
     872:	98 0a       	sbc	r9, r24
     874:	c3 94       	inc	r12
     876:	c8 15       	cp	r28, r8
     878:	d9 05       	cpc	r29, r9
     87a:	9c f7       	brge	.-26     	; 0x862 <drawline+0x9e>
     87c:	0f c0       	rjmp	.+30     	; 0x89c <drawline+0xd8>
     87e:	81 2c       	mov	r8, r1
     880:	91 2c       	mov	r9, r1
     882:	2e 2d       	mov	r18, r14
     884:	40 2f       	mov	r20, r16
     886:	6c 2f       	mov	r22, r28
     888:	c5 01       	movw	r24, r10
     88a:	0e 94 a9 03 	call	0x752	; 0x752 <setpixel>
     88e:	8f ef       	ldi	r24, 0xFF	; 255
     890:	88 1a       	sub	r8, r24
     892:	98 0a       	sbc	r9, r24
     894:	cf 5f       	subi	r28, 0xFF	; 255
     896:	c8 14       	cp	r12, r8
     898:	d9 04       	cpc	r13, r9
     89a:	9c f7       	brge	.-26     	; 0x882 <drawline+0xbe>
     89c:	df 91       	pop	r29
     89e:	cf 91       	pop	r28
     8a0:	1f 91       	pop	r17
     8a2:	0f 91       	pop	r16
     8a4:	ef 90       	pop	r14
     8a6:	df 90       	pop	r13
     8a8:	cf 90       	pop	r12
     8aa:	bf 90       	pop	r11
     8ac:	af 90       	pop	r10
     8ae:	9f 90       	pop	r9
     8b0:	8f 90       	pop	r8
     8b2:	08 95       	ret

000008b4 <fillrect>:
     8b4:	8f 92       	push	r8
     8b6:	9f 92       	push	r9
     8b8:	af 92       	push	r10
     8ba:	bf 92       	push	r11
     8bc:	cf 92       	push	r12
     8be:	df 92       	push	r13
     8c0:	ef 92       	push	r14
     8c2:	ff 92       	push	r15
     8c4:	0f 93       	push	r16
     8c6:	1f 93       	push	r17
     8c8:	cf 93       	push	r28
     8ca:	df 93       	push	r29
     8cc:	a2 2e       	mov	r10, r18
     8ce:	b1 2c       	mov	r11, r1
     8d0:	1a 14       	cp	r1, r10
     8d2:	1b 04       	cpc	r1, r11
     8d4:	c4 f4       	brge	.+48     	; 0x906 <__stack+0x7>
     8d6:	fe 2c       	mov	r15, r14
     8d8:	d0 2f       	mov	r29, r16
     8da:	14 2f       	mov	r17, r20
     8dc:	4c 01       	movw	r8, r24
     8de:	c6 2f       	mov	r28, r22
     8e0:	c1 2c       	mov	r12, r1
     8e2:	d1 2c       	mov	r13, r1
     8e4:	d1 50       	subi	r29, 0x01	; 1
     8e6:	d4 0f       	add	r29, r20
     8e8:	ef 2c       	mov	r14, r15
     8ea:	0d 2f       	mov	r16, r29
     8ec:	2c 2f       	mov	r18, r28
     8ee:	41 2f       	mov	r20, r17
     8f0:	6c 2f       	mov	r22, r28
     8f2:	c4 01       	movw	r24, r8
     8f4:	0e 94 e2 03 	call	0x7c4	; 0x7c4 <drawline>
     8f8:	8f ef       	ldi	r24, 0xFF	; 255
     8fa:	c8 1a       	sub	r12, r24
     8fc:	d8 0a       	sbc	r13, r24
     8fe:	cf 5f       	subi	r28, 0xFF	; 255
     900:	ca 14       	cp	r12, r10
     902:	db 04       	cpc	r13, r11
     904:	89 f7       	brne	.-30     	; 0x8e8 <fillrect+0x34>
     906:	df 91       	pop	r29
     908:	cf 91       	pop	r28
     90a:	1f 91       	pop	r17
     90c:	0f 91       	pop	r16
     90e:	ff 90       	pop	r15
     910:	ef 90       	pop	r14
     912:	df 90       	pop	r13
     914:	cf 90       	pop	r12
     916:	bf 90       	pop	r11
     918:	af 90       	pop	r10
     91a:	9f 90       	pop	r9
     91c:	8f 90       	pop	r8
     91e:	08 95       	ret

00000920 <drawrect>:
     920:	bf 92       	push	r11
     922:	cf 92       	push	r12
     924:	df 92       	push	r13
     926:	ef 92       	push	r14
     928:	ff 92       	push	r15
     92a:	0f 93       	push	r16
     92c:	1f 93       	push	r17
     92e:	cf 93       	push	r28
     930:	df 93       	push	r29
     932:	6c 01       	movw	r12, r24
     934:	f6 2e       	mov	r15, r22
     936:	14 2f       	mov	r17, r20
     938:	d0 2f       	mov	r29, r16
     93a:	21 50       	subi	r18, 0x01	; 1
     93c:	c2 2f       	mov	r28, r18
     93e:	c6 0f       	add	r28, r22
     940:	04 2f       	mov	r16, r20
     942:	2c 2f       	mov	r18, r28
     944:	0e 94 e2 03 	call	0x7c4	; 0x7c4 <drawline>
     948:	d1 50       	subi	r29, 0x01	; 1
     94a:	d1 0f       	add	r29, r17
     94c:	0d 2f       	mov	r16, r29
     94e:	2f 2d       	mov	r18, r15
     950:	41 2f       	mov	r20, r17
     952:	6f 2d       	mov	r22, r15
     954:	c6 01       	movw	r24, r12
     956:	0e 94 e2 03 	call	0x7c4	; 0x7c4 <drawline>
     95a:	2c 2f       	mov	r18, r28
     95c:	4d 2f       	mov	r20, r29
     95e:	6f 2d       	mov	r22, r15
     960:	c6 01       	movw	r24, r12
     962:	0e 94 e2 03 	call	0x7c4	; 0x7c4 <drawline>
     966:	2c 2f       	mov	r18, r28
     968:	41 2f       	mov	r20, r17
     96a:	6c 2f       	mov	r22, r28
     96c:	c6 01       	movw	r24, r12
     96e:	0e 94 e2 03 	call	0x7c4	; 0x7c4 <drawline>
     972:	df 91       	pop	r29
     974:	cf 91       	pop	r28
     976:	1f 91       	pop	r17
     978:	0f 91       	pop	r16
     97a:	ff 90       	pop	r15
     97c:	ef 90       	pop	r14
     97e:	df 90       	pop	r13
     980:	cf 90       	pop	r12
     982:	bf 90       	pop	r11
     984:	08 95       	ret

00000986 <fillcircle>:

// function to draw a filled circle
void fillcircle(uint8_t *buff,uint8_t x0, uint8_t y0, uint8_t r,uint8_t color) {
     986:	2f 92       	push	r2
     988:	3f 92       	push	r3
     98a:	4f 92       	push	r4
     98c:	5f 92       	push	r5
     98e:	6f 92       	push	r6
     990:	7f 92       	push	r7
     992:	8f 92       	push	r8
     994:	9f 92       	push	r9
     996:	af 92       	push	r10
     998:	bf 92       	push	r11
     99a:	cf 92       	push	r12
     99c:	df 92       	push	r13
     99e:	ef 92       	push	r14
     9a0:	ff 92       	push	r15
     9a2:	0f 93       	push	r16
     9a4:	1f 93       	push	r17
     9a6:	cf 93       	push	r28
     9a8:	df 93       	push	r29
     9aa:	cd b7       	in	r28, 0x3d	; 61
     9ac:	de b7       	in	r29, 0x3e	; 62
     9ae:	28 97       	sbiw	r28, 0x08	; 8
     9b0:	0f b6       	in	r0, 0x3f	; 63
     9b2:	f8 94       	cli
     9b4:	de bf       	out	0x3e, r29	; 62
     9b6:	0f be       	out	0x3f, r0	; 63
     9b8:	cd bf       	out	0x3d, r28	; 61
     9ba:	6c 01       	movw	r12, r24
     9bc:	6f 83       	std	Y+7, r22	; 0x07
     9be:	24 2e       	mov	r2, r20
     9c0:	f0 2e       	mov	r15, r16
	
	int x = r;
     9c2:	a2 2e       	mov	r10, r18
     9c4:	b1 2c       	mov	r11, r1
	int y = 0;
	int dx = 1;
	int dy = 1;
	int err = dx - (r << 1);
     9c6:	c5 01       	movw	r24, r10
     9c8:	88 0f       	add	r24, r24
     9ca:	99 1f       	adc	r25, r25
     9cc:	21 e0       	ldi	r18, 0x01	; 1
     9ce:	30 e0       	ldi	r19, 0x00	; 0
     9d0:	39 01       	movw	r6, r18
     9d2:	68 1a       	sub	r6, r24
     9d4:	79 0a       	sbc	r7, r25
		}
			
		if (err > 0) {
			x--;
			dx += 2;
			err += (-r << 1) + dx;
     9d6:	88 27       	eor	r24, r24
     9d8:	99 27       	eor	r25, r25
     9da:	8a 19       	sub	r24, r10
     9dc:	9b 09       	sbc	r25, r11
     9de:	9c 01       	movw	r18, r24
     9e0:	22 0f       	add	r18, r18
     9e2:	33 1f       	adc	r19, r19
     9e4:	3e 83       	std	Y+6, r19	; 0x06
     9e6:	2d 83       	std	Y+5, r18	; 0x05
     9e8:	81 e0       	ldi	r24, 0x01	; 1
     9ea:	90 e0       	ldi	r25, 0x00	; 0
     9ec:	9c 83       	std	Y+4, r25	; 0x04
     9ee:	8b 83       	std	Y+3, r24	; 0x03
     9f0:	44 24       	eor	r4, r4
     9f2:	43 94       	inc	r4
     9f4:	51 2c       	mov	r5, r1
     9f6:	81 2c       	mov	r8, r1
     9f8:	91 2c       	mov	r9, r1
	int dy = 1;
	int err = dx - (r << 1);

	while (x >= y)
	{
		drawline(buff, x0, y0 + y, x0 + x, y0 + y, color);
     9fa:	ef 2c       	mov	r14, r15
     9fc:	92 2d       	mov	r25, r2
     9fe:	98 0d       	add	r25, r8
     a00:	98 87       	std	Y+8, r25	; 0x08
     a02:	09 2f       	mov	r16, r25
     a04:	2f 81       	ldd	r18, Y+7	; 0x07
     a06:	2a 0d       	add	r18, r10
     a08:	2a 83       	std	Y+2, r18	; 0x02
     a0a:	49 2f       	mov	r20, r25
     a0c:	6f 81       	ldd	r22, Y+7	; 0x07
     a0e:	c6 01       	movw	r24, r12
     a10:	0e 94 e2 03 	call	0x7c4	; 0x7c4 <drawline>
		drawline(buff, x0, y0 + x, x0 + y, y0 + x, color);
     a14:	12 2d       	mov	r17, r2
     a16:	1a 0d       	add	r17, r10
     a18:	01 2f       	mov	r16, r17
     a1a:	3f 81       	ldd	r19, Y+7	; 0x07
     a1c:	38 0d       	add	r19, r8
     a1e:	39 83       	std	Y+1, r19	; 0x01
     a20:	23 2f       	mov	r18, r19
     a22:	41 2f       	mov	r20, r17
     a24:	6f 81       	ldd	r22, Y+7	; 0x07
     a26:	c6 01       	movw	r24, r12
     a28:	0e 94 e2 03 	call	0x7c4	; 0x7c4 <drawline>
		drawline(buff, x0, y0 + x, x0 - y, y0 + x, color);
     a2c:	3f 80       	ldd	r3, Y+7	; 0x07
     a2e:	38 18       	sub	r3, r8
     a30:	23 2d       	mov	r18, r3
     a32:	41 2f       	mov	r20, r17
     a34:	6f 81       	ldd	r22, Y+7	; 0x07
     a36:	c6 01       	movw	r24, r12
     a38:	0e 94 e2 03 	call	0x7c4	; 0x7c4 <drawline>
		drawline(buff, x0, y0 + y, x0 - x, y0 + y, color);
     a3c:	08 85       	ldd	r16, Y+8	; 0x08
     a3e:	1f 81       	ldd	r17, Y+7	; 0x07
     a40:	1a 19       	sub	r17, r10
     a42:	21 2f       	mov	r18, r17
     a44:	40 2f       	mov	r20, r16
     a46:	6f 81       	ldd	r22, Y+7	; 0x07
     a48:	c6 01       	movw	r24, r12
     a4a:	0e 94 e2 03 	call	0x7c4	; 0x7c4 <drawline>
		drawline(buff, x0, y0 - y, x0 - x, y0 - y, color);
     a4e:	82 2d       	mov	r24, r2
     a50:	88 19       	sub	r24, r8
     a52:	88 87       	std	Y+8, r24	; 0x08
     a54:	08 2f       	mov	r16, r24
     a56:	21 2f       	mov	r18, r17
     a58:	48 2f       	mov	r20, r24
     a5a:	6f 81       	ldd	r22, Y+7	; 0x07
     a5c:	c6 01       	movw	r24, r12
     a5e:	0e 94 e2 03 	call	0x7c4	; 0x7c4 <drawline>
		drawline(buff, x0, y0 - x, x0 - y, y0 - x, color);
     a62:	12 2d       	mov	r17, r2
     a64:	1a 19       	sub	r17, r10
     a66:	01 2f       	mov	r16, r17
     a68:	23 2d       	mov	r18, r3
     a6a:	41 2f       	mov	r20, r17
     a6c:	6f 81       	ldd	r22, Y+7	; 0x07
     a6e:	c6 01       	movw	r24, r12
     a70:	0e 94 e2 03 	call	0x7c4	; 0x7c4 <drawline>
		drawline(buff, x0, y0 - x, x0 + y, y0 - x, color);
     a74:	29 81       	ldd	r18, Y+1	; 0x01
     a76:	41 2f       	mov	r20, r17
     a78:	6f 81       	ldd	r22, Y+7	; 0x07
     a7a:	c6 01       	movw	r24, r12
     a7c:	0e 94 e2 03 	call	0x7c4	; 0x7c4 <drawline>
		drawline(buff, x0, y0 - y, x0 + x, y0 - y, color);
     a80:	08 85       	ldd	r16, Y+8	; 0x08
     a82:	2a 81       	ldd	r18, Y+2	; 0x02
     a84:	40 2f       	mov	r20, r16
     a86:	6f 81       	ldd	r22, Y+7	; 0x07
     a88:	c6 01       	movw	r24, r12
     a8a:	0e 94 e2 03 	call	0x7c4	; 0x7c4 <drawline>

		if (err <= 0) {
     a8e:	16 14       	cp	r1, r6
     a90:	17 04       	cpc	r1, r7
     a92:	74 f0       	brlt	.+28     	; 0xab0 <fillcircle+0x12a>
			y++;
     a94:	9f ef       	ldi	r25, 0xFF	; 255
     a96:	89 1a       	sub	r8, r25
     a98:	99 0a       	sbc	r9, r25
			err += dy;
     a9a:	2b 81       	ldd	r18, Y+3	; 0x03
     a9c:	3c 81       	ldd	r19, Y+4	; 0x04
     a9e:	62 0e       	add	r6, r18
     aa0:	73 1e       	adc	r7, r19
			dy += 2;
     aa2:	2e 5f       	subi	r18, 0xFE	; 254
     aa4:	3f 4f       	sbci	r19, 0xFF	; 255
     aa6:	3c 83       	std	Y+4, r19	; 0x04
     aa8:	2b 83       	std	Y+3, r18	; 0x03
		}
			
		if (err > 0) {
     aaa:	16 14       	cp	r1, r6
     aac:	17 04       	cpc	r1, r7
     aae:	64 f4       	brge	.+24     	; 0xac8 <fillcircle+0x142>
			x--;
     ab0:	31 e0       	ldi	r19, 0x01	; 1
     ab2:	a3 1a       	sub	r10, r19
     ab4:	b1 08       	sbc	r11, r1
			dx += 2;
     ab6:	82 e0       	ldi	r24, 0x02	; 2
     ab8:	48 0e       	add	r4, r24
     aba:	51 1c       	adc	r5, r1
			err += (-r << 1) + dx;
     abc:	8d 81       	ldd	r24, Y+5	; 0x05
     abe:	9e 81       	ldd	r25, Y+6	; 0x06
     ac0:	84 0d       	add	r24, r4
     ac2:	95 1d       	adc	r25, r5
     ac4:	68 0e       	add	r6, r24
     ac6:	79 1e       	adc	r7, r25
	int y = 0;
	int dx = 1;
	int dy = 1;
	int err = dx - (r << 1);

	while (x >= y)
     ac8:	a8 14       	cp	r10, r8
     aca:	b9 04       	cpc	r11, r9
     acc:	0c f0       	brlt	.+2      	; 0xad0 <fillcircle+0x14a>
     ace:	95 cf       	rjmp	.-214    	; 0x9fa <fillcircle+0x74>
			x--;
			dx += 2;
			err += (-r << 1) + dx;
		}
	}
     ad0:	28 96       	adiw	r28, 0x08	; 8
     ad2:	0f b6       	in	r0, 0x3f	; 63
     ad4:	f8 94       	cli
     ad6:	de bf       	out	0x3e, r29	; 62
     ad8:	0f be       	out	0x3f, r0	; 63
     ada:	cd bf       	out	0x3d, r28	; 61
     adc:	df 91       	pop	r29
     ade:	cf 91       	pop	r28
     ae0:	1f 91       	pop	r17
     ae2:	0f 91       	pop	r16
     ae4:	ff 90       	pop	r15
     ae6:	ef 90       	pop	r14
     ae8:	df 90       	pop	r13
     aea:	cf 90       	pop	r12
     aec:	bf 90       	pop	r11
     aee:	af 90       	pop	r10
     af0:	9f 90       	pop	r9
     af2:	8f 90       	pop	r8
     af4:	7f 90       	pop	r7
     af6:	6f 90       	pop	r6
     af8:	5f 90       	pop	r5
     afa:	4f 90       	pop	r4
     afc:	3f 90       	pop	r3
     afe:	2f 90       	pop	r2
     b00:	08 95       	ret

00000b02 <uart_putchar>:
void uart_init(void);

static FILE uart_output = FDEV_SETUP_STREAM(uart_putchar, NULL, _FDEV_SETUP_WRITE);
static FILE uart_input = FDEV_SETUP_STREAM(NULL, uart_getchar, _FDEV_SETUP_READ);

int uart_putchar(char c, FILE *stream) {
     b02:	cf 93       	push	r28
     b04:	c8 2f       	mov	r28, r24
	if (c == '\n') {
     b06:	8a 30       	cpi	r24, 0x0A	; 10
     b08:	19 f4       	brne	.+6      	; 0xb10 <uart_putchar+0xe>
		uart_putchar('\r', stream);
     b0a:	8d e0       	ldi	r24, 0x0D	; 13
     b0c:	0e 94 81 05 	call	0xb02	; 0xb02 <uart_putchar>
	}
	loop_until_bit_is_set(UCSR0A, UDRE0);
     b10:	e0 ec       	ldi	r30, 0xC0	; 192
     b12:	f0 e0       	ldi	r31, 0x00	; 0
     b14:	80 81       	ld	r24, Z
     b16:	85 ff       	sbrs	r24, 5
     b18:	fd cf       	rjmp	.-6      	; 0xb14 <uart_putchar+0x12>
	UDR0 = c;
     b1a:	c0 93 c6 00 	sts	0x00C6, r28	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
	return 0;
}
     b1e:	80 e0       	ldi	r24, 0x00	; 0
     b20:	90 e0       	ldi	r25, 0x00	; 0
     b22:	cf 91       	pop	r28
     b24:	08 95       	ret

00000b26 <uart_getchar>:

int uart_getchar(FILE *stream) {
	loop_until_bit_is_set(UCSR0A, RXC0); /* Wait until data exists. */
     b26:	e0 ec       	ldi	r30, 0xC0	; 192
     b28:	f0 e0       	ldi	r31, 0x00	; 0
     b2a:	80 81       	ld	r24, Z
     b2c:	88 23       	and	r24, r24
     b2e:	ec f7       	brge	.-6      	; 0xb2a <uart_getchar+0x4>
	return UDR0;
     b30:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
}
     b34:	90 e0       	ldi	r25, 0x00	; 0
     b36:	08 95       	ret

00000b38 <uart_init>:

void uart_init(void) {
	UBRR0H = UBRRH_VALUE;
     b38:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
	UBRR0L = UBRRL_VALUE;
     b3c:	87 e6       	ldi	r24, 0x67	; 103
     b3e:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>

	#if USE_2X
	UCSR0A |= _BV(U2X0);
	#else
	UCSR0A &= ~(_BV(U2X0));
     b42:	e0 ec       	ldi	r30, 0xC0	; 192
     b44:	f0 e0       	ldi	r31, 0x00	; 0
     b46:	80 81       	ld	r24, Z
     b48:	8d 7f       	andi	r24, 0xFD	; 253
     b4a:	80 83       	st	Z, r24
	#endif

	UCSR0C = _BV(UCSZ01) | _BV(UCSZ00); /* 8-bit data */
     b4c:	86 e0       	ldi	r24, 0x06	; 6
     b4e:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
	UCSR0B = _BV(RXEN0) | _BV(TXEN0);   /* Enable RX and TX */
     b52:	88 e1       	ldi	r24, 0x18	; 24
     b54:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>

    // Redirect stdin and stdout so functions like printf and getchar work.
	stdout = &uart_output;
     b58:	e2 e4       	ldi	r30, 0x42	; 66
     b5a:	f5 e0       	ldi	r31, 0x05	; 5
     b5c:	8c e2       	ldi	r24, 0x2C	; 44
     b5e:	95 e0       	ldi	r25, 0x05	; 5
     b60:	93 83       	std	Z+3, r25	; 0x03
     b62:	82 83       	std	Z+2, r24	; 0x02
	stdin = &uart_input;
     b64:	8e e1       	ldi	r24, 0x1E	; 30
     b66:	95 e0       	ldi	r25, 0x05	; 5
     b68:	91 83       	std	Z+1, r25	; 0x01
     b6a:	80 83       	st	Z, r24
     b6c:	08 95       	ret

00000b6e <draw>:
	}
	
}

// draw graphics
void draw() {
     b6e:	ef 92       	push	r14
     b70:	0f 93       	push	r16
     b72:	cf 93       	push	r28
	
	clear_buffer(buff);
     b74:	84 e0       	ldi	r24, 0x04	; 4
     b76:	91 e0       	ldi	r25, 0x01	; 1
     b78:	0e 94 83 03 	call	0x706	; 0x706 <clear_buffer>
	
	// bounding rectangle
	drawrect(buff, 1, 1, WIDTH, HEIGHT, BLACK);
     b7c:	ee 24       	eor	r14, r14
     b7e:	e3 94       	inc	r14
     b80:	00 e4       	ldi	r16, 0x40	; 64
     b82:	20 e8       	ldi	r18, 0x80	; 128
     b84:	41 e0       	ldi	r20, 0x01	; 1
     b86:	61 e0       	ldi	r22, 0x01	; 1
     b88:	84 e0       	ldi	r24, 0x04	; 4
     b8a:	91 e0       	ldi	r25, 0x01	; 1
     b8c:	0e 94 90 04 	call	0x920	; 0x920 <drawrect>
     b90:	c2 e0       	ldi	r28, 0x02	; 2
	
	// half court dashed line (with space for ball start point)
	for (int i = 0; i < (WIDTH - 2)/2; i++) {
		drawline(buff, WIDTH/2, 2 + i*4, WIDTH/2, 3 + i*4, BLACK);
     b92:	01 e0       	ldi	r16, 0x01	; 1
     b94:	0c 0f       	add	r16, r28
     b96:	ee 24       	eor	r14, r14
     b98:	e3 94       	inc	r14
     b9a:	20 e4       	ldi	r18, 0x40	; 64
     b9c:	4c 2f       	mov	r20, r28
     b9e:	60 e4       	ldi	r22, 0x40	; 64
     ba0:	84 e0       	ldi	r24, 0x04	; 4
     ba2:	91 e0       	ldi	r25, 0x01	; 1
     ba4:	0e 94 e2 03 	call	0x7c4	; 0x7c4 <drawline>
     ba8:	cc 5f       	subi	r28, 0xFC	; 252
	
	// bounding rectangle
	drawrect(buff, 1, 1, WIDTH, HEIGHT, BLACK);
	
	// half court dashed line (with space for ball start point)
	for (int i = 0; i < (WIDTH - 2)/2; i++) {
     baa:	ce 3f       	cpi	r28, 0xFE	; 254
     bac:	91 f7       	brne	.-28     	; 0xb92 <draw+0x24>
     bae:	cc e1       	ldi	r28, 0x1C	; 28
		drawline(buff, WIDTH/2, 2 + i*4, WIDTH/2, 3 + i*4, BLACK);
	}

	for (int i = 0; i < 8; i++) {
		clearpixel(buff, WIDTH/2, HEIGHT/2 - 4 + i);
     bb0:	4c 2f       	mov	r20, r28
     bb2:	60 e4       	ldi	r22, 0x40	; 64
     bb4:	84 e0       	ldi	r24, 0x04	; 4
     bb6:	91 e0       	ldi	r25, 0x01	; 1
     bb8:	0e 94 c5 03 	call	0x78a	; 0x78a <clearpixel>
     bbc:	cf 5f       	subi	r28, 0xFF	; 255
	// half court dashed line (with space for ball start point)
	for (int i = 0; i < (WIDTH - 2)/2; i++) {
		drawline(buff, WIDTH/2, 2 + i*4, WIDTH/2, 3 + i*4, BLACK);
	}

	for (int i = 0; i < 8; i++) {
     bbe:	c4 32       	cpi	r28, 0x24	; 36
     bc0:	b9 f7       	brne	.-18     	; 0xbb0 <draw+0x42>
		clearpixel(buff, WIDTH/2, HEIGHT/2 - 4 + i);
	}
	
	// scoreboard
	drawchar(buff, WIDTH/2 - 10, 0, scoreL);
     bc2:	20 91 1c 05 	lds	r18, 0x051C	; 0x80051c <scoreL>
     bc6:	40 e0       	ldi	r20, 0x00	; 0
     bc8:	66 e3       	ldi	r22, 0x36	; 54
     bca:	84 e0       	ldi	r24, 0x04	; 4
     bcc:	91 e0       	ldi	r25, 0x01	; 1
     bce:	0e 94 8c 03 	call	0x718	; 0x718 <drawchar>
	drawchar(buff, WIDTH/2 + 6, 0, scoreR);
     bd2:	20 91 1b 05 	lds	r18, 0x051B	; 0x80051b <scoreR>
     bd6:	40 e0       	ldi	r20, 0x00	; 0
     bd8:	66 e4       	ldi	r22, 0x46	; 70
     bda:	84 e0       	ldi	r24, 0x04	; 4
     bdc:	91 e0       	ldi	r25, 0x01	; 1
     bde:	0e 94 8c 03 	call	0x718	; 0x718 <drawchar>
	
	// paddles
	fillrect(buff, 3, paddleL, 2, PADDLE_LENGTH , BLACK);
     be2:	ee 24       	eor	r14, r14
     be4:	e3 94       	inc	r14
     be6:	0a e0       	ldi	r16, 0x0A	; 10
     be8:	22 e0       	ldi	r18, 0x02	; 2
     bea:	40 91 1a 05 	lds	r20, 0x051A	; 0x80051a <paddleL>
     bee:	63 e0       	ldi	r22, 0x03	; 3
     bf0:	84 e0       	ldi	r24, 0x04	; 4
     bf2:	91 e0       	ldi	r25, 0x01	; 1
     bf4:	0e 94 5a 04 	call	0x8b4	; 0x8b4 <fillrect>
	fillrect(buff, WIDTH - 3, paddleR, 2, PADDLE_LENGTH, BLACK);
     bf8:	22 e0       	ldi	r18, 0x02	; 2
     bfa:	40 91 19 05 	lds	r20, 0x0519	; 0x800519 <paddleR>
     bfe:	6d e7       	ldi	r22, 0x7D	; 125
     c00:	84 e0       	ldi	r24, 0x04	; 4
     c02:	91 e0       	ldi	r25, 0x01	; 1
     c04:	0e 94 5a 04 	call	0x8b4	; 0x8b4 <fillrect>
	
	// ball
	fillcircle(buff, ballX, ballY, BALL_RADIUS, BLACK);
     c08:	01 e0       	ldi	r16, 0x01	; 1
     c0a:	22 e0       	ldi	r18, 0x02	; 2
     c0c:	40 91 15 05 	lds	r20, 0x0515	; 0x800515 <ballY>
     c10:	60 91 17 05 	lds	r22, 0x0517	; 0x800517 <ballX>
     c14:	84 e0       	ldi	r24, 0x04	; 4
     c16:	91 e0       	ldi	r25, 0x01	; 1
     c18:	0e 94 c3 04 	call	0x986	; 0x986 <fillcircle>

	// update screen
	write_buffer(buff);
     c1c:	84 e0       	ldi	r24, 0x04	; 4
     c1e:	91 e0       	ldi	r25, 0x01	; 1
     c20:	0e 94 44 03 	call	0x688	; 0x688 <write_buffer>
}
     c24:	cf 91       	pop	r28
     c26:	0f 91       	pop	r16
     c28:	ef 90       	pop	r14
     c2a:	08 95       	ret

00000c2c <checkCollisions>:

// returns 1 if there is a collision with a paddle, 0 if not
int checkCollisions() {
	
	// ball is right of left paddle
	if (ballX - BALL_RADIUS > 5) {
     c2c:	80 91 17 05 	lds	r24, 0x0517	; 0x800517 <ballX>
     c30:	90 91 18 05 	lds	r25, 0x0518	; 0x800518 <ballX+0x1>
     c34:	9c 01       	movw	r18, r24
     c36:	22 50       	subi	r18, 0x02	; 2
     c38:	31 09       	sbc	r19, r1
     c3a:	26 30       	cpi	r18, 0x06	; 6
     c3c:	31 05       	cpc	r19, r1
     c3e:	f4 f0       	brlt	.+60     	; 0xc7c <checkCollisions+0x50>

		// ball is left of right paddle
		if (ballX + BALL_RADIUS < WIDTH - 4) {
     c40:	02 96       	adiw	r24, 0x02	; 2
     c42:	8c 37       	cpi	r24, 0x7C	; 124
     c44:	91 05       	cpc	r25, r1
     c46:	a4 f1       	brlt	.+104    	; 0xcb0 <checkCollisions+0x84>
			return 0;
		} 
		
		// ball is over top of right paddle or under bottom right paddle
		else if ((ballY - BALL_RADIUS > paddleR + PADDLE_LENGTH) || (ballY + BALL_RADIUS < paddleR)) {
     c48:	80 91 15 05 	lds	r24, 0x0515	; 0x800515 <ballY>
     c4c:	90 91 16 05 	lds	r25, 0x0516	; 0x800516 <ballY+0x1>
     c50:	20 91 19 05 	lds	r18, 0x0519	; 0x800519 <paddleR>
     c54:	30 e0       	ldi	r19, 0x00	; 0
     c56:	bc 01       	movw	r22, r24
     c58:	62 50       	subi	r22, 0x02	; 2
     c5a:	71 09       	sbc	r23, r1
     c5c:	a9 01       	movw	r20, r18
     c5e:	46 5f       	subi	r20, 0xF6	; 246
     c60:	5f 4f       	sbci	r21, 0xFF	; 255
     c62:	46 17       	cp	r20, r22
     c64:	57 07       	cpc	r21, r23
     c66:	3c f1       	brlt	.+78     	; 0xcb6 <checkCollisions+0x8a>
	// ball is right of left paddle
	if (ballX - BALL_RADIUS > 5) {

		// ball is left of right paddle
		if (ballX + BALL_RADIUS < WIDTH - 4) {
			return 0;
     c68:	ac 01       	movw	r20, r24
     c6a:	4e 5f       	subi	r20, 0xFE	; 254
     c6c:	5f 4f       	sbci	r21, 0xFF	; 255
     c6e:	81 e0       	ldi	r24, 0x01	; 1
     c70:	90 e0       	ldi	r25, 0x00	; 0
     c72:	42 17       	cp	r20, r18
     c74:	53 07       	cpc	r21, r19
     c76:	24 f5       	brge	.+72     	; 0xcc0 <checkCollisions+0x94>
     c78:	80 e0       	ldi	r24, 0x00	; 0
     c7a:	08 95       	ret
		}
		
	} else {
		
		// ball is over top of left paddle or under bottom left paddle
		if ((ballY - BALL_RADIUS > paddleL + PADDLE_LENGTH) || (ballY + BALL_RADIUS < paddleL)) {
     c7c:	80 91 15 05 	lds	r24, 0x0515	; 0x800515 <ballY>
     c80:	90 91 16 05 	lds	r25, 0x0516	; 0x800516 <ballY+0x1>
     c84:	20 91 1a 05 	lds	r18, 0x051A	; 0x80051a <paddleL>
     c88:	30 e0       	ldi	r19, 0x00	; 0
     c8a:	bc 01       	movw	r22, r24
     c8c:	62 50       	subi	r22, 0x02	; 2
     c8e:	71 09       	sbc	r23, r1
     c90:	a9 01       	movw	r20, r18
     c92:	46 5f       	subi	r20, 0xF6	; 246
     c94:	5f 4f       	sbci	r21, 0xFF	; 255
     c96:	46 17       	cp	r20, r22
     c98:	57 07       	cpc	r21, r23
     c9a:	84 f0       	brlt	.+32     	; 0xcbc <checkCollisions+0x90>
	// ball is right of left paddle
	if (ballX - BALL_RADIUS > 5) {

		// ball is left of right paddle
		if (ballX + BALL_RADIUS < WIDTH - 4) {
			return 0;
     c9c:	ac 01       	movw	r20, r24
     c9e:	4e 5f       	subi	r20, 0xFE	; 254
     ca0:	5f 4f       	sbci	r21, 0xFF	; 255
     ca2:	81 e0       	ldi	r24, 0x01	; 1
     ca4:	90 e0       	ldi	r25, 0x00	; 0
     ca6:	42 17       	cp	r20, r18
     ca8:	53 07       	cpc	r21, r19
     caa:	54 f4       	brge	.+20     	; 0xcc0 <checkCollisions+0x94>
     cac:	80 e0       	ldi	r24, 0x00	; 0
     cae:	08 95       	ret
     cb0:	80 e0       	ldi	r24, 0x00	; 0
     cb2:	90 e0       	ldi	r25, 0x00	; 0
     cb4:	08 95       	ret
		} 
		
		// ball is over top of right paddle or under bottom right paddle
		else if ((ballY - BALL_RADIUS > paddleR + PADDLE_LENGTH) || (ballY + BALL_RADIUS < paddleR)) {
			return 0;
     cb6:	80 e0       	ldi	r24, 0x00	; 0
     cb8:	90 e0       	ldi	r25, 0x00	; 0
     cba:	08 95       	ret
		
	} else {
		
		// ball is over top of left paddle or under bottom left paddle
		if ((ballY - BALL_RADIUS > paddleL + PADDLE_LENGTH) || (ballY + BALL_RADIUS < paddleL)) {
			return 0;
     cbc:	80 e0       	ldi	r24, 0x00	; 0
     cbe:	90 e0       	ldi	r25, 0x00	; 0
		// collision with left paddle
		else {
			return 1;
		}
	}
}
     cc0:	08 95       	ret

00000cc2 <checkScore>:

int checkScore() {
	// right player score on left wall
	if (ballX - BALL_RADIUS < 2) {
     cc2:	80 91 17 05 	lds	r24, 0x0517	; 0x800517 <ballX>
     cc6:	90 91 18 05 	lds	r25, 0x0518	; 0x800518 <ballX+0x1>
     cca:	9c 01       	movw	r18, r24
     ccc:	22 50       	subi	r18, 0x02	; 2
     cce:	31 09       	sbc	r19, r1
     cd0:	22 30       	cpi	r18, 0x02	; 2
     cd2:	31 05       	cpc	r19, r1
     cd4:	44 f4       	brge	.+16     	; 0xce6 <checkScore+0x24>
		scoreR ++;
     cd6:	80 91 1b 05 	lds	r24, 0x051B	; 0x80051b <scoreR>
     cda:	8f 5f       	subi	r24, 0xFF	; 255
     cdc:	80 93 1b 05 	sts	0x051B, r24	; 0x80051b <scoreR>
		return 1;
     ce0:	81 e0       	ldi	r24, 0x01	; 1
     ce2:	90 e0       	ldi	r25, 0x00	; 0
     ce4:	08 95       	ret
	}
	
	// left player score on right wall
	else if (ballX + BALL_RADIUS > WIDTH - 1) {
     ce6:	02 96       	adiw	r24, 0x02	; 2
     ce8:	80 38       	cpi	r24, 0x80	; 128
     cea:	91 05       	cpc	r25, r1
     cec:	44 f0       	brlt	.+16     	; 0xcfe <checkScore+0x3c>
		scoreL ++;
     cee:	80 91 1c 05 	lds	r24, 0x051C	; 0x80051c <scoreL>
     cf2:	8f 5f       	subi	r24, 0xFF	; 255
     cf4:	80 93 1c 05 	sts	0x051C, r24	; 0x80051c <scoreL>
		return 1;
     cf8:	81 e0       	ldi	r24, 0x01	; 1
     cfa:	90 e0       	ldi	r25, 0x00	; 0
     cfc:	08 95       	ret
	}
	
	// no score
	else {
		return 0;
     cfe:	80 e0       	ldi	r24, 0x00	; 0
     d00:	90 e0       	ldi	r25, 0x00	; 0
	}
}
     d02:	08 95       	ret

00000d04 <update>:
	// update screen
	write_buffer(buff);
}

// update gameplay cycle
void update() {
     d04:	ef 92       	push	r14
     d06:	ff 92       	push	r15
     d08:	0f 93       	push	r16
     d0a:	1f 93       	push	r17
     d0c:	cf 93       	push	r28
     d0e:	df 93       	push	r29
	
	// check if start of a round
	if (newRound) {	
     d10:	80 91 14 05 	lds	r24, 0x0514	; 0x800514 <newRound>
     d14:	88 23       	and	r24, r24
     d16:	09 f4       	brne	.+2      	; 0xd1a <update+0x16>
     d18:	58 c0       	rjmp	.+176    	; 0xdca <update+0xc6>
		// reset ball position
		ballX = WIDTH/2;
     d1a:	80 e4       	ldi	r24, 0x40	; 64
     d1c:	90 e0       	ldi	r25, 0x00	; 0
     d1e:	90 93 18 05 	sts	0x0518, r25	; 0x800518 <ballX+0x1>
     d22:	80 93 17 05 	sts	0x0517, r24	; 0x800517 <ballX>
		ballY = HEIGHT/2;
     d26:	80 e2       	ldi	r24, 0x20	; 32
     d28:	90 e0       	ldi	r25, 0x00	; 0
     d2a:	90 93 16 05 	sts	0x0516, r25	; 0x800516 <ballY+0x1>
     d2e:	80 93 15 05 	sts	0x0515, r24	; 0x800515 <ballY>
		
		srand(seed);
     d32:	80 91 1d 05 	lds	r24, 0x051D	; 0x80051d <seed>
     d36:	90 e0       	ldi	r25, 0x00	; 0
     d38:	0e 94 fd 08 	call	0x11fa	; 0x11fa <srand>
		seed++;
     d3c:	80 91 1d 05 	lds	r24, 0x051D	; 0x80051d <seed>
     d40:	8f 5f       	subi	r24, 0xFF	; 255
     d42:	80 93 1d 05 	sts	0x051D, r24	; 0x80051d <seed>
		
		// start ball in random direction and speed
		ballVX = -2 + (int)((double)rand() / ((double)RAND_MAX + 1) * 5);
     d46:	0e 94 f8 08 	call	0x11f0	; 0x11f0 <rand>
     d4a:	bc 01       	movw	r22, r24
     d4c:	99 0f       	add	r25, r25
     d4e:	88 0b       	sbc	r24, r24
     d50:	99 0b       	sbc	r25, r25
     d52:	0e 94 b3 07 	call	0xf66	; 0xf66 <__floatsisf>
     d56:	20 e0       	ldi	r18, 0x00	; 0
     d58:	30 e0       	ldi	r19, 0x00	; 0
     d5a:	40 e0       	ldi	r20, 0x00	; 0
     d5c:	58 e3       	ldi	r21, 0x38	; 56
     d5e:	0e 94 17 08 	call	0x102e	; 0x102e <__mulsf3>
     d62:	20 e0       	ldi	r18, 0x00	; 0
     d64:	30 e0       	ldi	r19, 0x00	; 0
     d66:	40 ea       	ldi	r20, 0xA0	; 160
     d68:	50 e4       	ldi	r21, 0x40	; 64
     d6a:	0e 94 17 08 	call	0x102e	; 0x102e <__mulsf3>
     d6e:	0e 94 7b 07 	call	0xef6	; 0xef6 <__fixsfsi>
     d72:	62 50       	subi	r22, 0x02	; 2
     d74:	71 09       	sbc	r23, r1
     d76:	70 93 3b 05 	sts	0x053B, r23	; 0x80053b <__data_end+0x1>
     d7a:	60 93 3a 05 	sts	0x053A, r22	; 0x80053a <__data_end>
		while(!ballVY) {
     d7e:	80 91 3e 05 	lds	r24, 0x053E	; 0x80053e <ballVY>
     d82:	90 91 3f 05 	lds	r25, 0x053F	; 0x80053f <ballVY+0x1>
     d86:	89 2b       	or	r24, r25
     d88:	f1 f4       	brne	.+60     	; 0xdc6 <update+0xc2>
			ballVY = -2 + (int)((double)rand() / ((double)RAND_MAX + 1) * 5);
     d8a:	0e 94 f8 08 	call	0x11f0	; 0x11f0 <rand>
     d8e:	bc 01       	movw	r22, r24
     d90:	99 0f       	add	r25, r25
     d92:	88 0b       	sbc	r24, r24
     d94:	99 0b       	sbc	r25, r25
     d96:	0e 94 b3 07 	call	0xf66	; 0xf66 <__floatsisf>
     d9a:	20 e0       	ldi	r18, 0x00	; 0
     d9c:	30 e0       	ldi	r19, 0x00	; 0
     d9e:	40 e0       	ldi	r20, 0x00	; 0
     da0:	58 e3       	ldi	r21, 0x38	; 56
     da2:	0e 94 17 08 	call	0x102e	; 0x102e <__mulsf3>
     da6:	20 e0       	ldi	r18, 0x00	; 0
     da8:	30 e0       	ldi	r19, 0x00	; 0
     daa:	40 ea       	ldi	r20, 0xA0	; 160
     dac:	50 e4       	ldi	r21, 0x40	; 64
     dae:	0e 94 17 08 	call	0x102e	; 0x102e <__mulsf3>
     db2:	0e 94 7b 07 	call	0xef6	; 0xef6 <__fixsfsi>
     db6:	62 50       	subi	r22, 0x02	; 2
     db8:	71 09       	sbc	r23, r1
     dba:	70 93 3f 05 	sts	0x053F, r23	; 0x80053f <ballVY+0x1>
     dbe:	60 93 3e 05 	sts	0x053E, r22	; 0x80053e <ballVY>
		srand(seed);
		seed++;
		
		// start ball in random direction and speed
		ballVX = -2 + (int)((double)rand() / ((double)RAND_MAX + 1) * 5);
		while(!ballVY) {
     dc2:	67 2b       	or	r22, r23
     dc4:	11 f3       	breq	.-60     	; 0xd8a <update+0x86>
			ballVY = -2 + (int)((double)rand() / ((double)RAND_MAX + 1) * 5);
		}
		
		newRound = 0;
     dc6:	10 92 14 05 	sts	0x0514, r1	; 0x800514 <newRound>
	}
	
		
	// update ball position
	ballX += ballVX;
     dca:	e0 90 3a 05 	lds	r14, 0x053A	; 0x80053a <__data_end>
     dce:	f0 90 3b 05 	lds	r15, 0x053B	; 0x80053b <__data_end+0x1>
     dd2:	80 91 17 05 	lds	r24, 0x0517	; 0x800517 <ballX>
     dd6:	90 91 18 05 	lds	r25, 0x0518	; 0x800518 <ballX+0x1>
     dda:	8e 0d       	add	r24, r14
     ddc:	9f 1d       	adc	r25, r15
     dde:	90 93 18 05 	sts	0x0518, r25	; 0x800518 <ballX+0x1>
     de2:	80 93 17 05 	sts	0x0517, r24	; 0x800517 <ballX>
	ballY += ballVY;
     de6:	00 91 3e 05 	lds	r16, 0x053E	; 0x80053e <ballVY>
     dea:	10 91 3f 05 	lds	r17, 0x053F	; 0x80053f <ballVY+0x1>
     dee:	c0 91 15 05 	lds	r28, 0x0515	; 0x800515 <ballY>
     df2:	d0 91 16 05 	lds	r29, 0x0516	; 0x800516 <ballY+0x1>
     df6:	c0 0f       	add	r28, r16
     df8:	d1 1f       	adc	r29, r17
     dfa:	d0 93 16 05 	sts	0x0516, r29	; 0x800516 <ballY+0x1>
     dfe:	c0 93 15 05 	sts	0x0515, r28	; 0x800515 <ballY>
	
	// check for paddle collision
	if (checkCollisions()) {
     e02:	0e 94 16 06 	call	0xc2c	; 0xc2c <checkCollisions>
     e06:	89 2b       	or	r24, r25
     e08:	19 f1       	breq	.+70     	; 0xe50 <update+0x14c>
			
			// find where on paddle ball hit
			int hitPos;
			
			// left paddle collision
			if (ballVX < 0) {
     e0a:	ff 20       	and	r15, r15
     e0c:	3c f4       	brge	.+14     	; 0xe1c <update+0x118>
				hitPos = (paddleL + (PADDLE_LENGTH/2)) - ballY;
     e0e:	80 91 1a 05 	lds	r24, 0x051A	; 0x80051a <paddleL>
     e12:	90 e0       	ldi	r25, 0x00	; 0
     e14:	05 96       	adiw	r24, 0x05	; 5
     e16:	8c 1b       	sub	r24, r28
     e18:	9d 0b       	sbc	r25, r29
     e1a:	06 c0       	rjmp	.+12     	; 0xe28 <update+0x124>
			} 
			
			// right paddle collision
			else {
				hitPos = (paddleR + (PADDLE_LENGTH/2)) - ballY;
     e1c:	80 91 19 05 	lds	r24, 0x0519	; 0x800519 <paddleR>
     e20:	90 e0       	ldi	r25, 0x00	; 0
     e22:	05 96       	adiw	r24, 0x05	; 5
     e24:	8c 1b       	sub	r24, r28
     e26:	9d 0b       	sbc	r25, r29
			}
			
			// change ball y angle based on where on paddle it hit
			ballVY -= hitPos/2;
     e28:	9c 01       	movw	r18, r24
     e2a:	99 23       	and	r25, r25
     e2c:	14 f4       	brge	.+4      	; 0xe32 <update+0x12e>
     e2e:	2f 5f       	subi	r18, 0xFF	; 255
     e30:	3f 4f       	sbci	r19, 0xFF	; 255
     e32:	35 95       	asr	r19
     e34:	27 95       	ror	r18
     e36:	02 1b       	sub	r16, r18
     e38:	13 0b       	sbc	r17, r19
     e3a:	10 93 3f 05 	sts	0x053F, r17	; 0x80053f <ballVY+0x1>
     e3e:	00 93 3e 05 	sts	0x053E, r16	; 0x80053e <ballVY>
			
			// reverse ball x direction
			ballVX = -ballVX;
     e42:	f1 94       	neg	r15
     e44:	e1 94       	neg	r14
     e46:	f1 08       	sbc	r15, r1
     e48:	f0 92 3b 05 	sts	0x053B, r15	; 0x80053b <__data_end+0x1>
     e4c:	e0 92 3a 05 	sts	0x053A, r14	; 0x80053a <__data_end>
			// make noise
			beepTone();
	}
	
	// check for ceiling collision
	if ((ballY - BALL_RADIUS < 3) || (ballY + BALL_RADIUS > HEIGHT - 1)) {
     e50:	ce 01       	movw	r24, r28
     e52:	02 97       	sbiw	r24, 0x02	; 2
     e54:	03 97       	sbiw	r24, 0x03	; 3
     e56:	24 f0       	brlt	.+8      	; 0xe60 <update+0x15c>
     e58:	22 96       	adiw	r28, 0x02	; 2
     e5a:	c0 34       	cpi	r28, 0x40	; 64
     e5c:	d1 05       	cpc	r29, r1
     e5e:	5c f0       	brlt	.+22     	; 0xe76 <update+0x172>
		// reverse ball y direction
		ballVY = -ballVY;
     e60:	80 91 3e 05 	lds	r24, 0x053E	; 0x80053e <ballVY>
     e64:	90 91 3f 05 	lds	r25, 0x053F	; 0x80053f <ballVY+0x1>
     e68:	91 95       	neg	r25
     e6a:	81 95       	neg	r24
     e6c:	91 09       	sbc	r25, r1
     e6e:	90 93 3f 05 	sts	0x053F, r25	; 0x80053f <ballVY+0x1>
     e72:	80 93 3e 05 	sts	0x053E, r24	; 0x80053e <ballVY>
		// make noise
		beepTone();
	}
	
	// check if someone scored
	if (checkScore()) {
     e76:	0e 94 61 06 	call	0xcc2	; 0xcc2 <checkScore>
     e7a:	89 2b       	or	r24, r25
     e7c:	19 f0       	breq	.+6      	; 0xe84 <update+0x180>
		beepTone();
		
		// change screen color
		
		// reset new round flag
		newRound = 1;
     e7e:	81 e0       	ldi	r24, 0x01	; 1
     e80:	80 93 14 05 	sts	0x0514, r24	; 0x800514 <newRound>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     e84:	87 ea       	ldi	r24, 0xA7	; 167
     e86:	91 e6       	ldi	r25, 0x61	; 97
     e88:	01 97       	sbiw	r24, 0x01	; 1
     e8a:	f1 f7       	brne	.-4      	; 0xe88 <update+0x184>
     e8c:	00 c0       	rjmp	.+0      	; 0xe8e <update+0x18a>
     e8e:	00 00       	nop
	}
	
	// delay graphics refresh
	_delay_ms(100);
}
     e90:	df 91       	pop	r29
     e92:	cf 91       	pop	r28
     e94:	1f 91       	pop	r17
     e96:	0f 91       	pop	r16
     e98:	ff 90       	pop	r15
     e9a:	ef 90       	pop	r14
     e9c:	08 95       	ret

00000e9e <main>:
int readY();

int main(void)
{
	// setting up the gpio for backlight
	DDRD |= 0x80;
     e9e:	57 9a       	sbi	0x0a, 7	; 10
	PORTD &= ~0x80;
     ea0:	5f 98       	cbi	0x0b, 7	; 11
	PORTD |= 0x00;
     ea2:	8b b1       	in	r24, 0x0b	; 11
     ea4:	8b b9       	out	0x0b, r24	; 11
	
	DDRB |= 0x05;
     ea6:	84 b1       	in	r24, 0x04	; 4
     ea8:	85 60       	ori	r24, 0x05	; 5
     eaa:	84 b9       	out	0x04, r24	; 4
	PORTB &= ~0x05;
     eac:	85 b1       	in	r24, 0x05	; 5
     eae:	8a 7f       	andi	r24, 0xFA	; 250
     eb0:	85 b9       	out	0x05, r24	; 5
	PORTB |= 0x00;
     eb2:	85 b1       	in	r24, 0x05	; 5
     eb4:	85 b9       	out	0x05, r24	; 5
	
	// lcd initialization
	lcd_init();
     eb6:	0e 94 e7 02 	call	0x5ce	; 0x5ce <lcd_init>
	lcd_command(CMD_DISPLAY_ON);
     eba:	8f ea       	ldi	r24, 0xAF	; 175
     ebc:	0e 94 d1 02 	call	0x5a2	; 0x5a2 <lcd_command>
	lcd_set_brightness(0x18);
     ec0:	88 e1       	ldi	r24, 0x18	; 24
     ec2:	0e 94 39 03 	call	0x672	; 0x672 <lcd_set_brightness>
	write_buffer(buff);
     ec6:	84 e0       	ldi	r24, 0x04	; 4
     ec8:	91 e0       	ldi	r25, 0x01	; 1
     eca:	0e 94 44 03 	call	0x688	; 0x688 <write_buffer>
     ece:	2f e7       	ldi	r18, 0x7F	; 127
     ed0:	86 e9       	ldi	r24, 0x96	; 150
     ed2:	98 e9       	ldi	r25, 0x98	; 152
     ed4:	21 50       	subi	r18, 0x01	; 1
     ed6:	80 40       	sbci	r24, 0x00	; 0
     ed8:	90 40       	sbci	r25, 0x00	; 0
     eda:	e1 f7       	brne	.-8      	; 0xed4 <main+0x36>
     edc:	00 c0       	rjmp	.+0      	; 0xede <main+0x40>
     ede:	00 00       	nop
	_delay_ms(50000);
	clear_buffer(buff);
     ee0:	84 e0       	ldi	r24, 0x04	; 4
     ee2:	91 e0       	ldi	r25, 0x01	; 1
     ee4:	0e 94 83 03 	call	0x706	; 0x706 <clear_buffer>
	
	// ADC initialization
	uart_init();
     ee8:	0e 94 9c 05 	call	0xb38	; 0xb38 <uart_init>
		
		// check touchscreen and update paddle
		checkInput();
		
		// run gameplay cycle
		update();
     eec:	0e 94 82 06 	call	0xd04	; 0xd04 <update>
		
		// update graphics
		draw();
     ef0:	0e 94 b7 05 	call	0xb6e	; 0xb6e <draw>
     ef4:	fb cf       	rjmp	.-10     	; 0xeec <main+0x4e>

00000ef6 <__fixsfsi>:
     ef6:	0e 94 82 07 	call	0xf04	; 0xf04 <__fixunssfsi>
     efa:	68 94       	set
     efc:	b1 11       	cpse	r27, r1
     efe:	0c 94 11 08 	jmp	0x1022	; 0x1022 <__fp_szero>
     f02:	08 95       	ret

00000f04 <__fixunssfsi>:
     f04:	0e 94 f6 07 	call	0xfec	; 0xfec <__fp_splitA>
     f08:	88 f0       	brcs	.+34     	; 0xf2c <__fixunssfsi+0x28>
     f0a:	9f 57       	subi	r25, 0x7F	; 127
     f0c:	98 f0       	brcs	.+38     	; 0xf34 <__fixunssfsi+0x30>
     f0e:	b9 2f       	mov	r27, r25
     f10:	99 27       	eor	r25, r25
     f12:	b7 51       	subi	r27, 0x17	; 23
     f14:	b0 f0       	brcs	.+44     	; 0xf42 <__fixunssfsi+0x3e>
     f16:	e1 f0       	breq	.+56     	; 0xf50 <__fixunssfsi+0x4c>
     f18:	66 0f       	add	r22, r22
     f1a:	77 1f       	adc	r23, r23
     f1c:	88 1f       	adc	r24, r24
     f1e:	99 1f       	adc	r25, r25
     f20:	1a f0       	brmi	.+6      	; 0xf28 <__fixunssfsi+0x24>
     f22:	ba 95       	dec	r27
     f24:	c9 f7       	brne	.-14     	; 0xf18 <__fixunssfsi+0x14>
     f26:	14 c0       	rjmp	.+40     	; 0xf50 <__fixunssfsi+0x4c>
     f28:	b1 30       	cpi	r27, 0x01	; 1
     f2a:	91 f0       	breq	.+36     	; 0xf50 <__fixunssfsi+0x4c>
     f2c:	0e 94 10 08 	call	0x1020	; 0x1020 <__fp_zero>
     f30:	b1 e0       	ldi	r27, 0x01	; 1
     f32:	08 95       	ret
     f34:	0c 94 10 08 	jmp	0x1020	; 0x1020 <__fp_zero>
     f38:	67 2f       	mov	r22, r23
     f3a:	78 2f       	mov	r23, r24
     f3c:	88 27       	eor	r24, r24
     f3e:	b8 5f       	subi	r27, 0xF8	; 248
     f40:	39 f0       	breq	.+14     	; 0xf50 <__fixunssfsi+0x4c>
     f42:	b9 3f       	cpi	r27, 0xF9	; 249
     f44:	cc f3       	brlt	.-14     	; 0xf38 <__fixunssfsi+0x34>
     f46:	86 95       	lsr	r24
     f48:	77 95       	ror	r23
     f4a:	67 95       	ror	r22
     f4c:	b3 95       	inc	r27
     f4e:	d9 f7       	brne	.-10     	; 0xf46 <__fixunssfsi+0x42>
     f50:	3e f4       	brtc	.+14     	; 0xf60 <__fixunssfsi+0x5c>
     f52:	90 95       	com	r25
     f54:	80 95       	com	r24
     f56:	70 95       	com	r23
     f58:	61 95       	neg	r22
     f5a:	7f 4f       	sbci	r23, 0xFF	; 255
     f5c:	8f 4f       	sbci	r24, 0xFF	; 255
     f5e:	9f 4f       	sbci	r25, 0xFF	; 255
     f60:	08 95       	ret

00000f62 <__floatunsisf>:
     f62:	e8 94       	clt
     f64:	09 c0       	rjmp	.+18     	; 0xf78 <__floatsisf+0x12>

00000f66 <__floatsisf>:
     f66:	97 fb       	bst	r25, 7
     f68:	3e f4       	brtc	.+14     	; 0xf78 <__floatsisf+0x12>
     f6a:	90 95       	com	r25
     f6c:	80 95       	com	r24
     f6e:	70 95       	com	r23
     f70:	61 95       	neg	r22
     f72:	7f 4f       	sbci	r23, 0xFF	; 255
     f74:	8f 4f       	sbci	r24, 0xFF	; 255
     f76:	9f 4f       	sbci	r25, 0xFF	; 255
     f78:	99 23       	and	r25, r25
     f7a:	a9 f0       	breq	.+42     	; 0xfa6 <__floatsisf+0x40>
     f7c:	f9 2f       	mov	r31, r25
     f7e:	96 e9       	ldi	r25, 0x96	; 150
     f80:	bb 27       	eor	r27, r27
     f82:	93 95       	inc	r25
     f84:	f6 95       	lsr	r31
     f86:	87 95       	ror	r24
     f88:	77 95       	ror	r23
     f8a:	67 95       	ror	r22
     f8c:	b7 95       	ror	r27
     f8e:	f1 11       	cpse	r31, r1
     f90:	f8 cf       	rjmp	.-16     	; 0xf82 <__floatsisf+0x1c>
     f92:	fa f4       	brpl	.+62     	; 0xfd2 <__floatsisf+0x6c>
     f94:	bb 0f       	add	r27, r27
     f96:	11 f4       	brne	.+4      	; 0xf9c <__floatsisf+0x36>
     f98:	60 ff       	sbrs	r22, 0
     f9a:	1b c0       	rjmp	.+54     	; 0xfd2 <__floatsisf+0x6c>
     f9c:	6f 5f       	subi	r22, 0xFF	; 255
     f9e:	7f 4f       	sbci	r23, 0xFF	; 255
     fa0:	8f 4f       	sbci	r24, 0xFF	; 255
     fa2:	9f 4f       	sbci	r25, 0xFF	; 255
     fa4:	16 c0       	rjmp	.+44     	; 0xfd2 <__floatsisf+0x6c>
     fa6:	88 23       	and	r24, r24
     fa8:	11 f0       	breq	.+4      	; 0xfae <__floatsisf+0x48>
     faa:	96 e9       	ldi	r25, 0x96	; 150
     fac:	11 c0       	rjmp	.+34     	; 0xfd0 <__floatsisf+0x6a>
     fae:	77 23       	and	r23, r23
     fb0:	21 f0       	breq	.+8      	; 0xfba <__floatsisf+0x54>
     fb2:	9e e8       	ldi	r25, 0x8E	; 142
     fb4:	87 2f       	mov	r24, r23
     fb6:	76 2f       	mov	r23, r22
     fb8:	05 c0       	rjmp	.+10     	; 0xfc4 <__floatsisf+0x5e>
     fba:	66 23       	and	r22, r22
     fbc:	71 f0       	breq	.+28     	; 0xfda <__floatsisf+0x74>
     fbe:	96 e8       	ldi	r25, 0x86	; 134
     fc0:	86 2f       	mov	r24, r22
     fc2:	70 e0       	ldi	r23, 0x00	; 0
     fc4:	60 e0       	ldi	r22, 0x00	; 0
     fc6:	2a f0       	brmi	.+10     	; 0xfd2 <__floatsisf+0x6c>
     fc8:	9a 95       	dec	r25
     fca:	66 0f       	add	r22, r22
     fcc:	77 1f       	adc	r23, r23
     fce:	88 1f       	adc	r24, r24
     fd0:	da f7       	brpl	.-10     	; 0xfc8 <__floatsisf+0x62>
     fd2:	88 0f       	add	r24, r24
     fd4:	96 95       	lsr	r25
     fd6:	87 95       	ror	r24
     fd8:	97 f9       	bld	r25, 7
     fda:	08 95       	ret

00000fdc <__fp_split3>:
     fdc:	57 fd       	sbrc	r21, 7
     fde:	90 58       	subi	r25, 0x80	; 128
     fe0:	44 0f       	add	r20, r20
     fe2:	55 1f       	adc	r21, r21
     fe4:	59 f0       	breq	.+22     	; 0xffc <__fp_splitA+0x10>
     fe6:	5f 3f       	cpi	r21, 0xFF	; 255
     fe8:	71 f0       	breq	.+28     	; 0x1006 <__fp_splitA+0x1a>
     fea:	47 95       	ror	r20

00000fec <__fp_splitA>:
     fec:	88 0f       	add	r24, r24
     fee:	97 fb       	bst	r25, 7
     ff0:	99 1f       	adc	r25, r25
     ff2:	61 f0       	breq	.+24     	; 0x100c <__fp_splitA+0x20>
     ff4:	9f 3f       	cpi	r25, 0xFF	; 255
     ff6:	79 f0       	breq	.+30     	; 0x1016 <__fp_splitA+0x2a>
     ff8:	87 95       	ror	r24
     ffa:	08 95       	ret
     ffc:	12 16       	cp	r1, r18
     ffe:	13 06       	cpc	r1, r19
    1000:	14 06       	cpc	r1, r20
    1002:	55 1f       	adc	r21, r21
    1004:	f2 cf       	rjmp	.-28     	; 0xfea <__fp_split3+0xe>
    1006:	46 95       	lsr	r20
    1008:	f1 df       	rcall	.-30     	; 0xfec <__fp_splitA>
    100a:	08 c0       	rjmp	.+16     	; 0x101c <__fp_splitA+0x30>
    100c:	16 16       	cp	r1, r22
    100e:	17 06       	cpc	r1, r23
    1010:	18 06       	cpc	r1, r24
    1012:	99 1f       	adc	r25, r25
    1014:	f1 cf       	rjmp	.-30     	; 0xff8 <__fp_splitA+0xc>
    1016:	86 95       	lsr	r24
    1018:	71 05       	cpc	r23, r1
    101a:	61 05       	cpc	r22, r1
    101c:	08 94       	sec
    101e:	08 95       	ret

00001020 <__fp_zero>:
    1020:	e8 94       	clt

00001022 <__fp_szero>:
    1022:	bb 27       	eor	r27, r27
    1024:	66 27       	eor	r22, r22
    1026:	77 27       	eor	r23, r23
    1028:	cb 01       	movw	r24, r22
    102a:	97 f9       	bld	r25, 7
    102c:	08 95       	ret

0000102e <__mulsf3>:
    102e:	0e 94 2a 08 	call	0x1054	; 0x1054 <__mulsf3x>
    1032:	0c 94 9b 08 	jmp	0x1136	; 0x1136 <__fp_round>
    1036:	0e 94 8d 08 	call	0x111a	; 0x111a <__fp_pscA>
    103a:	38 f0       	brcs	.+14     	; 0x104a <__mulsf3+0x1c>
    103c:	0e 94 94 08 	call	0x1128	; 0x1128 <__fp_pscB>
    1040:	20 f0       	brcs	.+8      	; 0x104a <__mulsf3+0x1c>
    1042:	95 23       	and	r25, r21
    1044:	11 f0       	breq	.+4      	; 0x104a <__mulsf3+0x1c>
    1046:	0c 94 84 08 	jmp	0x1108	; 0x1108 <__fp_inf>
    104a:	0c 94 8a 08 	jmp	0x1114	; 0x1114 <__fp_nan>
    104e:	11 24       	eor	r1, r1
    1050:	0c 94 11 08 	jmp	0x1022	; 0x1022 <__fp_szero>

00001054 <__mulsf3x>:
    1054:	0e 94 ee 07 	call	0xfdc	; 0xfdc <__fp_split3>
    1058:	70 f3       	brcs	.-36     	; 0x1036 <__mulsf3+0x8>

0000105a <__mulsf3_pse>:
    105a:	95 9f       	mul	r25, r21
    105c:	c1 f3       	breq	.-16     	; 0x104e <__mulsf3+0x20>
    105e:	95 0f       	add	r25, r21
    1060:	50 e0       	ldi	r21, 0x00	; 0
    1062:	55 1f       	adc	r21, r21
    1064:	62 9f       	mul	r22, r18
    1066:	f0 01       	movw	r30, r0
    1068:	72 9f       	mul	r23, r18
    106a:	bb 27       	eor	r27, r27
    106c:	f0 0d       	add	r31, r0
    106e:	b1 1d       	adc	r27, r1
    1070:	63 9f       	mul	r22, r19
    1072:	aa 27       	eor	r26, r26
    1074:	f0 0d       	add	r31, r0
    1076:	b1 1d       	adc	r27, r1
    1078:	aa 1f       	adc	r26, r26
    107a:	64 9f       	mul	r22, r20
    107c:	66 27       	eor	r22, r22
    107e:	b0 0d       	add	r27, r0
    1080:	a1 1d       	adc	r26, r1
    1082:	66 1f       	adc	r22, r22
    1084:	82 9f       	mul	r24, r18
    1086:	22 27       	eor	r18, r18
    1088:	b0 0d       	add	r27, r0
    108a:	a1 1d       	adc	r26, r1
    108c:	62 1f       	adc	r22, r18
    108e:	73 9f       	mul	r23, r19
    1090:	b0 0d       	add	r27, r0
    1092:	a1 1d       	adc	r26, r1
    1094:	62 1f       	adc	r22, r18
    1096:	83 9f       	mul	r24, r19
    1098:	a0 0d       	add	r26, r0
    109a:	61 1d       	adc	r22, r1
    109c:	22 1f       	adc	r18, r18
    109e:	74 9f       	mul	r23, r20
    10a0:	33 27       	eor	r19, r19
    10a2:	a0 0d       	add	r26, r0
    10a4:	61 1d       	adc	r22, r1
    10a6:	23 1f       	adc	r18, r19
    10a8:	84 9f       	mul	r24, r20
    10aa:	60 0d       	add	r22, r0
    10ac:	21 1d       	adc	r18, r1
    10ae:	82 2f       	mov	r24, r18
    10b0:	76 2f       	mov	r23, r22
    10b2:	6a 2f       	mov	r22, r26
    10b4:	11 24       	eor	r1, r1
    10b6:	9f 57       	subi	r25, 0x7F	; 127
    10b8:	50 40       	sbci	r21, 0x00	; 0
    10ba:	9a f0       	brmi	.+38     	; 0x10e2 <__mulsf3_pse+0x88>
    10bc:	f1 f0       	breq	.+60     	; 0x10fa <__mulsf3_pse+0xa0>
    10be:	88 23       	and	r24, r24
    10c0:	4a f0       	brmi	.+18     	; 0x10d4 <__mulsf3_pse+0x7a>
    10c2:	ee 0f       	add	r30, r30
    10c4:	ff 1f       	adc	r31, r31
    10c6:	bb 1f       	adc	r27, r27
    10c8:	66 1f       	adc	r22, r22
    10ca:	77 1f       	adc	r23, r23
    10cc:	88 1f       	adc	r24, r24
    10ce:	91 50       	subi	r25, 0x01	; 1
    10d0:	50 40       	sbci	r21, 0x00	; 0
    10d2:	a9 f7       	brne	.-22     	; 0x10be <__mulsf3_pse+0x64>
    10d4:	9e 3f       	cpi	r25, 0xFE	; 254
    10d6:	51 05       	cpc	r21, r1
    10d8:	80 f0       	brcs	.+32     	; 0x10fa <__mulsf3_pse+0xa0>
    10da:	0c 94 84 08 	jmp	0x1108	; 0x1108 <__fp_inf>
    10de:	0c 94 11 08 	jmp	0x1022	; 0x1022 <__fp_szero>
    10e2:	5f 3f       	cpi	r21, 0xFF	; 255
    10e4:	e4 f3       	brlt	.-8      	; 0x10de <__mulsf3_pse+0x84>
    10e6:	98 3e       	cpi	r25, 0xE8	; 232
    10e8:	d4 f3       	brlt	.-12     	; 0x10de <__mulsf3_pse+0x84>
    10ea:	86 95       	lsr	r24
    10ec:	77 95       	ror	r23
    10ee:	67 95       	ror	r22
    10f0:	b7 95       	ror	r27
    10f2:	f7 95       	ror	r31
    10f4:	e7 95       	ror	r30
    10f6:	9f 5f       	subi	r25, 0xFF	; 255
    10f8:	c1 f7       	brne	.-16     	; 0x10ea <__mulsf3_pse+0x90>
    10fa:	fe 2b       	or	r31, r30
    10fc:	88 0f       	add	r24, r24
    10fe:	91 1d       	adc	r25, r1
    1100:	96 95       	lsr	r25
    1102:	87 95       	ror	r24
    1104:	97 f9       	bld	r25, 7
    1106:	08 95       	ret

00001108 <__fp_inf>:
    1108:	97 f9       	bld	r25, 7
    110a:	9f 67       	ori	r25, 0x7F	; 127
    110c:	80 e8       	ldi	r24, 0x80	; 128
    110e:	70 e0       	ldi	r23, 0x00	; 0
    1110:	60 e0       	ldi	r22, 0x00	; 0
    1112:	08 95       	ret

00001114 <__fp_nan>:
    1114:	9f ef       	ldi	r25, 0xFF	; 255
    1116:	80 ec       	ldi	r24, 0xC0	; 192
    1118:	08 95       	ret

0000111a <__fp_pscA>:
    111a:	00 24       	eor	r0, r0
    111c:	0a 94       	dec	r0
    111e:	16 16       	cp	r1, r22
    1120:	17 06       	cpc	r1, r23
    1122:	18 06       	cpc	r1, r24
    1124:	09 06       	cpc	r0, r25
    1126:	08 95       	ret

00001128 <__fp_pscB>:
    1128:	00 24       	eor	r0, r0
    112a:	0a 94       	dec	r0
    112c:	12 16       	cp	r1, r18
    112e:	13 06       	cpc	r1, r19
    1130:	14 06       	cpc	r1, r20
    1132:	05 06       	cpc	r0, r21
    1134:	08 95       	ret

00001136 <__fp_round>:
    1136:	09 2e       	mov	r0, r25
    1138:	03 94       	inc	r0
    113a:	00 0c       	add	r0, r0
    113c:	11 f4       	brne	.+4      	; 0x1142 <__fp_round+0xc>
    113e:	88 23       	and	r24, r24
    1140:	52 f0       	brmi	.+20     	; 0x1156 <__fp_round+0x20>
    1142:	bb 0f       	add	r27, r27
    1144:	40 f4       	brcc	.+16     	; 0x1156 <__fp_round+0x20>
    1146:	bf 2b       	or	r27, r31
    1148:	11 f4       	brne	.+4      	; 0x114e <__fp_round+0x18>
    114a:	60 ff       	sbrs	r22, 0
    114c:	04 c0       	rjmp	.+8      	; 0x1156 <__fp_round+0x20>
    114e:	6f 5f       	subi	r22, 0xFF	; 255
    1150:	7f 4f       	sbci	r23, 0xFF	; 255
    1152:	8f 4f       	sbci	r24, 0xFF	; 255
    1154:	9f 4f       	sbci	r25, 0xFF	; 255
    1156:	08 95       	ret

00001158 <do_rand>:
    1158:	8f 92       	push	r8
    115a:	9f 92       	push	r9
    115c:	af 92       	push	r10
    115e:	bf 92       	push	r11
    1160:	cf 92       	push	r12
    1162:	df 92       	push	r13
    1164:	ef 92       	push	r14
    1166:	ff 92       	push	r15
    1168:	cf 93       	push	r28
    116a:	df 93       	push	r29
    116c:	ec 01       	movw	r28, r24
    116e:	68 81       	ld	r22, Y
    1170:	79 81       	ldd	r23, Y+1	; 0x01
    1172:	8a 81       	ldd	r24, Y+2	; 0x02
    1174:	9b 81       	ldd	r25, Y+3	; 0x03
    1176:	61 15       	cp	r22, r1
    1178:	71 05       	cpc	r23, r1
    117a:	81 05       	cpc	r24, r1
    117c:	91 05       	cpc	r25, r1
    117e:	21 f4       	brne	.+8      	; 0x1188 <do_rand+0x30>
    1180:	64 e2       	ldi	r22, 0x24	; 36
    1182:	79 ed       	ldi	r23, 0xD9	; 217
    1184:	8b e5       	ldi	r24, 0x5B	; 91
    1186:	97 e0       	ldi	r25, 0x07	; 7
    1188:	2d e1       	ldi	r18, 0x1D	; 29
    118a:	33 ef       	ldi	r19, 0xF3	; 243
    118c:	41 e0       	ldi	r20, 0x01	; 1
    118e:	50 e0       	ldi	r21, 0x00	; 0
    1190:	0e 94 08 09 	call	0x1210	; 0x1210 <__divmodsi4>
    1194:	49 01       	movw	r8, r18
    1196:	5a 01       	movw	r10, r20
    1198:	9b 01       	movw	r18, r22
    119a:	ac 01       	movw	r20, r24
    119c:	a7 ea       	ldi	r26, 0xA7	; 167
    119e:	b1 e4       	ldi	r27, 0x41	; 65
    11a0:	0e 94 27 09 	call	0x124e	; 0x124e <__muluhisi3>
    11a4:	6b 01       	movw	r12, r22
    11a6:	7c 01       	movw	r14, r24
    11a8:	ac ee       	ldi	r26, 0xEC	; 236
    11aa:	b4 ef       	ldi	r27, 0xF4	; 244
    11ac:	a5 01       	movw	r20, r10
    11ae:	94 01       	movw	r18, r8
    11b0:	0e 94 35 09 	call	0x126a	; 0x126a <__mulohisi3>
    11b4:	dc 01       	movw	r26, r24
    11b6:	cb 01       	movw	r24, r22
    11b8:	8c 0d       	add	r24, r12
    11ba:	9d 1d       	adc	r25, r13
    11bc:	ae 1d       	adc	r26, r14
    11be:	bf 1d       	adc	r27, r15
    11c0:	b7 ff       	sbrs	r27, 7
    11c2:	03 c0       	rjmp	.+6      	; 0x11ca <do_rand+0x72>
    11c4:	01 97       	sbiw	r24, 0x01	; 1
    11c6:	a1 09       	sbc	r26, r1
    11c8:	b0 48       	sbci	r27, 0x80	; 128
    11ca:	88 83       	st	Y, r24
    11cc:	99 83       	std	Y+1, r25	; 0x01
    11ce:	aa 83       	std	Y+2, r26	; 0x02
    11d0:	bb 83       	std	Y+3, r27	; 0x03
    11d2:	9f 77       	andi	r25, 0x7F	; 127
    11d4:	df 91       	pop	r29
    11d6:	cf 91       	pop	r28
    11d8:	ff 90       	pop	r15
    11da:	ef 90       	pop	r14
    11dc:	df 90       	pop	r13
    11de:	cf 90       	pop	r12
    11e0:	bf 90       	pop	r11
    11e2:	af 90       	pop	r10
    11e4:	9f 90       	pop	r9
    11e6:	8f 90       	pop	r8
    11e8:	08 95       	ret

000011ea <rand_r>:
    11ea:	0e 94 ac 08 	call	0x1158	; 0x1158 <do_rand>
    11ee:	08 95       	ret

000011f0 <rand>:
    11f0:	80 e0       	ldi	r24, 0x00	; 0
    11f2:	91 e0       	ldi	r25, 0x01	; 1
    11f4:	0e 94 ac 08 	call	0x1158	; 0x1158 <do_rand>
    11f8:	08 95       	ret

000011fa <srand>:
    11fa:	a0 e0       	ldi	r26, 0x00	; 0
    11fc:	b0 e0       	ldi	r27, 0x00	; 0
    11fe:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
    1202:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
    1206:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__data_start+0x2>
    120a:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__data_start+0x3>
    120e:	08 95       	ret

00001210 <__divmodsi4>:
    1210:	05 2e       	mov	r0, r21
    1212:	97 fb       	bst	r25, 7
    1214:	1e f4       	brtc	.+6      	; 0x121c <__divmodsi4+0xc>
    1216:	00 94       	com	r0
    1218:	0e 94 1f 09 	call	0x123e	; 0x123e <__negsi2>
    121c:	57 fd       	sbrc	r21, 7
    121e:	07 d0       	rcall	.+14     	; 0x122e <__divmodsi4_neg2>
    1220:	0e 94 3a 09 	call	0x1274	; 0x1274 <__udivmodsi4>
    1224:	07 fc       	sbrc	r0, 7
    1226:	03 d0       	rcall	.+6      	; 0x122e <__divmodsi4_neg2>
    1228:	4e f4       	brtc	.+18     	; 0x123c <__divmodsi4_exit>
    122a:	0c 94 1f 09 	jmp	0x123e	; 0x123e <__negsi2>

0000122e <__divmodsi4_neg2>:
    122e:	50 95       	com	r21
    1230:	40 95       	com	r20
    1232:	30 95       	com	r19
    1234:	21 95       	neg	r18
    1236:	3f 4f       	sbci	r19, 0xFF	; 255
    1238:	4f 4f       	sbci	r20, 0xFF	; 255
    123a:	5f 4f       	sbci	r21, 0xFF	; 255

0000123c <__divmodsi4_exit>:
    123c:	08 95       	ret

0000123e <__negsi2>:
    123e:	90 95       	com	r25
    1240:	80 95       	com	r24
    1242:	70 95       	com	r23
    1244:	61 95       	neg	r22
    1246:	7f 4f       	sbci	r23, 0xFF	; 255
    1248:	8f 4f       	sbci	r24, 0xFF	; 255
    124a:	9f 4f       	sbci	r25, 0xFF	; 255
    124c:	08 95       	ret

0000124e <__muluhisi3>:
    124e:	0e 94 5c 09 	call	0x12b8	; 0x12b8 <__umulhisi3>
    1252:	a5 9f       	mul	r26, r21
    1254:	90 0d       	add	r25, r0
    1256:	b4 9f       	mul	r27, r20
    1258:	90 0d       	add	r25, r0
    125a:	a4 9f       	mul	r26, r20
    125c:	80 0d       	add	r24, r0
    125e:	91 1d       	adc	r25, r1
    1260:	11 24       	eor	r1, r1
    1262:	08 95       	ret

00001264 <__mulshisi3>:
    1264:	b7 ff       	sbrs	r27, 7
    1266:	0c 94 27 09 	jmp	0x124e	; 0x124e <__muluhisi3>

0000126a <__mulohisi3>:
    126a:	0e 94 27 09 	call	0x124e	; 0x124e <__muluhisi3>
    126e:	82 1b       	sub	r24, r18
    1270:	93 0b       	sbc	r25, r19
    1272:	08 95       	ret

00001274 <__udivmodsi4>:
    1274:	a1 e2       	ldi	r26, 0x21	; 33
    1276:	1a 2e       	mov	r1, r26
    1278:	aa 1b       	sub	r26, r26
    127a:	bb 1b       	sub	r27, r27
    127c:	fd 01       	movw	r30, r26
    127e:	0d c0       	rjmp	.+26     	; 0x129a <__udivmodsi4_ep>

00001280 <__udivmodsi4_loop>:
    1280:	aa 1f       	adc	r26, r26
    1282:	bb 1f       	adc	r27, r27
    1284:	ee 1f       	adc	r30, r30
    1286:	ff 1f       	adc	r31, r31
    1288:	a2 17       	cp	r26, r18
    128a:	b3 07       	cpc	r27, r19
    128c:	e4 07       	cpc	r30, r20
    128e:	f5 07       	cpc	r31, r21
    1290:	20 f0       	brcs	.+8      	; 0x129a <__udivmodsi4_ep>
    1292:	a2 1b       	sub	r26, r18
    1294:	b3 0b       	sbc	r27, r19
    1296:	e4 0b       	sbc	r30, r20
    1298:	f5 0b       	sbc	r31, r21

0000129a <__udivmodsi4_ep>:
    129a:	66 1f       	adc	r22, r22
    129c:	77 1f       	adc	r23, r23
    129e:	88 1f       	adc	r24, r24
    12a0:	99 1f       	adc	r25, r25
    12a2:	1a 94       	dec	r1
    12a4:	69 f7       	brne	.-38     	; 0x1280 <__udivmodsi4_loop>
    12a6:	60 95       	com	r22
    12a8:	70 95       	com	r23
    12aa:	80 95       	com	r24
    12ac:	90 95       	com	r25
    12ae:	9b 01       	movw	r18, r22
    12b0:	ac 01       	movw	r20, r24
    12b2:	bd 01       	movw	r22, r26
    12b4:	cf 01       	movw	r24, r30
    12b6:	08 95       	ret

000012b8 <__umulhisi3>:
    12b8:	a2 9f       	mul	r26, r18
    12ba:	b0 01       	movw	r22, r0
    12bc:	b3 9f       	mul	r27, r19
    12be:	c0 01       	movw	r24, r0
    12c0:	a3 9f       	mul	r26, r19
    12c2:	70 0d       	add	r23, r0
    12c4:	81 1d       	adc	r24, r1
    12c6:	11 24       	eor	r1, r1
    12c8:	91 1d       	adc	r25, r1
    12ca:	b2 9f       	mul	r27, r18
    12cc:	70 0d       	add	r23, r0
    12ce:	81 1d       	adc	r24, r1
    12d0:	11 24       	eor	r1, r1
    12d2:	91 1d       	adc	r25, r1
    12d4:	08 95       	ret

000012d6 <_exit>:
    12d6:	f8 94       	cli

000012d8 <__stop_program>:
    12d8:	ff cf       	rjmp	.-2      	; 0x12d8 <__stop_program>
