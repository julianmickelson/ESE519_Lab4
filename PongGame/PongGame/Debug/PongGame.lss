
PongGame.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000446  00800100  00000bc2  00000c56  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000bc2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  00800546  00800546  0000109c  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000109c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000010f8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000e0  00000000  00000000  00001138  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001763  00000000  00000000  00001218  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a1b  00000000  00000000  0000297b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000a1a  00000000  00000000  00003396  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000334  00000000  00000000  00003db0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000542  00000000  00000000  000040e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000011ec  00000000  00000000  00004626  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000f0  00000000  00000000  00005812  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 f0 02 	jmp	0x5e0	; 0x5e0 <__vector_21>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	15 e0       	ldi	r17, 0x05	; 5
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e2 ec       	ldi	r30, 0xC2	; 194
  7c:	fb e0       	ldi	r31, 0x0B	; 11
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a6 34       	cpi	r26, 0x46	; 70
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	25 e0       	ldi	r18, 0x05	; 5
  8c:	a6 e4       	ldi	r26, 0x46	; 70
  8e:	b5 e0       	ldi	r27, 0x05	; 5
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ac 34       	cpi	r26, 0x4C	; 76
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 1f 02 	call	0x43e	; 0x43e <main>
  9e:	0c 94 df 05 	jmp	0xbbe	; 0xbbe <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <lcd_command>:
	drawline(buff,x,y+h,x+w,y+h,color);
	
	// right
	drawline(buff,x+w,y,x+w,y+h,color);

}
  a6:	5c 98       	cbi	0x0b, 4	; 11
  a8:	27 e0       	ldi	r18, 0x07	; 7
  aa:	30 e0       	ldi	r19, 0x00	; 0
  ac:	90 e0       	ldi	r25, 0x00	; 0
  ae:	5d 98       	cbi	0x0b, 5	; 11
  b0:	ac 01       	movw	r20, r24
  b2:	02 2e       	mov	r0, r18
  b4:	02 c0       	rjmp	.+4      	; 0xba <lcd_command+0x14>
  b6:	55 95       	asr	r21
  b8:	47 95       	ror	r20
  ba:	0a 94       	dec	r0
  bc:	e2 f7       	brpl	.-8      	; 0xb6 <lcd_command+0x10>
  be:	40 ff       	sbrs	r20, 0
  c0:	02 c0       	rjmp	.+4      	; 0xc6 <lcd_command+0x20>
  c2:	5e 9a       	sbi	0x0b, 6	; 11
  c4:	01 c0       	rjmp	.+2      	; 0xc8 <lcd_command+0x22>
  c6:	5e 98       	cbi	0x0b, 6	; 11
  c8:	5d 9a       	sbi	0x0b, 5	; 11
  ca:	21 50       	subi	r18, 0x01	; 1
  cc:	31 09       	sbc	r19, r1
  ce:	78 f7       	brcc	.-34     	; 0xae <lcd_command+0x8>
  d0:	08 95       	ret

000000d2 <lcd_init>:
  d2:	56 9a       	sbi	0x0a, 6	; 10
  d4:	55 9a       	sbi	0x0a, 5	; 10
  d6:	54 9a       	sbi	0x0a, 4	; 10
  d8:	53 9a       	sbi	0x0a, 3	; 10
  da:	52 9a       	sbi	0x0a, 2	; 10
  dc:	5a 98       	cbi	0x0b, 2	; 11
  de:	5b 98       	cbi	0x0b, 3	; 11
  e0:	2f e9       	ldi	r18, 0x9F	; 159
  e2:	86 e8       	ldi	r24, 0x86	; 134
  e4:	91 e0       	ldi	r25, 0x01	; 1
  e6:	21 50       	subi	r18, 0x01	; 1
  e8:	80 40       	sbci	r24, 0x00	; 0
  ea:	90 40       	sbci	r25, 0x00	; 0
  ec:	e1 f7       	brne	.-8      	; 0xe6 <lcd_init+0x14>
  ee:	00 c0       	rjmp	.+0      	; 0xf0 <lcd_init+0x1e>
  f0:	00 00       	nop
  f2:	5b 9a       	sbi	0x0b, 3	; 11
  f4:	83 ea       	ldi	r24, 0xA3	; 163
  f6:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_command>
  fa:	80 ea       	ldi	r24, 0xA0	; 160
  fc:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_command>
 100:	80 ec       	ldi	r24, 0xC0	; 192
 102:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_command>
 106:	80 e4       	ldi	r24, 0x40	; 64
 108:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_command>
 10c:	8c e2       	ldi	r24, 0x2C	; 44
 10e:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_command>
 112:	83 ed       	ldi	r24, 0xD3	; 211
 114:	90 e3       	ldi	r25, 0x30	; 48
 116:	01 97       	sbiw	r24, 0x01	; 1
 118:	f1 f7       	brne	.-4      	; 0x116 <lcd_init+0x44>
 11a:	00 c0       	rjmp	.+0      	; 0x11c <lcd_init+0x4a>
 11c:	00 00       	nop
 11e:	8e e2       	ldi	r24, 0x2E	; 46
 120:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_command>
 124:	83 ed       	ldi	r24, 0xD3	; 211
 126:	90 e3       	ldi	r25, 0x30	; 48
 128:	01 97       	sbiw	r24, 0x01	; 1
 12a:	f1 f7       	brne	.-4      	; 0x128 <lcd_init+0x56>
 12c:	00 c0       	rjmp	.+0      	; 0x12e <lcd_init+0x5c>
 12e:	00 00       	nop
 130:	8f e2       	ldi	r24, 0x2F	; 47
 132:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_command>
 136:	83 ec       	ldi	r24, 0xC3	; 195
 138:	99 e0       	ldi	r25, 0x09	; 9
 13a:	01 97       	sbiw	r24, 0x01	; 1
 13c:	f1 f7       	brne	.-4      	; 0x13a <lcd_init+0x68>
 13e:	00 c0       	rjmp	.+0      	; 0x140 <lcd_init+0x6e>
 140:	00 00       	nop
 142:	86 e2       	ldi	r24, 0x26	; 38
 144:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_command>
 148:	08 95       	ret

0000014a <lcd_data>:
 14a:	5c 9a       	sbi	0x0b, 4	; 11
 14c:	27 e0       	ldi	r18, 0x07	; 7
 14e:	30 e0       	ldi	r19, 0x00	; 0
 150:	90 e0       	ldi	r25, 0x00	; 0
 152:	5d 98       	cbi	0x0b, 5	; 11
 154:	ac 01       	movw	r20, r24
 156:	02 2e       	mov	r0, r18
 158:	02 c0       	rjmp	.+4      	; 0x15e <lcd_data+0x14>
 15a:	55 95       	asr	r21
 15c:	47 95       	ror	r20
 15e:	0a 94       	dec	r0
 160:	e2 f7       	brpl	.-8      	; 0x15a <lcd_data+0x10>
 162:	40 ff       	sbrs	r20, 0
 164:	02 c0       	rjmp	.+4      	; 0x16a <lcd_data+0x20>
 166:	5e 9a       	sbi	0x0b, 6	; 11
 168:	01 c0       	rjmp	.+2      	; 0x16c <lcd_data+0x22>
 16a:	5e 98       	cbi	0x0b, 6	; 11
 16c:	5d 9a       	sbi	0x0b, 5	; 11
 16e:	21 50       	subi	r18, 0x01	; 1
 170:	31 09       	sbc	r19, r1
 172:	78 f7       	brcc	.-34     	; 0x152 <lcd_data+0x8>
 174:	08 95       	ret

00000176 <lcd_set_brightness>:
 176:	cf 93       	push	r28
 178:	c8 2f       	mov	r28, r24
 17a:	81 e8       	ldi	r24, 0x81	; 129
 17c:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_command>
 180:	8c 2f       	mov	r24, r28
 182:	8f 73       	andi	r24, 0x3F	; 63
 184:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_command>
 188:	cf 91       	pop	r28
 18a:	08 95       	ret

0000018c <write_buffer>:
 18c:	cf 92       	push	r12
 18e:	df 92       	push	r13
 190:	ef 92       	push	r14
 192:	ff 92       	push	r15
 194:	0f 93       	push	r16
 196:	1f 93       	push	r17
 198:	cf 93       	push	r28
 19a:	df 93       	push	r29
 19c:	0f 2e       	mov	r0, r31
 19e:	f0 e0       	ldi	r31, 0x00	; 0
 1a0:	ef 2e       	mov	r14, r31
 1a2:	f5 e0       	ldi	r31, 0x05	; 5
 1a4:	ff 2e       	mov	r15, r31
 1a6:	f0 2d       	mov	r31, r0
 1a8:	ec 01       	movw	r28, r24
 1aa:	0f 2e       	mov	r0, r31
 1ac:	f0 e1       	ldi	r31, 0x10	; 16
 1ae:	cf 2e       	mov	r12, r31
 1b0:	f5 e0       	ldi	r31, 0x05	; 5
 1b2:	df 2e       	mov	r13, r31
 1b4:	f0 2d       	mov	r31, r0
 1b6:	f7 01       	movw	r30, r14
 1b8:	80 81       	ld	r24, Z
 1ba:	f2 e0       	ldi	r31, 0x02	; 2
 1bc:	ef 0e       	add	r14, r31
 1be:	f1 1c       	adc	r15, r1
 1c0:	80 6b       	ori	r24, 0xB0	; 176
 1c2:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_command>
 1c6:	80 e0       	ldi	r24, 0x00	; 0
 1c8:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_command>
 1cc:	80 e1       	ldi	r24, 0x10	; 16
 1ce:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_command>
 1d2:	80 ee       	ldi	r24, 0xE0	; 224
 1d4:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_command>
 1d8:	8f ef       	ldi	r24, 0xFF	; 255
 1da:	0e 94 a5 00 	call	0x14a	; 0x14a <lcd_data>
 1de:	8e 01       	movw	r16, r28
 1e0:	00 58       	subi	r16, 0x80	; 128
 1e2:	1f 4f       	sbci	r17, 0xFF	; 255
 1e4:	89 91       	ld	r24, Y+
 1e6:	0e 94 a5 00 	call	0x14a	; 0x14a <lcd_data>
 1ea:	c0 17       	cp	r28, r16
 1ec:	d1 07       	cpc	r29, r17
 1ee:	d1 f7       	brne	.-12     	; 0x1e4 <write_buffer+0x58>
 1f0:	e8 01       	movw	r28, r16
 1f2:	ce 14       	cp	r12, r14
 1f4:	df 04       	cpc	r13, r15
 1f6:	f9 f6       	brne	.-66     	; 0x1b6 <write_buffer+0x2a>
 1f8:	df 91       	pop	r29
 1fa:	cf 91       	pop	r28
 1fc:	1f 91       	pop	r17
 1fe:	0f 91       	pop	r16
 200:	ff 90       	pop	r15
 202:	ef 90       	pop	r14
 204:	df 90       	pop	r13
 206:	cf 90       	pop	r12
 208:	08 95       	ret

0000020a <clear_buffer>:
 20a:	20 e0       	ldi	r18, 0x00	; 0
 20c:	34 e0       	ldi	r19, 0x04	; 4
 20e:	fc 01       	movw	r30, r24
 210:	a9 01       	movw	r20, r18
 212:	11 92       	st	Z+, r1
 214:	41 50       	subi	r20, 0x01	; 1
 216:	50 40       	sbci	r21, 0x00	; 0
 218:	e1 f7       	brne	.-8      	; 0x212 <clear_buffer+0x8>
 21a:	08 95       	ret

0000021c <setpixel>:
 21c:	24 2f       	mov	r18, r20
 21e:	26 95       	lsr	r18
 220:	26 95       	lsr	r18
 222:	26 95       	lsr	r18
 224:	e6 2f       	mov	r30, r22
 226:	f0 e0       	ldi	r31, 0x00	; 0
 228:	30 e8       	ldi	r19, 0x80	; 128
 22a:	23 9f       	mul	r18, r19
 22c:	e0 0d       	add	r30, r0
 22e:	f1 1d       	adc	r31, r1
 230:	11 24       	eor	r1, r1
 232:	31 97       	sbiw	r30, 0x01	; 1
 234:	e8 0f       	add	r30, r24
 236:	f9 1f       	adc	r31, r25
 238:	47 70       	andi	r20, 0x07	; 7
 23a:	28 e0       	ldi	r18, 0x08	; 8
 23c:	24 1b       	sub	r18, r20
 23e:	81 e0       	ldi	r24, 0x01	; 1
 240:	90 e0       	ldi	r25, 0x00	; 0
 242:	02 c0       	rjmp	.+4      	; 0x248 <setpixel+0x2c>
 244:	88 0f       	add	r24, r24
 246:	99 1f       	adc	r25, r25
 248:	2a 95       	dec	r18
 24a:	e2 f7       	brpl	.-8      	; 0x244 <setpixel+0x28>
 24c:	90 81       	ld	r25, Z
 24e:	89 2b       	or	r24, r25
 250:	80 83       	st	Z, r24
 252:	08 95       	ret

00000254 <drawcircle>:

// function to draw a circle
void drawcircle(uint8_t *buff,uint8_t x0, uint8_t y0, uint8_t r,uint8_t color) {
 254:	2f 92       	push	r2
 256:	3f 92       	push	r3
 258:	4f 92       	push	r4
 25a:	5f 92       	push	r5
 25c:	6f 92       	push	r6
 25e:	7f 92       	push	r7
 260:	8f 92       	push	r8
 262:	9f 92       	push	r9
 264:	af 92       	push	r10
 266:	bf 92       	push	r11
 268:	cf 92       	push	r12
 26a:	df 92       	push	r13
 26c:	ef 92       	push	r14
 26e:	ff 92       	push	r15
 270:	0f 93       	push	r16
 272:	1f 93       	push	r17
 274:	cf 93       	push	r28
 276:	df 93       	push	r29
 278:	00 d0       	rcall	.+0      	; 0x27a <drawcircle+0x26>
 27a:	00 d0       	rcall	.+0      	; 0x27c <drawcircle+0x28>
 27c:	00 d0       	rcall	.+0      	; 0x27e <drawcircle+0x2a>
 27e:	cd b7       	in	r28, 0x3d	; 61
 280:	de b7       	in	r29, 0x3e	; 62
    
	int x = r - 1;
 282:	30 e0       	ldi	r19, 0x00	; 0
 284:	79 01       	movw	r14, r18
 286:	51 e0       	ldi	r21, 0x01	; 1
 288:	e5 1a       	sub	r14, r21
 28a:	f1 08       	sbc	r15, r1
    int y = 0;
    int dx = 3;
    int dy = 1;
    int err = dx - (r << 1);
 28c:	f9 01       	movw	r30, r18
 28e:	ee 0f       	add	r30, r30
 290:	ff 1f       	adc	r31, r31
 292:	a3 e0       	ldi	r26, 0x03	; 3
 294:	b0 e0       	ldi	r27, 0x00	; 0
 296:	5d 01       	movw	r10, r26
 298:	ae 1a       	sub	r10, r30
 29a:	bf 0a       	sbc	r11, r31

    while (x >= y)
 29c:	ff 20       	and	r15, r15
 29e:	0c f4       	brge	.+2      	; 0x2a2 <drawcircle+0x4e>
 2a0:	7f c0       	rjmp	.+254    	; 0x3a0 <drawcircle+0x14c>
 2a2:	24 2e       	mov	r2, r20
 2a4:	36 2e       	mov	r3, r22
 2a6:	9e 83       	std	Y+6, r25	; 0x06
 2a8:	8d 83       	std	Y+5, r24	; 0x05
	    }
		
	    if (err > 0) {
		    x--;
		    dx += 2;
		    err += (-r << 1) + dx;
 2aa:	31 95       	neg	r19
 2ac:	21 95       	neg	r18
 2ae:	31 09       	sbc	r19, r1
 2b0:	c9 01       	movw	r24, r18
 2b2:	88 0f       	add	r24, r24
 2b4:	99 1f       	adc	r25, r25
 2b6:	9c 83       	std	Y+4, r25	; 0x04
 2b8:	8b 83       	std	Y+3, r24	; 0x03
 2ba:	81 e0       	ldi	r24, 0x01	; 1
 2bc:	90 e0       	ldi	r25, 0x00	; 0
 2be:	9a 83       	std	Y+2, r25	; 0x02
 2c0:	89 83       	std	Y+1, r24	; 0x01
 2c2:	0f 2e       	mov	r0, r31
 2c4:	f3 e0       	ldi	r31, 0x03	; 3
 2c6:	8f 2e       	mov	r8, r31
 2c8:	91 2c       	mov	r9, r1
 2ca:	f0 2d       	mov	r31, r0
 2cc:	c1 2c       	mov	r12, r1
 2ce:	d1 2c       	mov	r13, r1
    int dy = 1;
    int err = dx - (r << 1);

    while (x >= y)
    {
	    setpixel(buff, x0 + x, y0 + y, color);
 2d0:	20 2f       	mov	r18, r16
 2d2:	72 2c       	mov	r7, r2
 2d4:	7c 0c       	add	r7, r12
 2d6:	47 2d       	mov	r20, r7
 2d8:	13 2d       	mov	r17, r3
 2da:	1e 0d       	add	r17, r14
 2dc:	61 2f       	mov	r22, r17
 2de:	8d 81       	ldd	r24, Y+5	; 0x05
 2e0:	9e 81       	ldd	r25, Y+6	; 0x06
 2e2:	0e 94 0e 01 	call	0x21c	; 0x21c <setpixel>
	    setpixel(buff, x0 + y, y0 + x, color);
 2e6:	20 2f       	mov	r18, r16
 2e8:	52 2c       	mov	r5, r2
 2ea:	5e 0c       	add	r5, r14
 2ec:	45 2d       	mov	r20, r5
 2ee:	63 2c       	mov	r6, r3
 2f0:	6c 0c       	add	r6, r12
 2f2:	66 2d       	mov	r22, r6
 2f4:	8d 81       	ldd	r24, Y+5	; 0x05
 2f6:	9e 81       	ldd	r25, Y+6	; 0x06
 2f8:	0e 94 0e 01 	call	0x21c	; 0x21c <setpixel>
	    setpixel(buff, x0 - y, y0 + x, color);
 2fc:	20 2f       	mov	r18, r16
 2fe:	45 2d       	mov	r20, r5
 300:	43 2c       	mov	r4, r3
 302:	4c 18       	sub	r4, r12
 304:	64 2d       	mov	r22, r4
 306:	8d 81       	ldd	r24, Y+5	; 0x05
 308:	9e 81       	ldd	r25, Y+6	; 0x06
 30a:	0e 94 0e 01 	call	0x21c	; 0x21c <setpixel>
	    setpixel(buff, x0 - x, y0 + y, color);
 30e:	20 2f       	mov	r18, r16
 310:	47 2d       	mov	r20, r7
 312:	53 2c       	mov	r5, r3
 314:	5e 18       	sub	r5, r14
 316:	65 2d       	mov	r22, r5
 318:	8d 81       	ldd	r24, Y+5	; 0x05
 31a:	9e 81       	ldd	r25, Y+6	; 0x06
 31c:	0e 94 0e 01 	call	0x21c	; 0x21c <setpixel>
	    setpixel(buff, x0 - x, y0 - y, color);
 320:	20 2f       	mov	r18, r16
 322:	72 2c       	mov	r7, r2
 324:	7c 18       	sub	r7, r12
 326:	47 2d       	mov	r20, r7
 328:	65 2d       	mov	r22, r5
 32a:	8d 81       	ldd	r24, Y+5	; 0x05
 32c:	9e 81       	ldd	r25, Y+6	; 0x06
 32e:	0e 94 0e 01 	call	0x21c	; 0x21c <setpixel>
	    setpixel(buff, x0 - y, y0 - x, color);
 332:	20 2f       	mov	r18, r16
 334:	52 2c       	mov	r5, r2
 336:	5e 18       	sub	r5, r14
 338:	45 2d       	mov	r20, r5
 33a:	64 2d       	mov	r22, r4
 33c:	8d 81       	ldd	r24, Y+5	; 0x05
 33e:	9e 81       	ldd	r25, Y+6	; 0x06
 340:	0e 94 0e 01 	call	0x21c	; 0x21c <setpixel>
	    setpixel(buff, x0 + y, y0 - x, color);
 344:	20 2f       	mov	r18, r16
 346:	45 2d       	mov	r20, r5
 348:	66 2d       	mov	r22, r6
 34a:	8d 81       	ldd	r24, Y+5	; 0x05
 34c:	9e 81       	ldd	r25, Y+6	; 0x06
 34e:	0e 94 0e 01 	call	0x21c	; 0x21c <setpixel>
	    setpixel(buff, x0 + x, y0 - y, color);
 352:	20 2f       	mov	r18, r16
 354:	47 2d       	mov	r20, r7
 356:	61 2f       	mov	r22, r17
 358:	8d 81       	ldd	r24, Y+5	; 0x05
 35a:	9e 81       	ldd	r25, Y+6	; 0x06
 35c:	0e 94 0e 01 	call	0x21c	; 0x21c <setpixel>

	    if (err <= 0) {
 360:	1a 14       	cp	r1, r10
 362:	1b 04       	cpc	r1, r11
 364:	6c f0       	brlt	.+26     	; 0x380 <drawcircle+0x12c>
		    y++;
 366:	9f ef       	ldi	r25, 0xFF	; 255
 368:	c9 1a       	sub	r12, r25
 36a:	d9 0a       	sbc	r13, r25
		    err += dy;
 36c:	89 81       	ldd	r24, Y+1	; 0x01
 36e:	9a 81       	ldd	r25, Y+2	; 0x02
 370:	a8 0e       	add	r10, r24
 372:	b9 1e       	adc	r11, r25
		    dy += 2;
 374:	02 96       	adiw	r24, 0x02	; 2
 376:	9a 83       	std	Y+2, r25	; 0x02
 378:	89 83       	std	Y+1, r24	; 0x01
	    }
		
	    if (err > 0) {
 37a:	1a 14       	cp	r1, r10
 37c:	1b 04       	cpc	r1, r11
 37e:	64 f4       	brge	.+24     	; 0x398 <drawcircle+0x144>
		    x--;
 380:	91 e0       	ldi	r25, 0x01	; 1
 382:	e9 1a       	sub	r14, r25
 384:	f1 08       	sbc	r15, r1
		    dx += 2;
 386:	52 e0       	ldi	r21, 0x02	; 2
 388:	85 0e       	add	r8, r21
 38a:	91 1c       	adc	r9, r1
		    err += (-r << 1) + dx;
 38c:	8b 81       	ldd	r24, Y+3	; 0x03
 38e:	9c 81       	ldd	r25, Y+4	; 0x04
 390:	88 0d       	add	r24, r8
 392:	99 1d       	adc	r25, r9
 394:	a8 0e       	add	r10, r24
 396:	b9 1e       	adc	r11, r25
    int y = 0;
    int dx = 3;
    int dy = 1;
    int err = dx - (r << 1);

    while (x >= y)
 398:	ec 14       	cp	r14, r12
 39a:	fd 04       	cpc	r15, r13
 39c:	0c f0       	brlt	.+2      	; 0x3a0 <drawcircle+0x14c>
 39e:	98 cf       	rjmp	.-208    	; 0x2d0 <drawcircle+0x7c>
		    x--;
		    dx += 2;
		    err += (-r << 1) + dx;
	    }
    }
}
 3a0:	26 96       	adiw	r28, 0x06	; 6
 3a2:	0f b6       	in	r0, 0x3f	; 63
 3a4:	f8 94       	cli
 3a6:	de bf       	out	0x3e, r29	; 62
 3a8:	0f be       	out	0x3f, r0	; 63
 3aa:	cd bf       	out	0x3d, r28	; 61
 3ac:	df 91       	pop	r29
 3ae:	cf 91       	pop	r28
 3b0:	1f 91       	pop	r17
 3b2:	0f 91       	pop	r16
 3b4:	ff 90       	pop	r15
 3b6:	ef 90       	pop	r14
 3b8:	df 90       	pop	r13
 3ba:	cf 90       	pop	r12
 3bc:	bf 90       	pop	r11
 3be:	af 90       	pop	r10
 3c0:	9f 90       	pop	r9
 3c2:	8f 90       	pop	r8
 3c4:	7f 90       	pop	r7
 3c6:	6f 90       	pop	r6
 3c8:	5f 90       	pop	r5
 3ca:	4f 90       	pop	r4
 3cc:	3f 90       	pop	r3
 3ce:	2f 90       	pop	r2
 3d0:	08 95       	ret

000003d2 <uart_putchar>:
void uart_init(void);

static FILE uart_output = FDEV_SETUP_STREAM(uart_putchar, NULL, _FDEV_SETUP_WRITE);
static FILE uart_input = FDEV_SETUP_STREAM(NULL, uart_getchar, _FDEV_SETUP_READ);

int uart_putchar(char c, FILE *stream) {
 3d2:	cf 93       	push	r28
 3d4:	c8 2f       	mov	r28, r24
	if (c == '\n') {
 3d6:	8a 30       	cpi	r24, 0x0A	; 10
 3d8:	19 f4       	brne	.+6      	; 0x3e0 <uart_putchar+0xe>
		uart_putchar('\r', stream);
 3da:	8d e0       	ldi	r24, 0x0D	; 13
 3dc:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <uart_putchar>
	}
	loop_until_bit_is_set(UCSR0A, UDRE0);
 3e0:	e0 ec       	ldi	r30, 0xC0	; 192
 3e2:	f0 e0       	ldi	r31, 0x00	; 0
 3e4:	80 81       	ld	r24, Z
 3e6:	85 ff       	sbrs	r24, 5
 3e8:	fd cf       	rjmp	.-6      	; 0x3e4 <uart_putchar+0x12>
	UDR0 = c;
 3ea:	c0 93 c6 00 	sts	0x00C6, r28	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
	return 0;
}
 3ee:	80 e0       	ldi	r24, 0x00	; 0
 3f0:	90 e0       	ldi	r25, 0x00	; 0
 3f2:	cf 91       	pop	r28
 3f4:	08 95       	ret

000003f6 <uart_getchar>:

int uart_getchar(FILE *stream) {
	loop_until_bit_is_set(UCSR0A, RXC0); /* Wait until data exists. */
 3f6:	e0 ec       	ldi	r30, 0xC0	; 192
 3f8:	f0 e0       	ldi	r31, 0x00	; 0
 3fa:	80 81       	ld	r24, Z
 3fc:	88 23       	and	r24, r24
 3fe:	ec f7       	brge	.-6      	; 0x3fa <uart_getchar+0x4>
	return UDR0;
 400:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
}
 404:	90 e0       	ldi	r25, 0x00	; 0
 406:	08 95       	ret

00000408 <uart_init>:

void uart_init(void) {
	UBRR0H = UBRRH_VALUE;
 408:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
	UBRR0L = UBRRL_VALUE;
 40c:	87 e6       	ldi	r24, 0x67	; 103
 40e:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>

	#if USE_2X
	UCSR0A |= _BV(U2X0);
	#else
	UCSR0A &= ~(_BV(U2X0));
 412:	e0 ec       	ldi	r30, 0xC0	; 192
 414:	f0 e0       	ldi	r31, 0x00	; 0
 416:	80 81       	ld	r24, Z
 418:	8d 7f       	andi	r24, 0xFD	; 253
 41a:	80 83       	st	Z, r24
	#endif

	UCSR0C = _BV(UCSZ01) | _BV(UCSZ00); /* 8-bit data */
 41c:	86 e0       	ldi	r24, 0x06	; 6
 41e:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
	UCSR0B = _BV(RXEN0) | _BV(TXEN0);   /* Enable RX and TX */
 422:	88 e1       	ldi	r24, 0x18	; 24
 424:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>

    // Redirect stdin and stdout so functions like printf and getchar work.
	stdout = &uart_output;
 428:	e6 e4       	ldi	r30, 0x46	; 70
 42a:	f5 e0       	ldi	r31, 0x05	; 5
 42c:	8e e1       	ldi	r24, 0x1E	; 30
 42e:	95 e0       	ldi	r25, 0x05	; 5
 430:	93 83       	std	Z+3, r25	; 0x03
 432:	82 83       	std	Z+2, r24	; 0x02
	stdin = &uart_input;
 434:	80 e1       	ldi	r24, 0x10	; 16
 436:	95 e0       	ldi	r25, 0x05	; 5
 438:	91 83       	std	Z+1, r25	; 0x01
 43a:	80 83       	st	Z, r24
 43c:	08 95       	ret

0000043e <main>:
char displayChar = 0;

int main(void)
{
	// setting up the gpio for backlight
	DDRD |= 0x1C;
 43e:	8a b1       	in	r24, 0x0a	; 10
 440:	8c 61       	ori	r24, 0x1C	; 28
 442:	8a b9       	out	0x0a, r24	; 10
	PORTD &= ~0x1C;
 444:	8b b1       	in	r24, 0x0b	; 11
 446:	83 7e       	andi	r24, 0xE3	; 227
 448:	8b b9       	out	0x0b, r24	; 11
	PORTD |= 0x00;
 44a:	8b b1       	in	r24, 0x0b	; 11
 44c:	8b b9       	out	0x0b, r24	; 11
	
	// lcd initialization
	lcd_init();
 44e:	0e 94 69 00 	call	0xd2	; 0xd2 <lcd_init>
	lcd_command(CMD_DISPLAY_ON);
 452:	8f ea       	ldi	r24, 0xAF	; 175
 454:	0e 94 53 00 	call	0xa6	; 0xa6 <lcd_command>
	lcd_set_brightness(0x18);
 458:	88 e1       	ldi	r24, 0x18	; 24
 45a:	0e 94 bb 00 	call	0x176	; 0x176 <lcd_set_brightness>
	write_buffer(buff);
 45e:	80 e0       	ldi	r24, 0x00	; 0
 460:	91 e0       	ldi	r25, 0x01	; 1
 462:	0e 94 c6 00 	call	0x18c	; 0x18c <write_buffer>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 466:	2f e7       	ldi	r18, 0x7F	; 127
 468:	84 e8       	ldi	r24, 0x84	; 132
 46a:	9e e1       	ldi	r25, 0x1E	; 30
 46c:	21 50       	subi	r18, 0x01	; 1
 46e:	80 40       	sbci	r24, 0x00	; 0
 470:	90 40       	sbci	r25, 0x00	; 0
 472:	e1 f7       	brne	.-8      	; 0x46c <main+0x2e>
 474:	00 c0       	rjmp	.+0      	; 0x476 <main+0x38>
 476:	00 00       	nop
	_delay_ms(10000);
	clear_buffer(buff);
 478:	80 e0       	ldi	r24, 0x00	; 0
 47a:	91 e0       	ldi	r25, 0x01	; 1
 47c:	0e 94 05 01 	call	0x20a	; 0x20a <clear_buffer>
	
	// ADC initialization
	uart_init();
 480:	0e 94 04 02 	call	0x408	; 0x408 <uart_init>
	sei();
 484:	78 94       	sei
	ADCSRA |= (1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0); // prescale /128
 486:	ea e7       	ldi	r30, 0x7A	; 122
 488:	f0 e0       	ldi	r31, 0x00	; 0
 48a:	80 81       	ld	r24, Z
 48c:	87 60       	ori	r24, 0x07	; 7
 48e:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADIE); // enable interrupt
 490:	80 81       	ld	r24, Z
 492:	88 60       	ori	r24, 0x08	; 8
 494:	80 83       	st	Z, r24
	
	uint8_t msg[] = "hello Myles";
	uint8_t* pmsg = msg; 
	
	drawcircle(buff,30,30,20,0);
 496:	00 e0       	ldi	r16, 0x00	; 0
 498:	24 e1       	ldi	r18, 0x14	; 20
 49a:	4e e1       	ldi	r20, 0x1E	; 30
 49c:	6e e1       	ldi	r22, 0x1E	; 30
 49e:	80 e0       	ldi	r24, 0x00	; 0
 4a0:	91 e0       	ldi	r25, 0x01	; 1
 4a2:	0e 94 2a 01 	call	0x254	; 0x254 <drawcircle>
	write_buffer(buff);
 4a6:	80 e0       	ldi	r24, 0x00	; 0
 4a8:	91 e0       	ldi	r25, 0x01	; 1
 4aa:	0e 94 c6 00 	call	0x18c	; 0x18c <write_buffer>
		// step 2: set Y- and Y+ to analog input and read Y-
		
		DDRC &= ~(1 << 1);
		PORTC &= ~(1 << 1); // Y+/C1 to input and disable pull-up
		
		DIDR0 |= (1 << ADC3D); // disable digital input
 4ae:	0f 2e       	mov	r0, r31
 4b0:	fe e7       	ldi	r31, 0x7E	; 126
 4b2:	8f 2e       	mov	r8, r31
 4b4:	91 2c       	mov	r9, r1
 4b6:	f0 2d       	mov	r31, r0
		
		ADMUX |= (1 << MUX0) | (1 << MUX1); // select ADC3 / Y-
 4b8:	0c e7       	ldi	r16, 0x7C	; 124
 4ba:	10 e0       	ldi	r17, 0x00	; 0
		ADCSRA |= (1 << ADEN); // enable system
 4bc:	ca e7       	ldi	r28, 0x7A	; 122
 4be:	d0 e0       	ldi	r29, 0x00	; 0
		
		ADCSRA |= (1 << ADSC); // start
		
		while(bit_is_clear(ADCSRA,ADIF)); // stall until conversion is finished
		
		int ycoord = ADC; // store ADC value as y coordinate
 4c0:	0f 2e       	mov	r0, r31
 4c2:	f8 e7       	ldi	r31, 0x78	; 120
 4c4:	af 2e       	mov	r10, r31
 4c6:	b1 2c       	mov	r11, r1
 4c8:	f0 2d       	mov	r31, r0
		ADCSRA &= ~(1 << ADEN); // disable system
		
		printf("%s", "ycoord = ");
 4ca:	0f 2e       	mov	r0, r31
 4cc:	fc e2       	ldi	r31, 0x2C	; 44
 4ce:	4f 2e       	mov	r4, r31
 4d0:	f5 e0       	ldi	r31, 0x05	; 5
 4d2:	5f 2e       	mov	r5, r31
 4d4:	f0 2d       	mov	r31, r0
 4d6:	0f 2e       	mov	r0, r31
 4d8:	f6 e3       	ldi	r31, 0x36	; 54
 4da:	cf 2e       	mov	r12, r31
 4dc:	f5 e0       	ldi	r31, 0x05	; 5
 4de:	df 2e       	mov	r13, r31
 4e0:	f0 2d       	mov	r31, r0
		printf("%d",ycoord);
 4e2:	0f 2e       	mov	r0, r31
 4e4:	f9 e3       	ldi	r31, 0x39	; 57
 4e6:	ef 2e       	mov	r14, r31
 4e8:	f5 e0       	ldi	r31, 0x05	; 5
 4ea:	ff 2e       	mov	r15, r31
 4ec:	f0 2d       	mov	r31, r0
		while(bit_is_clear(ADCSRA,ADIF)); // stall
		
		int xcoord = ADC; // store ADC val
		ADCSRA &= ~(1 << ADEN); // disable system
		
		printf("%s", "xcoord = ");
 4ee:	0f 2e       	mov	r0, r31
 4f0:	fc e3       	ldi	r31, 0x3C	; 60
 4f2:	2f 2e       	mov	r2, r31
 4f4:	f5 e0       	ldi	r31, 0x05	; 5
 4f6:	3f 2e       	mov	r3, r31
 4f8:	f0 2d       	mov	r31, r0
		// C2 -> X+
		// C3 -> Y-
		
		// step 1: set Xs digital - set X- high and X+ low
		
		DDRC |= (1 << 0) | (1 << 2); // Xs output
 4fa:	87 b1       	in	r24, 0x07	; 7
 4fc:	85 60       	ori	r24, 0x05	; 5
 4fe:	87 b9       	out	0x07, r24	; 7
		PORTC |= (1 << 0); // X-/C0 high
 500:	40 9a       	sbi	0x08, 0	; 8
		PORTC &= ~(1 << 2); // X+/C2 low
 502:	42 98       	cbi	0x08, 2	; 8
		
		// step 2: set Y- and Y+ to analog input and read Y-
		
		DDRC &= ~(1 << 1);
 504:	39 98       	cbi	0x07, 1	; 7
		PORTC &= ~(1 << 1); // Y+/C1 to input and disable pull-up
 506:	41 98       	cbi	0x08, 1	; 8
		
		DIDR0 |= (1 << ADC3D); // disable digital input
 508:	f4 01       	movw	r30, r8
 50a:	80 81       	ld	r24, Z
 50c:	88 60       	ori	r24, 0x08	; 8
 50e:	80 83       	st	Z, r24
		
		ADMUX |= (1 << MUX0) | (1 << MUX1); // select ADC3 / Y-
 510:	f8 01       	movw	r30, r16
 512:	80 81       	ld	r24, Z
 514:	83 60       	ori	r24, 0x03	; 3
 516:	80 83       	st	Z, r24
		ADCSRA |= (1 << ADEN); // enable system
 518:	88 81       	ld	r24, Y
 51a:	80 68       	ori	r24, 0x80	; 128
 51c:	88 83       	st	Y, r24
		
		ADCSRA |= (1 << ADSC); // start
 51e:	88 81       	ld	r24, Y
 520:	80 64       	ori	r24, 0x40	; 64
 522:	88 83       	st	Y, r24
		
		while(bit_is_clear(ADCSRA,ADIF)); // stall until conversion is finished
 524:	88 81       	ld	r24, Y
 526:	84 ff       	sbrs	r24, 4
 528:	fd cf       	rjmp	.-6      	; 0x524 <main+0xe6>
		
		int ycoord = ADC; // store ADC value as y coordinate
 52a:	f5 01       	movw	r30, r10
 52c:	60 80       	ld	r6, Z
 52e:	71 80       	ldd	r7, Z+1	; 0x01
		ADCSRA &= ~(1 << ADEN); // disable system
 530:	88 81       	ld	r24, Y
 532:	8f 77       	andi	r24, 0x7F	; 127
 534:	88 83       	st	Y, r24
		
		printf("%s", "ycoord = ");
 536:	5f 92       	push	r5
 538:	4f 92       	push	r4
 53a:	df 92       	push	r13
 53c:	cf 92       	push	r12
 53e:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <printf>
		printf("%d",ycoord);
 542:	7f 92       	push	r7
 544:	6f 92       	push	r6
 546:	ff 92       	push	r15
 548:	ef 92       	push	r14
 54a:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <printf>
		printf("\n");
 54e:	8a e0       	ldi	r24, 0x0A	; 10
 550:	90 e0       	ldi	r25, 0x00	; 0
 552:	0e 94 10 03 	call	0x620	; 0x620 <putchar>
		
		// step 3: Ys to digital and Y+ low and Y- high
		
		DDRC |= (1 << 1); // Y+/C1 to output
 556:	39 9a       	sbi	0x07, 1	; 7
		PORTC &= ~(1 << 1); // Y+/C1 to low
 558:	41 98       	cbi	0x08, 1	; 8
		
		DDRC |= (1 << 3); // Y-/C3 to output
 55a:	3b 9a       	sbi	0x07, 3	; 7
		PORTC |= (1 << 3); // Y-/C3 to high
 55c:	43 9a       	sbi	0x08, 3	; 8
		
		// step 4:
		
		DDRC &= ~(1 << 2);
 55e:	3a 98       	cbi	0x07, 2	; 7
		PORTC &= ~(1 << 2); // X+/C2 to input and disable pull-up
 560:	42 98       	cbi	0x08, 2	; 8
		
		DIDR0 |= (1 << ADC0D); // disable digital input
 562:	f4 01       	movw	r30, r8
 564:	80 81       	ld	r24, Z
 566:	81 60       	ori	r24, 0x01	; 1
 568:	80 83       	st	Z, r24
		
		ADMUX &= ~(1 << MUX0);
 56a:	f8 01       	movw	r30, r16
 56c:	80 81       	ld	r24, Z
 56e:	8e 7f       	andi	r24, 0xFE	; 254
 570:	80 83       	st	Z, r24
		ADMUX &= ~(1 << MUX1); // X-/C0 ADC0
 572:	80 81       	ld	r24, Z
 574:	8d 7f       	andi	r24, 0xFD	; 253
 576:	80 83       	st	Z, r24
		ADCSRA |= (1 << ADEN); // enable system
 578:	88 81       	ld	r24, Y
 57a:	80 68       	ori	r24, 0x80	; 128
 57c:	88 83       	st	Y, r24
		DIDR0 |= (1 << ADC0D); // disable digital input
 57e:	f4 01       	movw	r30, r8
 580:	80 81       	ld	r24, Z
 582:	81 60       	ori	r24, 0x01	; 1
 584:	80 83       	st	Z, r24
		
		ADCSRA |= (1 << ADSC); // start.
 586:	88 81       	ld	r24, Y
 588:	80 64       	ori	r24, 0x40	; 64
 58a:	88 83       	st	Y, r24
		
		while(bit_is_clear(ADCSRA,ADIF)); // stall
 58c:	8d b7       	in	r24, 0x3d	; 61
 58e:	9e b7       	in	r25, 0x3e	; 62
 590:	08 96       	adiw	r24, 0x08	; 8
 592:	0f b6       	in	r0, 0x3f	; 63
 594:	f8 94       	cli
 596:	9e bf       	out	0x3e, r25	; 62
 598:	0f be       	out	0x3f, r0	; 63
 59a:	8d bf       	out	0x3d, r24	; 61
 59c:	88 81       	ld	r24, Y
 59e:	84 ff       	sbrs	r24, 4
 5a0:	fd cf       	rjmp	.-6      	; 0x59c <main+0x15e>
		
		int xcoord = ADC; // store ADC val
 5a2:	f5 01       	movw	r30, r10
 5a4:	60 80       	ld	r6, Z
 5a6:	71 80       	ldd	r7, Z+1	; 0x01
		ADCSRA &= ~(1 << ADEN); // disable system
 5a8:	88 81       	ld	r24, Y
 5aa:	8f 77       	andi	r24, 0x7F	; 127
 5ac:	88 83       	st	Y, r24
		
		printf("%s", "xcoord = ");
 5ae:	3f 92       	push	r3
 5b0:	2f 92       	push	r2
 5b2:	df 92       	push	r13
 5b4:	cf 92       	push	r12
 5b6:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <printf>
		printf("%d",xcoord);
 5ba:	7f 92       	push	r7
 5bc:	6f 92       	push	r6
 5be:	ff 92       	push	r15
 5c0:	ef 92       	push	r14
 5c2:	0e 94 fa 02 	call	0x5f4	; 0x5f4 <printf>
		printf("\n");
 5c6:	8a e0       	ldi	r24, 0x0A	; 10
 5c8:	90 e0       	ldi	r25, 0x00	; 0
 5ca:	0e 94 10 03 	call	0x620	; 0x620 <putchar>

	}
 5ce:	8d b7       	in	r24, 0x3d	; 61
 5d0:	9e b7       	in	r25, 0x3e	; 62
 5d2:	08 96       	adiw	r24, 0x08	; 8
 5d4:	0f b6       	in	r0, 0x3f	; 63
 5d6:	f8 94       	cli
 5d8:	9e bf       	out	0x3e, r25	; 62
 5da:	0f be       	out	0x3f, r0	; 63
 5dc:	8d bf       	out	0x3d, r24	; 61
 5de:	8d cf       	rjmp	.-230    	; 0x4fa <main+0xbc>

000005e0 <__vector_21>:
	
}

ISR(ADC_vect) {
 5e0:	1f 92       	push	r1
 5e2:	0f 92       	push	r0
 5e4:	0f b6       	in	r0, 0x3f	; 63
 5e6:	0f 92       	push	r0
 5e8:	11 24       	eor	r1, r1

}
 5ea:	0f 90       	pop	r0
 5ec:	0f be       	out	0x3f, r0	; 63
 5ee:	0f 90       	pop	r0
 5f0:	1f 90       	pop	r1
 5f2:	18 95       	reti

000005f4 <printf>:
 5f4:	a0 e0       	ldi	r26, 0x00	; 0
 5f6:	b0 e0       	ldi	r27, 0x00	; 0
 5f8:	e0 e0       	ldi	r30, 0x00	; 0
 5fa:	f3 e0       	ldi	r31, 0x03	; 3
 5fc:	0c 94 b8 05 	jmp	0xb70	; 0xb70 <__prologue_saves__+0x20>
 600:	ae 01       	movw	r20, r28
 602:	4b 5f       	subi	r20, 0xFB	; 251
 604:	5f 4f       	sbci	r21, 0xFF	; 255
 606:	fa 01       	movw	r30, r20
 608:	61 91       	ld	r22, Z+
 60a:	71 91       	ld	r23, Z+
 60c:	af 01       	movw	r20, r30
 60e:	80 91 48 05 	lds	r24, 0x0548	; 0x800548 <__data_end+0x2>
 612:	90 91 49 05 	lds	r25, 0x0549	; 0x800549 <__data_end+0x3>
 616:	0e 94 17 03 	call	0x62e	; 0x62e <vfprintf>
 61a:	e2 e0       	ldi	r30, 0x02	; 2
 61c:	0c 94 d4 05 	jmp	0xba8	; 0xba8 <__epilogue_restores__+0x20>

00000620 <putchar>:
 620:	60 91 48 05 	lds	r22, 0x0548	; 0x800548 <__data_end+0x2>
 624:	70 91 49 05 	lds	r23, 0x0549	; 0x800549 <__data_end+0x3>
 628:	0e 94 0e 05 	call	0xa1c	; 0xa1c <fputc>
 62c:	08 95       	ret

0000062e <vfprintf>:
 62e:	ab e0       	ldi	r26, 0x0B	; 11
 630:	b0 e0       	ldi	r27, 0x00	; 0
 632:	ed e1       	ldi	r30, 0x1D	; 29
 634:	f3 e0       	ldi	r31, 0x03	; 3
 636:	0c 94 a8 05 	jmp	0xb50	; 0xb50 <__prologue_saves__>
 63a:	6c 01       	movw	r12, r24
 63c:	7b 01       	movw	r14, r22
 63e:	8a 01       	movw	r16, r20
 640:	fc 01       	movw	r30, r24
 642:	17 82       	std	Z+7, r1	; 0x07
 644:	16 82       	std	Z+6, r1	; 0x06
 646:	83 81       	ldd	r24, Z+3	; 0x03
 648:	81 ff       	sbrs	r24, 1
 64a:	cc c1       	rjmp	.+920    	; 0x9e4 <__stack+0xe5>
 64c:	ce 01       	movw	r24, r28
 64e:	01 96       	adiw	r24, 0x01	; 1
 650:	3c 01       	movw	r6, r24
 652:	f6 01       	movw	r30, r12
 654:	93 81       	ldd	r25, Z+3	; 0x03
 656:	f7 01       	movw	r30, r14
 658:	93 fd       	sbrc	r25, 3
 65a:	85 91       	lpm	r24, Z+
 65c:	93 ff       	sbrs	r25, 3
 65e:	81 91       	ld	r24, Z+
 660:	7f 01       	movw	r14, r30
 662:	88 23       	and	r24, r24
 664:	09 f4       	brne	.+2      	; 0x668 <vfprintf+0x3a>
 666:	ba c1       	rjmp	.+884    	; 0x9dc <__stack+0xdd>
 668:	85 32       	cpi	r24, 0x25	; 37
 66a:	39 f4       	brne	.+14     	; 0x67a <vfprintf+0x4c>
 66c:	93 fd       	sbrc	r25, 3
 66e:	85 91       	lpm	r24, Z+
 670:	93 ff       	sbrs	r25, 3
 672:	81 91       	ld	r24, Z+
 674:	7f 01       	movw	r14, r30
 676:	85 32       	cpi	r24, 0x25	; 37
 678:	29 f4       	brne	.+10     	; 0x684 <vfprintf+0x56>
 67a:	b6 01       	movw	r22, r12
 67c:	90 e0       	ldi	r25, 0x00	; 0
 67e:	0e 94 0e 05 	call	0xa1c	; 0xa1c <fputc>
 682:	e7 cf       	rjmp	.-50     	; 0x652 <vfprintf+0x24>
 684:	91 2c       	mov	r9, r1
 686:	21 2c       	mov	r2, r1
 688:	31 2c       	mov	r3, r1
 68a:	ff e1       	ldi	r31, 0x1F	; 31
 68c:	f3 15       	cp	r31, r3
 68e:	d8 f0       	brcs	.+54     	; 0x6c6 <vfprintf+0x98>
 690:	8b 32       	cpi	r24, 0x2B	; 43
 692:	79 f0       	breq	.+30     	; 0x6b2 <vfprintf+0x84>
 694:	38 f4       	brcc	.+14     	; 0x6a4 <vfprintf+0x76>
 696:	80 32       	cpi	r24, 0x20	; 32
 698:	79 f0       	breq	.+30     	; 0x6b8 <vfprintf+0x8a>
 69a:	83 32       	cpi	r24, 0x23	; 35
 69c:	a1 f4       	brne	.+40     	; 0x6c6 <vfprintf+0x98>
 69e:	23 2d       	mov	r18, r3
 6a0:	20 61       	ori	r18, 0x10	; 16
 6a2:	1d c0       	rjmp	.+58     	; 0x6de <vfprintf+0xb0>
 6a4:	8d 32       	cpi	r24, 0x2D	; 45
 6a6:	61 f0       	breq	.+24     	; 0x6c0 <vfprintf+0x92>
 6a8:	80 33       	cpi	r24, 0x30	; 48
 6aa:	69 f4       	brne	.+26     	; 0x6c6 <vfprintf+0x98>
 6ac:	23 2d       	mov	r18, r3
 6ae:	21 60       	ori	r18, 0x01	; 1
 6b0:	16 c0       	rjmp	.+44     	; 0x6de <vfprintf+0xb0>
 6b2:	83 2d       	mov	r24, r3
 6b4:	82 60       	ori	r24, 0x02	; 2
 6b6:	38 2e       	mov	r3, r24
 6b8:	e3 2d       	mov	r30, r3
 6ba:	e4 60       	ori	r30, 0x04	; 4
 6bc:	3e 2e       	mov	r3, r30
 6be:	2a c0       	rjmp	.+84     	; 0x714 <vfprintf+0xe6>
 6c0:	f3 2d       	mov	r31, r3
 6c2:	f8 60       	ori	r31, 0x08	; 8
 6c4:	1d c0       	rjmp	.+58     	; 0x700 <vfprintf+0xd2>
 6c6:	37 fc       	sbrc	r3, 7
 6c8:	2d c0       	rjmp	.+90     	; 0x724 <vfprintf+0xf6>
 6ca:	20 ed       	ldi	r18, 0xD0	; 208
 6cc:	28 0f       	add	r18, r24
 6ce:	2a 30       	cpi	r18, 0x0A	; 10
 6d0:	40 f0       	brcs	.+16     	; 0x6e2 <vfprintf+0xb4>
 6d2:	8e 32       	cpi	r24, 0x2E	; 46
 6d4:	b9 f4       	brne	.+46     	; 0x704 <vfprintf+0xd6>
 6d6:	36 fc       	sbrc	r3, 6
 6d8:	81 c1       	rjmp	.+770    	; 0x9dc <__stack+0xdd>
 6da:	23 2d       	mov	r18, r3
 6dc:	20 64       	ori	r18, 0x40	; 64
 6de:	32 2e       	mov	r3, r18
 6e0:	19 c0       	rjmp	.+50     	; 0x714 <vfprintf+0xe6>
 6e2:	36 fe       	sbrs	r3, 6
 6e4:	06 c0       	rjmp	.+12     	; 0x6f2 <vfprintf+0xc4>
 6e6:	8a e0       	ldi	r24, 0x0A	; 10
 6e8:	98 9e       	mul	r9, r24
 6ea:	20 0d       	add	r18, r0
 6ec:	11 24       	eor	r1, r1
 6ee:	92 2e       	mov	r9, r18
 6f0:	11 c0       	rjmp	.+34     	; 0x714 <vfprintf+0xe6>
 6f2:	ea e0       	ldi	r30, 0x0A	; 10
 6f4:	2e 9e       	mul	r2, r30
 6f6:	20 0d       	add	r18, r0
 6f8:	11 24       	eor	r1, r1
 6fa:	22 2e       	mov	r2, r18
 6fc:	f3 2d       	mov	r31, r3
 6fe:	f0 62       	ori	r31, 0x20	; 32
 700:	3f 2e       	mov	r3, r31
 702:	08 c0       	rjmp	.+16     	; 0x714 <vfprintf+0xe6>
 704:	8c 36       	cpi	r24, 0x6C	; 108
 706:	21 f4       	brne	.+8      	; 0x710 <vfprintf+0xe2>
 708:	83 2d       	mov	r24, r3
 70a:	80 68       	ori	r24, 0x80	; 128
 70c:	38 2e       	mov	r3, r24
 70e:	02 c0       	rjmp	.+4      	; 0x714 <vfprintf+0xe6>
 710:	88 36       	cpi	r24, 0x68	; 104
 712:	41 f4       	brne	.+16     	; 0x724 <vfprintf+0xf6>
 714:	f7 01       	movw	r30, r14
 716:	93 fd       	sbrc	r25, 3
 718:	85 91       	lpm	r24, Z+
 71a:	93 ff       	sbrs	r25, 3
 71c:	81 91       	ld	r24, Z+
 71e:	7f 01       	movw	r14, r30
 720:	81 11       	cpse	r24, r1
 722:	b3 cf       	rjmp	.-154    	; 0x68a <vfprintf+0x5c>
 724:	98 2f       	mov	r25, r24
 726:	9f 7d       	andi	r25, 0xDF	; 223
 728:	95 54       	subi	r25, 0x45	; 69
 72a:	93 30       	cpi	r25, 0x03	; 3
 72c:	28 f4       	brcc	.+10     	; 0x738 <vfprintf+0x10a>
 72e:	0c 5f       	subi	r16, 0xFC	; 252
 730:	1f 4f       	sbci	r17, 0xFF	; 255
 732:	9f e3       	ldi	r25, 0x3F	; 63
 734:	99 83       	std	Y+1, r25	; 0x01
 736:	0d c0       	rjmp	.+26     	; 0x752 <vfprintf+0x124>
 738:	83 36       	cpi	r24, 0x63	; 99
 73a:	31 f0       	breq	.+12     	; 0x748 <vfprintf+0x11a>
 73c:	83 37       	cpi	r24, 0x73	; 115
 73e:	71 f0       	breq	.+28     	; 0x75c <vfprintf+0x12e>
 740:	83 35       	cpi	r24, 0x53	; 83
 742:	09 f0       	breq	.+2      	; 0x746 <vfprintf+0x118>
 744:	59 c0       	rjmp	.+178    	; 0x7f8 <vfprintf+0x1ca>
 746:	21 c0       	rjmp	.+66     	; 0x78a <vfprintf+0x15c>
 748:	f8 01       	movw	r30, r16
 74a:	80 81       	ld	r24, Z
 74c:	89 83       	std	Y+1, r24	; 0x01
 74e:	0e 5f       	subi	r16, 0xFE	; 254
 750:	1f 4f       	sbci	r17, 0xFF	; 255
 752:	88 24       	eor	r8, r8
 754:	83 94       	inc	r8
 756:	91 2c       	mov	r9, r1
 758:	53 01       	movw	r10, r6
 75a:	13 c0       	rjmp	.+38     	; 0x782 <vfprintf+0x154>
 75c:	28 01       	movw	r4, r16
 75e:	f2 e0       	ldi	r31, 0x02	; 2
 760:	4f 0e       	add	r4, r31
 762:	51 1c       	adc	r5, r1
 764:	f8 01       	movw	r30, r16
 766:	a0 80       	ld	r10, Z
 768:	b1 80       	ldd	r11, Z+1	; 0x01
 76a:	36 fe       	sbrs	r3, 6
 76c:	03 c0       	rjmp	.+6      	; 0x774 <vfprintf+0x146>
 76e:	69 2d       	mov	r22, r9
 770:	70 e0       	ldi	r23, 0x00	; 0
 772:	02 c0       	rjmp	.+4      	; 0x778 <vfprintf+0x14a>
 774:	6f ef       	ldi	r22, 0xFF	; 255
 776:	7f ef       	ldi	r23, 0xFF	; 255
 778:	c5 01       	movw	r24, r10
 77a:	0e 94 03 05 	call	0xa06	; 0xa06 <strnlen>
 77e:	4c 01       	movw	r8, r24
 780:	82 01       	movw	r16, r4
 782:	f3 2d       	mov	r31, r3
 784:	ff 77       	andi	r31, 0x7F	; 127
 786:	3f 2e       	mov	r3, r31
 788:	16 c0       	rjmp	.+44     	; 0x7b6 <vfprintf+0x188>
 78a:	28 01       	movw	r4, r16
 78c:	22 e0       	ldi	r18, 0x02	; 2
 78e:	42 0e       	add	r4, r18
 790:	51 1c       	adc	r5, r1
 792:	f8 01       	movw	r30, r16
 794:	a0 80       	ld	r10, Z
 796:	b1 80       	ldd	r11, Z+1	; 0x01
 798:	36 fe       	sbrs	r3, 6
 79a:	03 c0       	rjmp	.+6      	; 0x7a2 <vfprintf+0x174>
 79c:	69 2d       	mov	r22, r9
 79e:	70 e0       	ldi	r23, 0x00	; 0
 7a0:	02 c0       	rjmp	.+4      	; 0x7a6 <vfprintf+0x178>
 7a2:	6f ef       	ldi	r22, 0xFF	; 255
 7a4:	7f ef       	ldi	r23, 0xFF	; 255
 7a6:	c5 01       	movw	r24, r10
 7a8:	0e 94 f8 04 	call	0x9f0	; 0x9f0 <strnlen_P>
 7ac:	4c 01       	movw	r8, r24
 7ae:	f3 2d       	mov	r31, r3
 7b0:	f0 68       	ori	r31, 0x80	; 128
 7b2:	3f 2e       	mov	r3, r31
 7b4:	82 01       	movw	r16, r4
 7b6:	33 fc       	sbrc	r3, 3
 7b8:	1b c0       	rjmp	.+54     	; 0x7f0 <vfprintf+0x1c2>
 7ba:	82 2d       	mov	r24, r2
 7bc:	90 e0       	ldi	r25, 0x00	; 0
 7be:	88 16       	cp	r8, r24
 7c0:	99 06       	cpc	r9, r25
 7c2:	b0 f4       	brcc	.+44     	; 0x7f0 <vfprintf+0x1c2>
 7c4:	b6 01       	movw	r22, r12
 7c6:	80 e2       	ldi	r24, 0x20	; 32
 7c8:	90 e0       	ldi	r25, 0x00	; 0
 7ca:	0e 94 0e 05 	call	0xa1c	; 0xa1c <fputc>
 7ce:	2a 94       	dec	r2
 7d0:	f4 cf       	rjmp	.-24     	; 0x7ba <vfprintf+0x18c>
 7d2:	f5 01       	movw	r30, r10
 7d4:	37 fc       	sbrc	r3, 7
 7d6:	85 91       	lpm	r24, Z+
 7d8:	37 fe       	sbrs	r3, 7
 7da:	81 91       	ld	r24, Z+
 7dc:	5f 01       	movw	r10, r30
 7de:	b6 01       	movw	r22, r12
 7e0:	90 e0       	ldi	r25, 0x00	; 0
 7e2:	0e 94 0e 05 	call	0xa1c	; 0xa1c <fputc>
 7e6:	21 10       	cpse	r2, r1
 7e8:	2a 94       	dec	r2
 7ea:	21 e0       	ldi	r18, 0x01	; 1
 7ec:	82 1a       	sub	r8, r18
 7ee:	91 08       	sbc	r9, r1
 7f0:	81 14       	cp	r8, r1
 7f2:	91 04       	cpc	r9, r1
 7f4:	71 f7       	brne	.-36     	; 0x7d2 <vfprintf+0x1a4>
 7f6:	e8 c0       	rjmp	.+464    	; 0x9c8 <__stack+0xc9>
 7f8:	84 36       	cpi	r24, 0x64	; 100
 7fa:	11 f0       	breq	.+4      	; 0x800 <vfprintf+0x1d2>
 7fc:	89 36       	cpi	r24, 0x69	; 105
 7fe:	41 f5       	brne	.+80     	; 0x850 <vfprintf+0x222>
 800:	f8 01       	movw	r30, r16
 802:	37 fe       	sbrs	r3, 7
 804:	07 c0       	rjmp	.+14     	; 0x814 <vfprintf+0x1e6>
 806:	60 81       	ld	r22, Z
 808:	71 81       	ldd	r23, Z+1	; 0x01
 80a:	82 81       	ldd	r24, Z+2	; 0x02
 80c:	93 81       	ldd	r25, Z+3	; 0x03
 80e:	0c 5f       	subi	r16, 0xFC	; 252
 810:	1f 4f       	sbci	r17, 0xFF	; 255
 812:	08 c0       	rjmp	.+16     	; 0x824 <vfprintf+0x1f6>
 814:	60 81       	ld	r22, Z
 816:	71 81       	ldd	r23, Z+1	; 0x01
 818:	07 2e       	mov	r0, r23
 81a:	00 0c       	add	r0, r0
 81c:	88 0b       	sbc	r24, r24
 81e:	99 0b       	sbc	r25, r25
 820:	0e 5f       	subi	r16, 0xFE	; 254
 822:	1f 4f       	sbci	r17, 0xFF	; 255
 824:	f3 2d       	mov	r31, r3
 826:	ff 76       	andi	r31, 0x6F	; 111
 828:	3f 2e       	mov	r3, r31
 82a:	97 ff       	sbrs	r25, 7
 82c:	09 c0       	rjmp	.+18     	; 0x840 <vfprintf+0x212>
 82e:	90 95       	com	r25
 830:	80 95       	com	r24
 832:	70 95       	com	r23
 834:	61 95       	neg	r22
 836:	7f 4f       	sbci	r23, 0xFF	; 255
 838:	8f 4f       	sbci	r24, 0xFF	; 255
 83a:	9f 4f       	sbci	r25, 0xFF	; 255
 83c:	f0 68       	ori	r31, 0x80	; 128
 83e:	3f 2e       	mov	r3, r31
 840:	2a e0       	ldi	r18, 0x0A	; 10
 842:	30 e0       	ldi	r19, 0x00	; 0
 844:	a3 01       	movw	r20, r6
 846:	0e 94 4a 05 	call	0xa94	; 0xa94 <__ultoa_invert>
 84a:	88 2e       	mov	r8, r24
 84c:	86 18       	sub	r8, r6
 84e:	45 c0       	rjmp	.+138    	; 0x8da <vfprintf+0x2ac>
 850:	85 37       	cpi	r24, 0x75	; 117
 852:	31 f4       	brne	.+12     	; 0x860 <vfprintf+0x232>
 854:	23 2d       	mov	r18, r3
 856:	2f 7e       	andi	r18, 0xEF	; 239
 858:	b2 2e       	mov	r11, r18
 85a:	2a e0       	ldi	r18, 0x0A	; 10
 85c:	30 e0       	ldi	r19, 0x00	; 0
 85e:	25 c0       	rjmp	.+74     	; 0x8aa <vfprintf+0x27c>
 860:	93 2d       	mov	r25, r3
 862:	99 7f       	andi	r25, 0xF9	; 249
 864:	b9 2e       	mov	r11, r25
 866:	8f 36       	cpi	r24, 0x6F	; 111
 868:	c1 f0       	breq	.+48     	; 0x89a <vfprintf+0x26c>
 86a:	18 f4       	brcc	.+6      	; 0x872 <vfprintf+0x244>
 86c:	88 35       	cpi	r24, 0x58	; 88
 86e:	79 f0       	breq	.+30     	; 0x88e <vfprintf+0x260>
 870:	b5 c0       	rjmp	.+362    	; 0x9dc <__stack+0xdd>
 872:	80 37       	cpi	r24, 0x70	; 112
 874:	19 f0       	breq	.+6      	; 0x87c <vfprintf+0x24e>
 876:	88 37       	cpi	r24, 0x78	; 120
 878:	21 f0       	breq	.+8      	; 0x882 <vfprintf+0x254>
 87a:	b0 c0       	rjmp	.+352    	; 0x9dc <__stack+0xdd>
 87c:	e9 2f       	mov	r30, r25
 87e:	e0 61       	ori	r30, 0x10	; 16
 880:	be 2e       	mov	r11, r30
 882:	b4 fe       	sbrs	r11, 4
 884:	0d c0       	rjmp	.+26     	; 0x8a0 <vfprintf+0x272>
 886:	fb 2d       	mov	r31, r11
 888:	f4 60       	ori	r31, 0x04	; 4
 88a:	bf 2e       	mov	r11, r31
 88c:	09 c0       	rjmp	.+18     	; 0x8a0 <vfprintf+0x272>
 88e:	34 fe       	sbrs	r3, 4
 890:	0a c0       	rjmp	.+20     	; 0x8a6 <vfprintf+0x278>
 892:	29 2f       	mov	r18, r25
 894:	26 60       	ori	r18, 0x06	; 6
 896:	b2 2e       	mov	r11, r18
 898:	06 c0       	rjmp	.+12     	; 0x8a6 <vfprintf+0x278>
 89a:	28 e0       	ldi	r18, 0x08	; 8
 89c:	30 e0       	ldi	r19, 0x00	; 0
 89e:	05 c0       	rjmp	.+10     	; 0x8aa <vfprintf+0x27c>
 8a0:	20 e1       	ldi	r18, 0x10	; 16
 8a2:	30 e0       	ldi	r19, 0x00	; 0
 8a4:	02 c0       	rjmp	.+4      	; 0x8aa <vfprintf+0x27c>
 8a6:	20 e1       	ldi	r18, 0x10	; 16
 8a8:	32 e0       	ldi	r19, 0x02	; 2
 8aa:	f8 01       	movw	r30, r16
 8ac:	b7 fe       	sbrs	r11, 7
 8ae:	07 c0       	rjmp	.+14     	; 0x8be <vfprintf+0x290>
 8b0:	60 81       	ld	r22, Z
 8b2:	71 81       	ldd	r23, Z+1	; 0x01
 8b4:	82 81       	ldd	r24, Z+2	; 0x02
 8b6:	93 81       	ldd	r25, Z+3	; 0x03
 8b8:	0c 5f       	subi	r16, 0xFC	; 252
 8ba:	1f 4f       	sbci	r17, 0xFF	; 255
 8bc:	06 c0       	rjmp	.+12     	; 0x8ca <vfprintf+0x29c>
 8be:	60 81       	ld	r22, Z
 8c0:	71 81       	ldd	r23, Z+1	; 0x01
 8c2:	80 e0       	ldi	r24, 0x00	; 0
 8c4:	90 e0       	ldi	r25, 0x00	; 0
 8c6:	0e 5f       	subi	r16, 0xFE	; 254
 8c8:	1f 4f       	sbci	r17, 0xFF	; 255
 8ca:	a3 01       	movw	r20, r6
 8cc:	0e 94 4a 05 	call	0xa94	; 0xa94 <__ultoa_invert>
 8d0:	88 2e       	mov	r8, r24
 8d2:	86 18       	sub	r8, r6
 8d4:	fb 2d       	mov	r31, r11
 8d6:	ff 77       	andi	r31, 0x7F	; 127
 8d8:	3f 2e       	mov	r3, r31
 8da:	36 fe       	sbrs	r3, 6
 8dc:	0d c0       	rjmp	.+26     	; 0x8f8 <vfprintf+0x2ca>
 8de:	23 2d       	mov	r18, r3
 8e0:	2e 7f       	andi	r18, 0xFE	; 254
 8e2:	a2 2e       	mov	r10, r18
 8e4:	89 14       	cp	r8, r9
 8e6:	58 f4       	brcc	.+22     	; 0x8fe <vfprintf+0x2d0>
 8e8:	34 fe       	sbrs	r3, 4
 8ea:	0b c0       	rjmp	.+22     	; 0x902 <__stack+0x3>
 8ec:	32 fc       	sbrc	r3, 2
 8ee:	09 c0       	rjmp	.+18     	; 0x902 <__stack+0x3>
 8f0:	83 2d       	mov	r24, r3
 8f2:	8e 7e       	andi	r24, 0xEE	; 238
 8f4:	a8 2e       	mov	r10, r24
 8f6:	05 c0       	rjmp	.+10     	; 0x902 <__stack+0x3>
 8f8:	b8 2c       	mov	r11, r8
 8fa:	a3 2c       	mov	r10, r3
 8fc:	03 c0       	rjmp	.+6      	; 0x904 <__stack+0x5>
 8fe:	b8 2c       	mov	r11, r8
 900:	01 c0       	rjmp	.+2      	; 0x904 <__stack+0x5>
 902:	b9 2c       	mov	r11, r9
 904:	a4 fe       	sbrs	r10, 4
 906:	0f c0       	rjmp	.+30     	; 0x926 <__stack+0x27>
 908:	fe 01       	movw	r30, r28
 90a:	e8 0d       	add	r30, r8
 90c:	f1 1d       	adc	r31, r1
 90e:	80 81       	ld	r24, Z
 910:	80 33       	cpi	r24, 0x30	; 48
 912:	21 f4       	brne	.+8      	; 0x91c <__stack+0x1d>
 914:	9a 2d       	mov	r25, r10
 916:	99 7e       	andi	r25, 0xE9	; 233
 918:	a9 2e       	mov	r10, r25
 91a:	09 c0       	rjmp	.+18     	; 0x92e <__stack+0x2f>
 91c:	a2 fe       	sbrs	r10, 2
 91e:	06 c0       	rjmp	.+12     	; 0x92c <__stack+0x2d>
 920:	b3 94       	inc	r11
 922:	b3 94       	inc	r11
 924:	04 c0       	rjmp	.+8      	; 0x92e <__stack+0x2f>
 926:	8a 2d       	mov	r24, r10
 928:	86 78       	andi	r24, 0x86	; 134
 92a:	09 f0       	breq	.+2      	; 0x92e <__stack+0x2f>
 92c:	b3 94       	inc	r11
 92e:	a3 fc       	sbrc	r10, 3
 930:	11 c0       	rjmp	.+34     	; 0x954 <__stack+0x55>
 932:	a0 fe       	sbrs	r10, 0
 934:	06 c0       	rjmp	.+12     	; 0x942 <__stack+0x43>
 936:	b2 14       	cp	r11, r2
 938:	88 f4       	brcc	.+34     	; 0x95c <__stack+0x5d>
 93a:	28 0c       	add	r2, r8
 93c:	92 2c       	mov	r9, r2
 93e:	9b 18       	sub	r9, r11
 940:	0e c0       	rjmp	.+28     	; 0x95e <__stack+0x5f>
 942:	b2 14       	cp	r11, r2
 944:	60 f4       	brcc	.+24     	; 0x95e <__stack+0x5f>
 946:	b6 01       	movw	r22, r12
 948:	80 e2       	ldi	r24, 0x20	; 32
 94a:	90 e0       	ldi	r25, 0x00	; 0
 94c:	0e 94 0e 05 	call	0xa1c	; 0xa1c <fputc>
 950:	b3 94       	inc	r11
 952:	f7 cf       	rjmp	.-18     	; 0x942 <__stack+0x43>
 954:	b2 14       	cp	r11, r2
 956:	18 f4       	brcc	.+6      	; 0x95e <__stack+0x5f>
 958:	2b 18       	sub	r2, r11
 95a:	02 c0       	rjmp	.+4      	; 0x960 <__stack+0x61>
 95c:	98 2c       	mov	r9, r8
 95e:	21 2c       	mov	r2, r1
 960:	a4 fe       	sbrs	r10, 4
 962:	10 c0       	rjmp	.+32     	; 0x984 <__stack+0x85>
 964:	b6 01       	movw	r22, r12
 966:	80 e3       	ldi	r24, 0x30	; 48
 968:	90 e0       	ldi	r25, 0x00	; 0
 96a:	0e 94 0e 05 	call	0xa1c	; 0xa1c <fputc>
 96e:	a2 fe       	sbrs	r10, 2
 970:	17 c0       	rjmp	.+46     	; 0x9a0 <__stack+0xa1>
 972:	a1 fc       	sbrc	r10, 1
 974:	03 c0       	rjmp	.+6      	; 0x97c <__stack+0x7d>
 976:	88 e7       	ldi	r24, 0x78	; 120
 978:	90 e0       	ldi	r25, 0x00	; 0
 97a:	02 c0       	rjmp	.+4      	; 0x980 <__stack+0x81>
 97c:	88 e5       	ldi	r24, 0x58	; 88
 97e:	90 e0       	ldi	r25, 0x00	; 0
 980:	b6 01       	movw	r22, r12
 982:	0c c0       	rjmp	.+24     	; 0x99c <__stack+0x9d>
 984:	8a 2d       	mov	r24, r10
 986:	86 78       	andi	r24, 0x86	; 134
 988:	59 f0       	breq	.+22     	; 0x9a0 <__stack+0xa1>
 98a:	a1 fe       	sbrs	r10, 1
 98c:	02 c0       	rjmp	.+4      	; 0x992 <__stack+0x93>
 98e:	8b e2       	ldi	r24, 0x2B	; 43
 990:	01 c0       	rjmp	.+2      	; 0x994 <__stack+0x95>
 992:	80 e2       	ldi	r24, 0x20	; 32
 994:	a7 fc       	sbrc	r10, 7
 996:	8d e2       	ldi	r24, 0x2D	; 45
 998:	b6 01       	movw	r22, r12
 99a:	90 e0       	ldi	r25, 0x00	; 0
 99c:	0e 94 0e 05 	call	0xa1c	; 0xa1c <fputc>
 9a0:	89 14       	cp	r8, r9
 9a2:	38 f4       	brcc	.+14     	; 0x9b2 <__stack+0xb3>
 9a4:	b6 01       	movw	r22, r12
 9a6:	80 e3       	ldi	r24, 0x30	; 48
 9a8:	90 e0       	ldi	r25, 0x00	; 0
 9aa:	0e 94 0e 05 	call	0xa1c	; 0xa1c <fputc>
 9ae:	9a 94       	dec	r9
 9b0:	f7 cf       	rjmp	.-18     	; 0x9a0 <__stack+0xa1>
 9b2:	8a 94       	dec	r8
 9b4:	f3 01       	movw	r30, r6
 9b6:	e8 0d       	add	r30, r8
 9b8:	f1 1d       	adc	r31, r1
 9ba:	80 81       	ld	r24, Z
 9bc:	b6 01       	movw	r22, r12
 9be:	90 e0       	ldi	r25, 0x00	; 0
 9c0:	0e 94 0e 05 	call	0xa1c	; 0xa1c <fputc>
 9c4:	81 10       	cpse	r8, r1
 9c6:	f5 cf       	rjmp	.-22     	; 0x9b2 <__stack+0xb3>
 9c8:	22 20       	and	r2, r2
 9ca:	09 f4       	brne	.+2      	; 0x9ce <__stack+0xcf>
 9cc:	42 ce       	rjmp	.-892    	; 0x652 <vfprintf+0x24>
 9ce:	b6 01       	movw	r22, r12
 9d0:	80 e2       	ldi	r24, 0x20	; 32
 9d2:	90 e0       	ldi	r25, 0x00	; 0
 9d4:	0e 94 0e 05 	call	0xa1c	; 0xa1c <fputc>
 9d8:	2a 94       	dec	r2
 9da:	f6 cf       	rjmp	.-20     	; 0x9c8 <__stack+0xc9>
 9dc:	f6 01       	movw	r30, r12
 9de:	86 81       	ldd	r24, Z+6	; 0x06
 9e0:	97 81       	ldd	r25, Z+7	; 0x07
 9e2:	02 c0       	rjmp	.+4      	; 0x9e8 <__stack+0xe9>
 9e4:	8f ef       	ldi	r24, 0xFF	; 255
 9e6:	9f ef       	ldi	r25, 0xFF	; 255
 9e8:	2b 96       	adiw	r28, 0x0b	; 11
 9ea:	e2 e1       	ldi	r30, 0x12	; 18
 9ec:	0c 94 c4 05 	jmp	0xb88	; 0xb88 <__epilogue_restores__>

000009f0 <strnlen_P>:
 9f0:	fc 01       	movw	r30, r24
 9f2:	05 90       	lpm	r0, Z+
 9f4:	61 50       	subi	r22, 0x01	; 1
 9f6:	70 40       	sbci	r23, 0x00	; 0
 9f8:	01 10       	cpse	r0, r1
 9fa:	d8 f7       	brcc	.-10     	; 0x9f2 <strnlen_P+0x2>
 9fc:	80 95       	com	r24
 9fe:	90 95       	com	r25
 a00:	8e 0f       	add	r24, r30
 a02:	9f 1f       	adc	r25, r31
 a04:	08 95       	ret

00000a06 <strnlen>:
 a06:	fc 01       	movw	r30, r24
 a08:	61 50       	subi	r22, 0x01	; 1
 a0a:	70 40       	sbci	r23, 0x00	; 0
 a0c:	01 90       	ld	r0, Z+
 a0e:	01 10       	cpse	r0, r1
 a10:	d8 f7       	brcc	.-10     	; 0xa08 <strnlen+0x2>
 a12:	80 95       	com	r24
 a14:	90 95       	com	r25
 a16:	8e 0f       	add	r24, r30
 a18:	9f 1f       	adc	r25, r31
 a1a:	08 95       	ret

00000a1c <fputc>:
 a1c:	0f 93       	push	r16
 a1e:	1f 93       	push	r17
 a20:	cf 93       	push	r28
 a22:	df 93       	push	r29
 a24:	fb 01       	movw	r30, r22
 a26:	23 81       	ldd	r18, Z+3	; 0x03
 a28:	21 fd       	sbrc	r18, 1
 a2a:	03 c0       	rjmp	.+6      	; 0xa32 <fputc+0x16>
 a2c:	8f ef       	ldi	r24, 0xFF	; 255
 a2e:	9f ef       	ldi	r25, 0xFF	; 255
 a30:	2c c0       	rjmp	.+88     	; 0xa8a <fputc+0x6e>
 a32:	22 ff       	sbrs	r18, 2
 a34:	16 c0       	rjmp	.+44     	; 0xa62 <fputc+0x46>
 a36:	46 81       	ldd	r20, Z+6	; 0x06
 a38:	57 81       	ldd	r21, Z+7	; 0x07
 a3a:	24 81       	ldd	r18, Z+4	; 0x04
 a3c:	35 81       	ldd	r19, Z+5	; 0x05
 a3e:	42 17       	cp	r20, r18
 a40:	53 07       	cpc	r21, r19
 a42:	44 f4       	brge	.+16     	; 0xa54 <fputc+0x38>
 a44:	a0 81       	ld	r26, Z
 a46:	b1 81       	ldd	r27, Z+1	; 0x01
 a48:	9d 01       	movw	r18, r26
 a4a:	2f 5f       	subi	r18, 0xFF	; 255
 a4c:	3f 4f       	sbci	r19, 0xFF	; 255
 a4e:	31 83       	std	Z+1, r19	; 0x01
 a50:	20 83       	st	Z, r18
 a52:	8c 93       	st	X, r24
 a54:	26 81       	ldd	r18, Z+6	; 0x06
 a56:	37 81       	ldd	r19, Z+7	; 0x07
 a58:	2f 5f       	subi	r18, 0xFF	; 255
 a5a:	3f 4f       	sbci	r19, 0xFF	; 255
 a5c:	37 83       	std	Z+7, r19	; 0x07
 a5e:	26 83       	std	Z+6, r18	; 0x06
 a60:	14 c0       	rjmp	.+40     	; 0xa8a <fputc+0x6e>
 a62:	8b 01       	movw	r16, r22
 a64:	ec 01       	movw	r28, r24
 a66:	fb 01       	movw	r30, r22
 a68:	00 84       	ldd	r0, Z+8	; 0x08
 a6a:	f1 85       	ldd	r31, Z+9	; 0x09
 a6c:	e0 2d       	mov	r30, r0
 a6e:	09 95       	icall
 a70:	89 2b       	or	r24, r25
 a72:	e1 f6       	brne	.-72     	; 0xa2c <fputc+0x10>
 a74:	d8 01       	movw	r26, r16
 a76:	16 96       	adiw	r26, 0x06	; 6
 a78:	8d 91       	ld	r24, X+
 a7a:	9c 91       	ld	r25, X
 a7c:	17 97       	sbiw	r26, 0x07	; 7
 a7e:	01 96       	adiw	r24, 0x01	; 1
 a80:	17 96       	adiw	r26, 0x07	; 7
 a82:	9c 93       	st	X, r25
 a84:	8e 93       	st	-X, r24
 a86:	16 97       	sbiw	r26, 0x06	; 6
 a88:	ce 01       	movw	r24, r28
 a8a:	df 91       	pop	r29
 a8c:	cf 91       	pop	r28
 a8e:	1f 91       	pop	r17
 a90:	0f 91       	pop	r16
 a92:	08 95       	ret

00000a94 <__ultoa_invert>:
 a94:	fa 01       	movw	r30, r20
 a96:	aa 27       	eor	r26, r26
 a98:	28 30       	cpi	r18, 0x08	; 8
 a9a:	51 f1       	breq	.+84     	; 0xaf0 <__ultoa_invert+0x5c>
 a9c:	20 31       	cpi	r18, 0x10	; 16
 a9e:	81 f1       	breq	.+96     	; 0xb00 <__ultoa_invert+0x6c>
 aa0:	e8 94       	clt
 aa2:	6f 93       	push	r22
 aa4:	6e 7f       	andi	r22, 0xFE	; 254
 aa6:	6e 5f       	subi	r22, 0xFE	; 254
 aa8:	7f 4f       	sbci	r23, 0xFF	; 255
 aaa:	8f 4f       	sbci	r24, 0xFF	; 255
 aac:	9f 4f       	sbci	r25, 0xFF	; 255
 aae:	af 4f       	sbci	r26, 0xFF	; 255
 ab0:	b1 e0       	ldi	r27, 0x01	; 1
 ab2:	3e d0       	rcall	.+124    	; 0xb30 <__ultoa_invert+0x9c>
 ab4:	b4 e0       	ldi	r27, 0x04	; 4
 ab6:	3c d0       	rcall	.+120    	; 0xb30 <__ultoa_invert+0x9c>
 ab8:	67 0f       	add	r22, r23
 aba:	78 1f       	adc	r23, r24
 abc:	89 1f       	adc	r24, r25
 abe:	9a 1f       	adc	r25, r26
 ac0:	a1 1d       	adc	r26, r1
 ac2:	68 0f       	add	r22, r24
 ac4:	79 1f       	adc	r23, r25
 ac6:	8a 1f       	adc	r24, r26
 ac8:	91 1d       	adc	r25, r1
 aca:	a1 1d       	adc	r26, r1
 acc:	6a 0f       	add	r22, r26
 ace:	71 1d       	adc	r23, r1
 ad0:	81 1d       	adc	r24, r1
 ad2:	91 1d       	adc	r25, r1
 ad4:	a1 1d       	adc	r26, r1
 ad6:	20 d0       	rcall	.+64     	; 0xb18 <__ultoa_invert+0x84>
 ad8:	09 f4       	brne	.+2      	; 0xadc <__ultoa_invert+0x48>
 ada:	68 94       	set
 adc:	3f 91       	pop	r19
 ade:	2a e0       	ldi	r18, 0x0A	; 10
 ae0:	26 9f       	mul	r18, r22
 ae2:	11 24       	eor	r1, r1
 ae4:	30 19       	sub	r19, r0
 ae6:	30 5d       	subi	r19, 0xD0	; 208
 ae8:	31 93       	st	Z+, r19
 aea:	de f6       	brtc	.-74     	; 0xaa2 <__ultoa_invert+0xe>
 aec:	cf 01       	movw	r24, r30
 aee:	08 95       	ret
 af0:	46 2f       	mov	r20, r22
 af2:	47 70       	andi	r20, 0x07	; 7
 af4:	40 5d       	subi	r20, 0xD0	; 208
 af6:	41 93       	st	Z+, r20
 af8:	b3 e0       	ldi	r27, 0x03	; 3
 afa:	0f d0       	rcall	.+30     	; 0xb1a <__ultoa_invert+0x86>
 afc:	c9 f7       	brne	.-14     	; 0xaf0 <__ultoa_invert+0x5c>
 afe:	f6 cf       	rjmp	.-20     	; 0xaec <__ultoa_invert+0x58>
 b00:	46 2f       	mov	r20, r22
 b02:	4f 70       	andi	r20, 0x0F	; 15
 b04:	40 5d       	subi	r20, 0xD0	; 208
 b06:	4a 33       	cpi	r20, 0x3A	; 58
 b08:	18 f0       	brcs	.+6      	; 0xb10 <__ultoa_invert+0x7c>
 b0a:	49 5d       	subi	r20, 0xD9	; 217
 b0c:	31 fd       	sbrc	r19, 1
 b0e:	40 52       	subi	r20, 0x20	; 32
 b10:	41 93       	st	Z+, r20
 b12:	02 d0       	rcall	.+4      	; 0xb18 <__ultoa_invert+0x84>
 b14:	a9 f7       	brne	.-22     	; 0xb00 <__ultoa_invert+0x6c>
 b16:	ea cf       	rjmp	.-44     	; 0xaec <__ultoa_invert+0x58>
 b18:	b4 e0       	ldi	r27, 0x04	; 4
 b1a:	a6 95       	lsr	r26
 b1c:	97 95       	ror	r25
 b1e:	87 95       	ror	r24
 b20:	77 95       	ror	r23
 b22:	67 95       	ror	r22
 b24:	ba 95       	dec	r27
 b26:	c9 f7       	brne	.-14     	; 0xb1a <__ultoa_invert+0x86>
 b28:	00 97       	sbiw	r24, 0x00	; 0
 b2a:	61 05       	cpc	r22, r1
 b2c:	71 05       	cpc	r23, r1
 b2e:	08 95       	ret
 b30:	9b 01       	movw	r18, r22
 b32:	ac 01       	movw	r20, r24
 b34:	0a 2e       	mov	r0, r26
 b36:	06 94       	lsr	r0
 b38:	57 95       	ror	r21
 b3a:	47 95       	ror	r20
 b3c:	37 95       	ror	r19
 b3e:	27 95       	ror	r18
 b40:	ba 95       	dec	r27
 b42:	c9 f7       	brne	.-14     	; 0xb36 <__ultoa_invert+0xa2>
 b44:	62 0f       	add	r22, r18
 b46:	73 1f       	adc	r23, r19
 b48:	84 1f       	adc	r24, r20
 b4a:	95 1f       	adc	r25, r21
 b4c:	a0 1d       	adc	r26, r0
 b4e:	08 95       	ret

00000b50 <__prologue_saves__>:
 b50:	2f 92       	push	r2
 b52:	3f 92       	push	r3
 b54:	4f 92       	push	r4
 b56:	5f 92       	push	r5
 b58:	6f 92       	push	r6
 b5a:	7f 92       	push	r7
 b5c:	8f 92       	push	r8
 b5e:	9f 92       	push	r9
 b60:	af 92       	push	r10
 b62:	bf 92       	push	r11
 b64:	cf 92       	push	r12
 b66:	df 92       	push	r13
 b68:	ef 92       	push	r14
 b6a:	ff 92       	push	r15
 b6c:	0f 93       	push	r16
 b6e:	1f 93       	push	r17
 b70:	cf 93       	push	r28
 b72:	df 93       	push	r29
 b74:	cd b7       	in	r28, 0x3d	; 61
 b76:	de b7       	in	r29, 0x3e	; 62
 b78:	ca 1b       	sub	r28, r26
 b7a:	db 0b       	sbc	r29, r27
 b7c:	0f b6       	in	r0, 0x3f	; 63
 b7e:	f8 94       	cli
 b80:	de bf       	out	0x3e, r29	; 62
 b82:	0f be       	out	0x3f, r0	; 63
 b84:	cd bf       	out	0x3d, r28	; 61
 b86:	09 94       	ijmp

00000b88 <__epilogue_restores__>:
 b88:	2a 88       	ldd	r2, Y+18	; 0x12
 b8a:	39 88       	ldd	r3, Y+17	; 0x11
 b8c:	48 88       	ldd	r4, Y+16	; 0x10
 b8e:	5f 84       	ldd	r5, Y+15	; 0x0f
 b90:	6e 84       	ldd	r6, Y+14	; 0x0e
 b92:	7d 84       	ldd	r7, Y+13	; 0x0d
 b94:	8c 84       	ldd	r8, Y+12	; 0x0c
 b96:	9b 84       	ldd	r9, Y+11	; 0x0b
 b98:	aa 84       	ldd	r10, Y+10	; 0x0a
 b9a:	b9 84       	ldd	r11, Y+9	; 0x09
 b9c:	c8 84       	ldd	r12, Y+8	; 0x08
 b9e:	df 80       	ldd	r13, Y+7	; 0x07
 ba0:	ee 80       	ldd	r14, Y+6	; 0x06
 ba2:	fd 80       	ldd	r15, Y+5	; 0x05
 ba4:	0c 81       	ldd	r16, Y+4	; 0x04
 ba6:	1b 81       	ldd	r17, Y+3	; 0x03
 ba8:	aa 81       	ldd	r26, Y+2	; 0x02
 baa:	b9 81       	ldd	r27, Y+1	; 0x01
 bac:	ce 0f       	add	r28, r30
 bae:	d1 1d       	adc	r29, r1
 bb0:	0f b6       	in	r0, 0x3f	; 63
 bb2:	f8 94       	cli
 bb4:	de bf       	out	0x3e, r29	; 62
 bb6:	0f be       	out	0x3f, r0	; 63
 bb8:	cd bf       	out	0x3d, r28	; 61
 bba:	ed 01       	movw	r28, r26
 bbc:	08 95       	ret

00000bbe <_exit>:
 bbe:	f8 94       	cli

00000bc0 <__stop_program>:
 bc0:	ff cf       	rjmp	.-2      	; 0xbc0 <__stop_program>
